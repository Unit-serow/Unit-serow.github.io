<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随笔-2020-03-02</title>
    <url>/2020/03/02/%E9%9A%8F%E7%AC%94-2020-03-02/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5f2ef1d04fa5b0fe0095960290f0ddf9fc4c0751c28d7b5887907696b78c8b1b">0267ec72f19b8c198697a4f72870a3a811f9ce2259a29ec8caf43a4a1c0f6db213702a5731d6365d9aa90312dc897691fb58c943fec4884213f86bc7793e03deb9125c147ca2c33f950cb4169b1a0da889e888682c1c080ae97a24dc144cdd6111b81285e0ba47873e5cc4bddbb63ac5eaedde367a0e118229557e11034067cba9fc7c7f329fd1361d665f7b8b7843fd1a3ce9187fb9e6418d904724eb7177c984aeb75826387c01d05a132168580b56274ef2da571d37d68c6bb1fbd3aaef713311dee6c8053bbfecdfe0f68dffc6f0319d2b172be17beaffb9ba3be73fb87bdcc0c9b1d0a24fdde329b49da776e6c2f83b10da456eb7a79e46b37f85d65a14174eb02a9e47ae5ea8c7813ce1d31b43fff7646fc8f95c5d57978fa8aa1111e89dd792e68625671488e5c80aba307ccf730296d7ebc12f5bfe7b7f7044074701388c3678be6a194d9201d83a514307159cf2c24ecbb2c410b375db767304d7ee94e68c28ca5ac88634c0dc6fc8718db003e002016793a016da5167bceda58af1f1e8031b8525a1cd359253f3cebd3b51802e46acddd77dc19aeaea4128f0e9853956aeff3144782f5a005ee635c687acee5d19d79f3db1a335e6b0f0fdd61148d9611a2230d53ce27f43c54459a27ad5a30b7077c1e8bbe9006805484e7b452193bfd3a81c1f74f16c002acad85f411cda278738d166194ddd734a1246782104ae019b0d591f119e1e20c541ba62a04bf5637149c2e710587ecfee259dfff16d0a273de799c2486895046b7928fafdf8</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU-LFS-3-3</title>
    <url>/2020/03/01/GNU-LFS-3-3/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 22:42:43 GMT+0800 (中国标准时间) --><h2 id="GNU-LFS-3-3"><a href="#GNU-LFS-3-3" class="headerlink" title="GNU-LFS-3-3"></a>GNU-LFS-3-3</h2><ul><li>系统转换过程与细节描述</li></ul><hr><p><strong>文案说明:</strong></p><ul><li>本篇文案用于描述目标系统环境的最基本配置与对从临时系统进入到目标系统的各种细节的描述</li><li>参考文献及版本为LFS-v6.2/v6.3</li><li>描述主体为LFS-v6.3，LFS-v6.2会有特别标注</li><li>LFS-v6.2和LFS-v6.3的内容与执行语句通常没有本质上的区别<blockquote><p>多数都只是执行顺序或者深层的处理逻辑不同<br>但大体非常相似</p></blockquote></li><li>多数指令在目标主机的chroot环境下进行</li></ul><p><strong>目录简述:</strong></p><ul><li>系统清理</li><li>虚拟文件系统</li><li>chroot环境</li><li>标准文件系统(FHS标准)</li><li>用户与用户组的基本配置</li><li>参考资料</li></ul><hr><h3 id="系统清理"><a href="#系统清理" class="headerlink" title="系统清理"></a>系统清理</h3><p><strong>临时主机的系统清理</strong></p><ul><li><p>删除已经安装的可执行程序和库文件当中的调试符号，以节约空间(大约70 MB)</p><blockquote><p><code>$ strip --strip-debug /tools/lib/*</code><br><code>$ strip --strip-unneeded /tools/{,s}bin/*</code></p></blockquote></li><li><p>命令会跳过大约20个文件，报告不能识别这些文件格式</p><blockquote><p>其中大多数是脚本而不是二进制文件</p></blockquote></li><li><p>这里需要注意的一点是千万不要在库文件上使用<code>--strip-unneeded</code>，否则会破坏其静态版本</p><blockquote><p>如果已经是过去时了的话，就得从头开始编译全部的工具链软件包了</p></blockquote></li><li><p>删除相关文档文件(info，man)，会节约20 MB</p><blockquote><p><code>$ rm -rf /tools/{info,man}</code></p></blockquote></li></ul><hr><ul><li><p>到目前为止，临时工具链已制作完毕</p></li><li><p>这一阶段开始进入目标主机环境</p></li><li><p>从现在开始不需要lfs用户来制作系统了</p></li><li><p>退出lfs用户</p><blockquote><p><code>$ exit</code></p></blockquote></li><li><p>此时为root用户环境，改变必要文件的权限与所有者</p></li><li><p>一部分的原因是为了避免不必要的安全方面所产生的问题</p></li><li><p>将$LFS/tools目录以及其中文件的所有者改为root用户</p><blockquote><p><code>$ chown -R root:root $LFS/tools</code></p></blockquote></li><li><p>这里说明一下:</p><blockquote><p>建立LFS系统的时候，在创建<code>/etc/passwd</code>文件时<br>添加的user ID和group ID是与宿主系统的user ID和group ID相同的lfs用户</p></blockquote></li></ul><hr><h3 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h3><p><strong>挂载虚拟文件系统</strong></p><ul><li><p>为虚拟内核文件系统建立挂载目录(dev,proc,sys)</p><blockquote><p><code>$ mkdir -pv $LFS/{dev,proc,sys}</code></p></blockquote></li><li><p>创建初始设备节点(创建两个目标系统所必须的设备文件)</p><blockquote><p><code>$ mknod -m 600 $LFS/dev/console c 5 1</code><br><code>$ mknod -m 666 $LFS/dev/null c 1 3</code></p></blockquote></li><li><p>具体说明:</p><blockquote><p>内核在引导时要求某些设备节点必须存在(特别是console和null)<br>这些设备节点必须创建在 硬盘上才能使得内核在udev尚未启动之前就可以使用它们<br>此外还有当Linux以<code>init=/bin/bash</code>启动</p></blockquote></li><li><p>挂载并填充/dev目录(LFS-v6.2)</p><blockquote><p><code>$ mount --bind /dev $LFS/dev</code></p></blockquote></li><li><p>具体说明:</p><blockquote><p>LFS-v6.2推荐的向<code>/dev</code>目录填充设备的方法是在<code>/dev</code>上挂载一个虚拟文件系统(比如 tmpfs)<br>然后在设备被检测到或被访问到的时候(通常是在系统引导的过程中)动态创建设备节点<br>既然现在新的系统尚未被引导，那么就有必要通过手工挂载和填充<code>/dev</code>目录<br>这可以通过绑定挂载宿主系统的<code>/dev</code>目录<br>绑定挂载是一种特殊的挂载方式，允许本地主机上的当前用户创建一个目录或者是挂载点的镜像到其他的地方</p></blockquote></li><li><p>挂载虚拟内核文件系统</p><blockquote><p><code>$ mount -v --bind /dev $LFS/dev</code><br><code>$ mount -vt devpts devpts $LFS/dev/pts</code><br><code>$ mount -vt tmpfs shm $LFS/dev/shm</code><br><code>$ mount -vt proc proc $LFS/proc</code><br><code>$ mount -vt sysfs sysfs $LFS/sys</code></p></blockquote></li></ul><hr><ul><li>在进入chroot环境之前，可以将<code>lfs-sources/</code>里面所有源码包复制到<code>$LFS/sources/</code>目录中</li><li>这么做会让后面在构建目标系统的时候使用源代码变得更方便<blockquote><p><code>$ cp -a /lfs-sources/* $LFS/sources/</code></p></blockquote></li></ul><hr><h3 id="chroot环境"><a href="#chroot环境" class="headerlink" title="chroot环境"></a>chroot环境</h3><p><strong>进入chroot环境</strong></p><ul><li>Chroot到目标系统的目录下，以便不受主系统的影响来制作目标系统</li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ chroot <span class="string">"$LFS"</span> <span class="regexp">/tools/</span>bin/env -i \ </span><br><span class="line">HOME=/root TERM=<span class="string">"$TERM"</span> PS1=<span class="string">'\u:\w\$ '</span> \ </span><br><span class="line">PATH=<span class="regexp">/bin:/</span>usr<span class="regexp">/bin:/</span><span class="string">sbin:</span><span class="regexp">/usr/</span><span class="string">sbin:</span><span class="regexp">/tools/</span>bin \ </span><br><span class="line"><span class="regexp">/tools/</span>bin/bash --login +h</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li><code>env</code>命令的<code>参数-i</code>的作用是清除所有chroot环境变量<blockquote><p>后面是重新设定HOME,TERM,PS1, PATH等变量的值</p></blockquote></li><li><code>TERM=$TERM</code>设定虚拟根环境中的TERM的值与chroot外面的一样<blockquote><p>这个值是让像vim和less之类的程序可以正确操作<br>如果还需要重新设置其它的值，如CFLAGS或CXXFLAGS，这里是个不错的位置</p></blockquote></li></ul><hr><ul><li><p>从这里开始，不再需要LFS环境变量了，因为所有的工作都被限制在LFS文件系统里面</p><blockquote><p>这是由于已经告诉了Bash shell $LFS 是现在的根目录(<code>/</code>)<br>注意，这里<code>/tools/bin</code>位于PATH的最后面<br>也就是说当软件包的最终版本安装之后就不再使用临时工具了<br>为了使shell无法记住可执行二进制代码的位置，需要通过使用<code>+h参数</code>关闭bash的散列功能</p></blockquote></li><li><p>此时bash提示符会显示: <code>I have no name!</code>这是正常的，因为<code>/etc/passwd</code>还没有创建</p></li></ul><hr><h3 id="标准文件系统"><a href="#标准文件系统" class="headerlink" title="标准文件系统"></a>标准文件系统</h3><p><strong>创建符合FHS标准的Unix文件系统</strong></p><p><strong>创建系统目录结构(FHS标准目录树):</strong></p><blockquote><p><code>$ mkdir -pv /{bin,boot,etc/opt,home,lib,mnt,opt}</code><br><code>$ mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}</code><br><code>$ install -dv -m 0750 /root</code><br><code>$ install -dv -m 1777 /tmp /var/tmp</code><br><code>$ mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}</code><br><code>$ mkdir -pv /usr/{,local/}share/{doc,info,locale,man}</code><br><code>$ mkdir -pv /usr/{,local/}share/{misc,terminfo,zoneinfo}</code><br><code>$ mkdir -pv /usr/{,local/}share/man/man{1..8}</code></p></blockquote><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> <span class="keyword">dir</span> <span class="keyword">in</span> /usr /usr/<span class="keyword">local</span>; <span class="keyword">do</span></span><br><span class="line">ln -sv share/&#123;<span class="keyword">man</span>,doc,info&#125; <span class="variable">$dir</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p><code>$ mkdir -pv /var/{lock,log,mail,run,spool}</code><br><code>$ mkdir -pv /var/{opt,cache,lib/{misc,locate},local}</code></p></blockquote><hr><p><strong>创建必需的文件与符号连接</strong></p><ul><li>一些程序使用固化的路径(<code>hard-wired paths</code>)指向一些目前还不存在的程序上</li><li>为了兼容这些程序，可以创建一些符号链接</li><li>然后在软件安装之后用实际文件进行替代</li></ul><p><strong>创建必要的符号链接:</strong></p><blockquote><p><code>$ ln -sv /tools/bin/{bash,cat,echo,grep,pwd,stty} /bin</code><br><code>$ ln -sv /tools/bin/perl /usr/bin</code><br><code>$ ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib</code><br><code>$ ln -sv /tools/lib/libstdc++.so{,.6} /usr/lib</code><br><code>$ ln -sv bash /bin/sh</code><br><code>$ touch /etc/mtab</code></p></blockquote><hr><h3 id="用户与用户组的基本配置"><a href="#用户与用户组的基本配置" class="headerlink" title="用户与用户组的基本配置"></a>用户与用户组的基本配置</h3><p><strong>配置必要的用户组</strong></p><ul><li><p>以下区块为LFS-v6.2独有</p></li><li><p>一个常规的Linux系统在<code>/etc/mtab</code>中有一个已挂载文件系统的列表正常情况下</p></li><li><p>这个文件 在我们挂载一个新的文件系统的时候会被创建</p></li><li><p>因为从此开始在chroot环境下不会再挂载任何文件系统</p></li><li><p>所以需要人为的为那些用到<code>/etc/mtab</code>的程序创建一个空文件</p><blockquote><p><code>$ touch /etc/mtab</code></p></blockquote></li><li><p>为了让<code>root用户</code>可以登录而且<code>用户名root</code>可以被识别</p></li><li><p>在这里需要创建相应的<code>/etc/passwd</code>和<code>/etc/group</code>文件</p></li></ul><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cat &gt; <span class="regexp">/etc/passwd</span> &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span>0<span class="symbol">:</span>0<span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span> </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>此时root的真正密码将在后面设置(<code>&quot;x&quot;</code>在这里只是一个占位符)</li></ul><hr><ul><li>使用以下命令创建/etc/group文件(LFS-v6.2):</li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ cat &gt; <span class="regexp">/etc/</span>group &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"><span class="string">root:</span><span class="string">x:</span><span class="number">0</span>: </span><br><span class="line"><span class="string">bin:</span><span class="string">x:</span><span class="number">1</span>: </span><br><span class="line"><span class="string">sys:</span><span class="string">x:</span><span class="number">2</span>: </span><br><span class="line"><span class="string">kmem:</span><span class="string">x:</span><span class="number">3</span>: </span><br><span class="line"><span class="string">tty:</span><span class="string">x:</span><span class="number">4</span>: </span><br><span class="line"><span class="string">tape:</span><span class="string">x:</span><span class="number">5</span>: </span><br><span class="line"><span class="string">daemon:</span><span class="string">x:</span><span class="number">6</span>: </span><br><span class="line"><span class="string">floppy:</span><span class="string">x:</span><span class="number">7</span>:</span><br><span class="line"><span class="string">disk:</span><span class="string">x:</span><span class="number">8</span>: </span><br><span class="line"><span class="string">lp:</span><span class="string">x:</span><span class="number">9</span>: </span><br><span class="line"><span class="string">dialout:</span><span class="string">x:</span><span class="number">10</span>: </span><br><span class="line"><span class="string">audio:</span><span class="string">x:</span><span class="number">11</span>: </span><br><span class="line"><span class="string">video:</span><span class="string">x:</span><span class="number">12</span>: </span><br><span class="line"><span class="string">utmp:</span><span class="string">x:</span><span class="number">13</span>: </span><br><span class="line"><span class="string">usb:</span><span class="string">x:</span><span class="number">14</span>: </span><br><span class="line"><span class="string">cdrom:</span><span class="string">x:</span><span class="number">15</span>: </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>在LFS-v6.2这里创建的用户组并不是某个标准所要求的部分<blockquote><p>只是因为在随后<code>Udev配置</code>将要用到而以</p></blockquote></li></ul><hr><p><strong>创建<code>root</code>及<code>nobody用户</code>和必要的组(LFS-v6.3):</strong></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ cat &gt; <span class="regexp">/etc/</span>passwd &lt;&lt; <span class="string">"EOF"</span> </span><br><span class="line"><span class="string">root:</span><span class="string">x:</span><span class="number">0</span>:<span class="number">0</span>:<span class="string">root:</span><span class="regexp">/root:/</span>bin/bash </span><br><span class="line"><span class="string">nobody:</span><span class="string">x:</span><span class="number">99</span>:<span class="number">99</span>:Unprivileged <span class="string">User:</span><span class="regexp">/dev/</span><span class="string">null:</span><span class="regexp">/bin/</span><span class="literal">false</span> </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ cat &gt; <span class="regexp">/etc/</span>group &lt;&lt; <span class="string">"EOF"</span> </span><br><span class="line"><span class="string">root:</span><span class="string">x:</span><span class="number">0</span>: </span><br><span class="line"><span class="string">bin:</span><span class="string">x:</span><span class="number">1</span>: </span><br><span class="line"><span class="string">sys:</span><span class="string">x:</span><span class="number">2</span>: </span><br><span class="line"><span class="string">kmem:</span><span class="string">x:</span><span class="number">3</span>: </span><br><span class="line"><span class="string">tty:</span><span class="string">x:</span><span class="number">4</span>: </span><br><span class="line"><span class="string">tape:</span><span class="string">x:</span><span class="number">5</span>: </span><br><span class="line"><span class="string">daemon:</span><span class="string">x:</span><span class="number">6</span>: </span><br><span class="line"><span class="string">floppy:</span><span class="string">x:</span><span class="number">7</span>:</span><br><span class="line"><span class="string">disk:</span><span class="string">x:</span><span class="number">8</span>: </span><br><span class="line"><span class="string">lp:</span><span class="string">x:</span><span class="number">9</span>: </span><br><span class="line"><span class="string">dialout:</span><span class="string">x:</span><span class="number">10</span>: </span><br><span class="line"><span class="string">audio:</span><span class="string">x:</span><span class="number">11</span>: </span><br><span class="line"><span class="string">video:</span><span class="string">x:</span><span class="number">12</span>: </span><br><span class="line"><span class="string">utmp:</span><span class="string">x:</span><span class="number">13</span>: </span><br><span class="line"><span class="string">usb:</span><span class="string">x:</span><span class="number">14</span>: </span><br><span class="line"><span class="string">cdrom:</span><span class="string">x:</span><span class="number">15</span>: </span><br><span class="line"><span class="string">mail:</span><span class="string">x:</span><span class="number">34</span>: </span><br><span class="line"><span class="string">nogroup:</span><span class="string">x:</span><span class="number">99</span>: </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><hr><ul><li><p>因为完整的Glibc在目标系统中已经安装</p></li><li><p>而且<code>/etc/passwd</code>和<code>/etc/group</code>文件也已创建</p></li><li><p>所以用户名和组名现在可以开始使用了</p></li><li><p>重新加载bash，以使root用户起效</p><blockquote><p><code>$ exec /tools/bin/bash --login +h</code></p></blockquote></li><li><p>参数说明:</p><blockquote><p><code>参数+h</code>用于告诉bash不能使用其内部哈希表查找路径</p></blockquote></li></ul><hr><ul><li>程序 login, agetty, init(还有其它一些程序)使用一些日志文件来记录信息</li><li>比如谁在什么时候登录了系统等等</li><li>然而如果这些日志文件不存在，这些程序则无法写入</li><li>下面初始化这些日志文件，并设置适当的权限:</li></ul><blockquote><p><code>$ touch /var/run/utmp /var/log/{btmp,lastlog,wtmp}</code><br><code>$ chgrp -v utmp /var/run/utmp /var/log/lastlog</code><br><code>$ chmod -v 664 /var/run/utmp /var/log/lastlog</code></p></blockquote><ul><li>目录作用明细:<blockquote><p><code>/var/run/utmp</code>记录着现在登录的用户<br><code>/var/log/wtmp</code>记录所有的登录和退出<br><code>/var/log/lastlog</code>记录每个用户最后的登录信息<br><code>/var/log/btmp</code>记录错误的登录尝试</p></blockquote></li></ul><hr><ul><li>此时就已经完成了对目标主机的基础配置</li><li>同时已经进入目标主机的标准环境了</li><li>一下步即开始对目录主机进行程序编译与配置</li><li>进入源代码目录与设置LFS变量<blockquote><p><code>$ cd /sources</code><br><code>$ export LFS=/sources</code></p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>官方-EN-LFS-v6.2</li><li>官方-EN-LFS-v6.3</li><li>金步国-CN-LFS-v6.2</li><li>孙海勇-CN-LFS-v6.3</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-9</title>
    <url>/2020/03/01/LFS-9/</url>
    <content><![CDATA[<!-- build time:Mon Mar 02 2020 10:31:10 GMT+0800 (中国标准时间) --><h2 id="LFS-9"><a href="#LFS-9" class="headerlink" title="LFS-9"></a>LFS-9</h2><hr><h3 id="实现逻辑梳理-LFS-v6-3"><a href="#实现逻辑梳理-LFS-v6-3" class="headerlink" title="实现逻辑梳理(LFS-v6.3)"></a>实现逻辑梳理(LFS-v6.3)</h3><ul><li>主观理解，仅供参考</li></ul><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><ol><li>将原主机分区，假设分为两个分区:<blockquote><p>一个用作swap内存交换分区，另一个用作LFS系统制作分区</p></blockquote></li><li>创建LFS系统的制作及操作目录</li><li>挂载FLS系统所对应的分区目录</li><li>在被挂载的分区目录下建立源码存放目录/sources与工具编译目录/tools</li><li>利用原主机的root环境来为文件目录分配权限，同时配置目录的符号链接<blockquote><p>以方便操作与管理</p></blockquote></li><li>创建用户lfs与用户组lfs(可以同名)</li><li>登陆用户并建立lfs用户环境</li></ol><p><strong>建立临时系统</strong></p><ul><li><p>此时将所有的文件都编译进<code>$LFS/tools</code>目录内</p></li><li><p>源代码与压缩包存储于<code>$LFS/sources</code>目录内</p></li><li><p>构建GNU工具链内工具</p></li></ul><ol><li>Binutils Pass-1</li><li>GCC Pass-1</li><li>Kernel Headers API</li><li>Gilbc<blockquote><p>在Glibc在正确编译且安装完之后:<br>调整工具链，以此让以后所有的被编译与安装的工具都链接到C标准库内<br>修正GCC的specs文件，使其指向新的动态链接器<br>以此让GCC知道在哪能发现开始文件</p></blockquote></li><li>Binutils Pass-2</li><li>GCC Pass-2</li></ol><ul><li><p>构建其它辅助工具与系统程序</p></li><li><p>编译完成时，临时系统已完整</p></li><li><p>然后利用Strip程序对环境进行清理，info与man也可以进行清理</p></li><li><p>此时可以进入下一阶段</p></li></ul><hr><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><ul><li><p>此时的临时系统将作为目标系统的辅助系统以保证存在目的</p></li><li><p>退出lfs用户</p><blockquote><p>此时回到原主机的root环境<br>从此开始的编译都由root用户进行</p></blockquote></li><li><p>此时为了避免安全上的问题</p><blockquote><p>将$LFS/tools目录权限转交给root用户<br>可以将tools目录保留，以创建多个相同版本的LFS</p></blockquote></li></ul><hr><p><strong>首先挂载虚拟内核文件系统</strong></p><ol><li>创建虚拟内核文件系统(或其它设备文件)将要挂载的目录(dev,proc,sys)</li><li>创建设备初始节点</li><li>挂载并填充/dev目录</li><li>最后挂载虚拟文件系统至上面创建的节点之内<blockquote><p>挂载的同时创建了几个最重要的文件系统</p></blockquote></li><li>这里也可以将<code>/lfs-sources/*</code>内的源码包复制到<code>$LFS/sources/</code>内<blockquote><p>以方便使用</p></blockquote></li></ol><p><strong>其它内容:</strong></p><ul><li><p>系统环境逻辑:</p><blockquote><p><code>原主机-&gt;临时系统-&gt;目标系统</code><br><code>原主机-&gt;临时系统</code><br><code>原主机-&gt;目标系统</code><br><code>目标系统&lt;-临时系统</code></p></blockquote></li><li><p>这里要重点指出它们的关系并不是线性的</p></li><li><p>主系统包含于临时系统与目标系统</p></li><li><p>进入chroot的目的是让目标系统完全独立</p><blockquote><p>但此时的目标系统还带有临时系统所编译的工具环境<br>此时的原主机进入了chroot模式，因此现在不存在原主机的概念<br>原主机即为目标系统，而目标系统内当前还拥有临时系统的环境与功能</p></blockquote></li></ul><hr><p><strong>进入chroot来进行对LFS系统的操作</strong></p><ul><li>chroot</li><li>此时根据指令来进入chroot环境</li><li>现在所做的任何工作都是为了对已经进入的chroot进行补充<blockquote><p>以构建最终的LFS系统<br>并且chroot内只能使用到临时系统所构建的工具环境<br>此时所有的工作都被限制在LFS文件系统内<br>所以<code>Bash shell $LFS</code>就是现在的根目录<code>/</code></p></blockquote></li></ul><ol><li>清除所有chroot环境变量</li><li>重新设定HOME,TERM,PS1,PATH等变量的值</li><li>创建LFS系统的系统目录结构(必须是标准目录树/完全遵守FHS标准)</li><li>配置必要的符号链接<blockquote><p>因为有一些程序使用的固化的路径(hard-wired paths)指向一些还不存在的程序上<br>为了兼容这些程序，可以创建一些符号链接，然后在程序安装之后用实际文件进行替代</p></blockquote></li><li>然后再去创建root及nobody用户和必要的组<blockquote><p>以让root用户可以登陆与用户名root可以被识别</p></blockquote></li><li>此时因为已经拥有了临时系统内所构建的glibc和刚刚创建的<code>/etc/passwd</code>和<code>/etc/group</code>文件<blockquote><p>所以现在用户名和用户组已经处于可用状态了</p></blockquote></li><li>启动新的shell</li><li>设置某些特定程序的log文件，以保证这些程序能够正常写入</li><li>最后进入源代码目录下，此时还可以将之前复制到sources下的源代码文件目录设置符号链接</li></ol><hr><h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3><p><strong>建立目标系统</strong></p><ul><li><p>此时将所有的文件都编入当前LFS主机(分区)的/usr/bin目录下</p></li><li><p>GNU工具链内工具</p></li></ul><ol><li>Linux kernel headers</li><li>Man-pages</li><li>Glibc<blockquote><p>调整工具链，以此让以后所有的被编译与安装的工具都链接到C标准库内<br>修正GCC的specs文件，使其指向新的动态链接器<br>以此让GCC知道在哪能发现开始文件</p></blockquote></li><li>Binutils</li><li>GCC</li></ol><ul><li>构建其它辅助工具与系统程序<blockquote><p>当目标主机最后一个工具-vim已经编译安装成功之后，开始进行下一阶段</p></blockquote></li></ul><hr><h3 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h3><ul><li>此时应该先对系统做一个备份<blockquote><p>因为此时操作此系统的人处于任何原因的手残或其它的失误<br>都会导致新操作系统的完全崩坏</p></blockquote></li></ul><ol><li>然后退出此时的虚拟根环境</li><li>接着再次进入虚拟根环境(为了清理系统)</li><li>利用Strip来清理系统</li><li>清理完成之后退出chroot并重新进入chroot<blockquote><p>从现在开始，每当重新进入LFS系统的chroot环境时，都不应该需要加入<code>/tools</code>参数了<br>因为此时的LFS主机内已经拥有完整的工具环境了</p></blockquote></li><li>进入chroot环境之后进行下一步配置<blockquote><p>包括配置启动脚本(boot loader)，设备处理模块，控制台，网络配置脚本，Bash Shell启动文件等等<br>然后为设备创建惯用的符号链接</p></blockquote></li><li>为了让LFS系统能够启动，还需要配置<code>/etc/fstab</code>文件</li><li>最后安装Linux内核</li><li>当配置完内核之后，安装GRUB并配置GRUB启动菜单</li><li>退出chroot</li><li>卸载虚拟文件系统</li><li>卸载LFS自己的文件系统</li><li>此时应该能够保证GRUB引导装载程序已经被设置，并且按照其启动菜单可以自动启动LFS系统</li></ol><p><strong>shutdown -r now</strong></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><hr><ul><li>需要理解的知识点:</li></ul><ol><li>工具链的制作与配置和对于配置细节的理解<blockquote><p>包括静态库与动态库的配置，应用与理解<br>打上该打的补丁(patch)，批处理文件(sed)，链接器与汇编器的使用与配置(as/ld)</p></blockquote></li><li>链接的过程与程序配置文件的编写<blockquote><p>在进入下一个阶段时对软链接的使用</p></blockquote></li><li>从一个系统到达另一个系统的配置环节<blockquote><p>清理工具(Strip)<br>固化代码</p></blockquote></li></ol><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>EN-LFS-v6.3<a href="http://www.linuxfromscratch.org/lfs/downloads/6.3/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/downloads/6.3/</code></p></blockquote></li><li><p>CN-LFS-v6.6(非官方)<a href="http://www.ha97.com/book/lfs-book-6.6/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.ha97.com/book/lfs-book-6.6/</code></p></blockquote></li></ul><hr><h3 id="LFS-补充内容"><a href="#LFS-补充内容" class="headerlink" title="LFS-补充内容"></a>LFS-补充内容</h3><ul><li><p>临时系统环境搭建(分区)</p></li><li><p>临时工具链安装与说明</p></li><li><p>临时工具链配置与说明</p></li><li><p>目标系统环境搭建(chroot)</p></li><li><p>目标工具链安装与说明</p></li><li><p>目标工具链配置与说明</p></li><li><p>然后以chroot进入纯粹的目标系统进行程序编译与安装</p></li><li><p>再然后进行对启动脚本与其它系统所需的最基本脚本进行配置</p></li><li><p>最后再创建fstab与编译并配置内核，重启系统结束</p></li><li><p>具体的脚本配置根据当前本地主机的内核版本而定</p></li><li><p>可参考LFS官方文案，这里不做过多赘述</p></li></ul><hr><ul><li>LFS-v6.2/v6.3所需的最基本脚本配置文件与程序</li></ul><ol><li>配置，编译并安装 LFS-Bootscripts-6.3</li><li>配置setclock脚本 (Configuring the setclock Script)</li><li>配置Linux控制台 (Configuring the Linux Console)</li><li>配置sysklogd脚本 (Configuring the sysklogd Script)</li><li>创建/etc/inputrc文件 (Creating the /etc/inputrc File)</li><li>配置Bash Shell启动文件 (The Bash Shell Startup Files)</li><li>配置localnet脚本 (Configuring the localnet Script)</li><li>自定义/etc/hosts文件 (Customizing the /etc/hosts File)</li><li>创建到设备的自定义符号链接 (Creating Custom Symlinks to Devices)</li><li>配置网络脚本 (Configuring the network Script)</li><li>配置网络脚本 (Creating the /etc/fstab File)</li><li>配置，编译并安装Linux-2.6.22.5</li><li>配置GRUB以使得系统可引导 (Making the LFS System Bootable)</li><li>重启操作系统 (Rebooting the System)</li></ol><hr><p><strong>参考资料:</strong></p><ul><li><p>LFS-v6.2/v6.3</p></li><li><p>EN-LFS-书籍仓库<a href="http://www.linuxfromscratch.org/lfs/downloads/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/downloads/</code></p></blockquote></li><li><p>EN-LFS-v6.2<a href="http://www.linuxfromscratch.org/lfs/downloads/6.2/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/downloads/6.2/</code></p></blockquote></li><li><p>EN-LFS-v6.3<a href="http://www.linuxfromscratch.org/lfs/downloads/6.3/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/downloads/6.3/</code></p></blockquote></li><li><p>具体的中文版可参考金钟国及其所属团队的译本</p></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-8</title>
    <url>/2020/03/01/LFS-8/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 04:45:43 GMT+0800 (中国标准时间) --><h2 id="LFS-8"><a href="#LFS-8" class="headerlink" title="LFS-8"></a>LFS-8</h2><hr><h3 id="LFS-v6-3基本程序一览"><a href="#LFS-v6-3基本程序一览" class="headerlink" title="LFS-v6.3基本程序一览"></a>LFS-v6.3基本程序一览</h3><ul><li>LFS-v6.3内软件目录(包含版本与章节)</li><li>不包含[GNU 工具链]内程序</li></ul><p><strong>参考资料:</strong></p><ul><li><p>EN-LFS-v6.3<a href="http://www.linuxfromscratch.org/lfs/downloads/6.3/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/downloads/6.3/</code></p></blockquote></li><li><p>CN-6.6非官方<a href="http://www.ha97.com/book/lfs-book-6.6/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.ha97.com/book/lfs-book-6.6/</code></p></blockquote></li></ul><hr><p><strong>临时主机程序目录</strong></p><p>5.13. Ncurses-5.6<br>5.14. Bash-3.2<br>5.15. Bzip2-1.0.4<br>5.16. Coreutils-6.9<br>5.17. Diffutils-2.8.1<br>5.18. Findutils-4.2.31<br>5.19. Gawk-3.1.5<br>5.20. Gettext-0.16.1<br>5.21. Grep-2.5.1a<br>5.22. Gzip-1.3.12<br>5.23. Make-3.81<br>5.24. Patch-2.5.4<br>5.25. Perl-5.8.8<br>5.26. Sed-4.1.5<br>5.27. Tar-1.18<br>5.28. Texinfo-4.9<br>5.29. Util-linux-2.12r</p><hr><p><strong>目标主机程序目录</strong></p><p>6.13. Berkeley DB-4.5.20<br>6.14. Sed-4.1.5<br>6.15. E2fsprogs-1.40.2<br>6.16. Coreutils-6.9<br>6.17. Iana-Etc-2.20<br>6.18. M4-1.4.10<br>6.19. Bison-2.3<br>6.20. Ncurses-5.6<br>6.21. Procps-3.2.7<br>6.22. Libtool-1.5.24<br>6.23. Perl-5.8.8<br>6.24. Readline-5.2<br>6.25. Zlib-1.2.3<br>6.26. Autoconf-2.61<br>6.27. Automake-1.10<br>6.28. Bash-3.2<br>6.29. Bzip2-1.0.4<br>6.30. Diffutils-2.8.1<br>6.31. File-4.21<br>6.32. Findutils-4.2.31<br>6.33. Flex-2.5.33<br>6.34. GRUB-0.97<br>6.35. Gawk-3.1.5<br>6.36. Gettext-0.16.1<br>6.37. Grep-2.5.1a<br>6.38. Groff-1.18.1.4<br>6.39. Gzip-1.3.12<br>6.40. Inetutils-1.5<br>6.41. IPRoute2-2.6.20-070313<br>6.42. Kbd-1.12<br>6.43. Less-406<br>6.44. Make-3.81<br>6.45. Man-DB-2.4.4<br>6.46. Mktemp-1.5<br>6.47. Module-Init-Tools-3.2.2<br>6.48. Patch-2.5.4<br>6.49. Psmisc-22.5<br>6.50. Shadow-4.0.18.1<br>6.51. Sysklogd-1.4.1<br>6.52. Sysvinit-2.86<br>6.53. Tar-1.18<br>6.54. Texinfo-4.9<br>6.55. Udev-113<br>6.56. Util-linux-2.12r<br>6.57. Vim-7.1</p><hr><p><strong>最终阶段程序</strong></p><p>7.2. LFS-Bootscripts-6.3<br>Linux-2.6.22.5</p><hr><h2 id="相关指令参考"><a href="#相关指令参考" class="headerlink" title="相关指令参考"></a>相关指令参考</h2><ul><li>patch</li><li>sed</li><li>ld</li><li>strip</li></ul><hr><h3 id="patch命令"><a href="#patch命令" class="headerlink" title="patch命令"></a>patch命令</h3><ul><li><p>Linux patch命令用于修补文件(为文件打上补丁)</p><blockquote><p>patch指令让用户利用设置修补文件的方式，修改，更新原始文件<br>倘若一次仅修改一个文件，可直接在指令列中下达指令依序执行<br>如果配合修补文件的方式则能一次修补大批文件<br>这也是Linux系统核心的升级方法之一</p></blockquote></li><li><p>语法:</p><blockquote><p><code>patch [参数] [选项] [原始文件 &lt;修补文件&gt;] 或 path [-p &lt;剥离层级&gt;] &lt; [修补文件]</code><br>具体参考: <a href="https://www.runoob.com/linux/linux-comm-patch.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-patch.html</a></p></blockquote></li><li><p>实例:</p></li><li><p><code>$ patch -Np1 i ../expect-5.43.0-spawn-1.patch</code></p><blockquote><p>将<code>expect</code>工具打上补丁<code>expect-5.43.0-spawn-1.patch</code></p></blockquote></li></ul><hr><h3 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h3><ul><li><p>Linux sed 命令的作用是利用脚本来处理文本文件</p></li><li><p>sed可依照脚本的指令来处理，编辑文本文件</p></li><li><p>sed主要用来自动编辑一个或多个文件，简化对文件的反复操作，编写转换程序等</p></li><li><p>命令语法:</p><blockquote><p><code>sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</code><br>具体参考: <a href="https://www.runoob.com/linux/linux-comm-sed.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-sed.html</a></p></blockquote></li><li><p>实例:</p></li><li><p>利用sed命令来确保在非bootstrap编译时也同样使用<code>-fomit-frame-pointer</code>选项，以保持一致性</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ cp -v gcc/<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span><span class="keyword">in</span>&#123;,.tmp&#125; &amp;&amp;</span><br><span class="line">sed 's/^XCFLAGS =$/&amp; -fomit-frame-pointer/' gcc/<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span><span class="keyword">in</span>.tmp \</span><br><span class="line">&gt; gcc/<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span><span class="keyword">in</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="ld命令"><a href="#ld命令" class="headerlink" title="ld命令"></a>ld命令</h3><ul><li><p>ld 命令是二进制工具集GNU Binutils的一员，是GNU的链接器，用于将目标文件与库链接为可执行文件或库文件</p></li><li><p>命令语法:</p><blockquote><p><code>$ ld [OPTIONS] OBJFILES</code></p></blockquote></li><li><p>实例:</p></li><li><p>链接目标文件生成可执行文件</p></li><li><p>给定C++目标文件<code>test.o</code>与<code>main.o</code>，生成可执行文件<code>test.out</code></p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ ld /usr/lib64/crt1.o /usr/lib64/crti.o /usr/lib64/crtn.o &amp;&amp;</span><br><span class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">gcc</span>/<span class="title">x86_64</span>-<span class="title">redhat</span>-<span class="title">linux</span>/4.8.5/<span class="title">crtbegin</span>.<span class="title">o</span> /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">gcc</span>/<span class="title">x86_64</span>-<span class="title">redhat</span>-<span class="title">linux</span>/4.8.5/<span class="title">crtend</span>.<span class="title">o</span> &amp;&amp;</span></span><br><span class="line">-L/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">gcc</span>/<span class="title">x86_64</span>-<span class="title">redhat</span>-<span class="title">linux</span>/4.8.5 &amp;&amp;</span></span><br><span class="line">-L/usr/lib64 -L/usr/<span class="class"><span class="keyword">lib</span> -<span class="title">lstdc</span>++ -<span class="title">lm</span> -<span class="title">lgcc_s</span> -<span class="title">lc</span> -<span class="title">lgcc</span>  <span class="title">main</span>.<span class="title">o</span> <span class="title">test</span>.<span class="title">o</span> -<span class="title">o</span> <span class="title">test</span>.<span class="title">out</span></span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>具体参考:<br><a href="https://www.gnu.org/software/binutils/" target="_blank" rel="noopener">https://www.gnu.org/software/binutils/</a><br><a href="https://www.linux.org/docs/man1/ld.html" target="_blank" rel="noopener">https://www.linux.org/docs/man1/ld.html</a><br><a href="https://blog.csdn.net/K346K346/article/details/89088652" target="_blank" rel="noopener">https://blog.csdn.net/K346K346/article/details/89088652</a><br><a href="https://dablelv.blog.csdn.net/article/details/88094902" target="_blank" rel="noopener">https://dablelv.blog.csdn.net/article/details/88094902</a><br><a href="http://stackoverflow.com/questions/14179969/whats-the-different-between-l-libpath-and-etc-ld-so-conf-configure-the-libpat" target="_blank" rel="noopener">http://stackoverflow.com/questions/14179969/whats-the-different-between-l-libpath-and-etc-ld-so-conf-configure-the-libpat</a></p></blockquote><ul><li>ld和ld.so的区别<a href="https://www.cnblogs.com/foohack/p/4105717.html" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://www.cnblogs.com/foohack/p/4105717.html</code></p></blockquote></li></ul><hr><h3 id="Strip"><a href="#Strip" class="headerlink" title="Strip"></a>Strip</h3><ul><li><p>从特定文件中剥掉一些符号信息和调试信息，使文件变小</p></li><li><p>strip - Discard symbols from object files(from man strip)</p></li><li><p>具体语法:</p><blockquote><p><code>$ strip [-xxx bfdname |--xxx=bfdname]</code><br>strip 之后的任何选项都是自定义参数，这里将不会做过多阐述<br>参考自: <a href="https://blog.csdn.net/qq_37858386/article/details/78559490" target="_blank" rel="noopener">https://blog.csdn.net/qq_37858386/article/details/78559490</a></p></blockquote></li><li><p>实例:</p></li><li><p>清理<code>/tools/lib</code>内所有的debug文件</p><blockquote><p><code>$ strip --strip-debug /tools/lib/*</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU-LFS-3-2</title>
    <url>/2020/03/01/GNU-LFS-3-2/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 01:00:17 GMT+0800 (中国标准时间) --><h3 id="GNU-LFS-3-2"><a href="#GNU-LFS-3-2" class="headerlink" title="GNU LFS-3-2"></a>GNU LFS-3-2</h3><hr><p><strong>目标主机-2</strong></p><ul><li>GCC</li><li>Binutils</li><li>LFS-v6.2/v6.3</li></ul><hr><h3 id="Binutils"><a href="#Binutils" class="headerlink" title="Binutils"></a>Binutils</h3><p><strong>Binutils-2.17/Binutils-2.16.1</strong></p><blockquote><p><code>$ tar xvf $LFS/binutils-2.17/2.16.1.tar.bz2</code><br><code>$ mkdir -v ../binutils-build</code><br><code>$ cd ../binutils-build</code></p></blockquote><ul><li><p>编译配置:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ ../binutils<span class="number">-2.17</span>/<span class="number">2.16</span><span class="number">.1</span>/configure --prefix=/usr \</span><br><span class="line">		            --enable-<span class="keyword">shared</span></span><br></pre></td></tr></table></figure></li><li><p>源码编译:</p><blockquote><p><code>$ make tooldir=/usr</code></p></blockquote></li></ul><p><strong>make参数含义:</strong></p><ul><li><p>参数<code>tooldir=/usr</code></p><blockquote><p>通常情况下，tooldir(可执行文件的安装目录)是<code>$(exec_prefix)/$(target_alias)</code><br>例如在i686机器上，将是<code>tt class=&quot;filename&quot;&gt;/usr/i686-pc-linux-gnu</code><br>因为此时只为自己的系统进 行编译，就并不需要在<code>/usr</code>目录后面再存在特殊的后缀<br><code>$(exec_prefix)/$(target_alias)</code>只是在交叉编译时(比如在Intel机器上编译将要在PowerPC上执行的程序)才用到</p></blockquote></li><li><p>编译测试套件:</p><blockquote><p><code>$ make check</code></p></blockquote></li><li><p>编译安装软件包</p><blockquote><p><code>$ make tooldir=/usr install</code></p></blockquote></li><li><p>安装某些软件包需要的<code>libiberty头文件</code></p><blockquote><p><code>$ cp -v ../binutils-2.17/2.16.1/include/libiberty.h /usr/include</code></p></blockquote></li><li><p>Binutils的内容这里不做过多阐述，可参考原文第6.11.2章节</p></li></ul><hr><h3 id="GCC-4-1-2-GCC-4-0-3"><a href="#GCC-4-1-2-GCC-4-0-3" class="headerlink" title="GCC-4.1.2/GCC-4.0.3"></a>GCC-4.1.2/GCC-4.0.3</h3><blockquote><p><code>$ tar xvf $LFS/gcc-4.1.2/4.0.3.tar.bz2</code><br><code>$ cd gcc-4.1.2/4.0.3</code></p></blockquote><ul><li><p>先使用一个sed命令来禁止GCC安装它自己的<code>libiberty.a</code></p></li><li><p>这里将使用Binutils附带的<code>libiberty.a</code>来代替</p><blockquote><p><code>$ sed -i &#39;s/install_to_$(INSTALL_DEST) //&#39; libiberty/Makefile.in</code></p></blockquote></li><li><p>在临时主机中应用的bootstrap编译中，编译器会有<code>-fomit-frame-pointer</code>的标志</p></li><li><p>非bootstrap编译默认是忽略这个标志的，可以应用下面的sed命令来确保编译的可靠性</p><blockquote><p><code>$ sed -i &#39;s/^XCFLAGS =$/&amp; -fomit-frame-pointer/&#39; gcc/Makefile.in</code></p></blockquote></li><li><p><code>fixincludes脚本</code>偶尔会因为修改系统的头文件而出错</p></li><li><p>因为GCC-4.1.2/4.0.3和Glibc-2.5.1/2.3.6是不需要修改的，运行下面的命令可以避免<code>fixincludes脚本</code>运行:</p><blockquote><p><code>$ sed -i &#39;s@\./fixinc\.sh@-c true@&#39; gcc/Makefile.in</code></p></blockquote></li><li><p>GCC中提供了一个<code>gccbug脚本</code>，会在编译时侦测<code>mktemp</code>是否存在，并且在测试中加强代码</p></li><li><p>这将会导致脚本使用一些不算很随机的名字来命名临时文件</p></li><li><p>因为我们后面会安装mktemp ，这里就将人为的去模仿它的存在:</p><blockquote><p><code>$ sed -i &#39;s/@have_mktemp_command@/yes/&#39; gcc/gccbug.in</code></p></blockquote></li></ul><blockquote><p><code>$ mkdir -v ../gcc-build</code><br><code>$ cd ../gcc-build</code></p></blockquote><ul><li><p>编译配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">..</span>/(gcc-4.1.2/4.0.3)/configure <span class="attribute">--prefix</span>=/usr 	\ </span><br><span class="line"><span class="attribute">--libexecdir</span>=/usr/lib 				\</span><br><span class="line">--enable-shared 				\ </span><br><span class="line"><span class="attribute">--enable-threads</span>=posix 				\</span><br><span class="line">--enable-__cxa_atexit 				\ </span><br><span class="line"><span class="attribute">--enable-clocale</span>=gnu 				\</span><br><span class="line"><span class="attribute">--enable-languages</span>=c,c++</span><br></pre></td></tr></table></figure></li><li><p>参数作用与目标主机内的作用相同，这里不做过多阐述</p></li></ul><blockquote><p><code>$ make</code></p></blockquote><ul><li>预编译测试:<blockquote><p><code>$ make -k check</code></p></blockquote></li></ul><blockquote><p><code>$ make install</code></p></blockquote><ul><li><p>有的软件包希望C PreProcessor(预处理器)安装在<code>/lib</code>目录下，为了满足它们的要求</p></li><li><p>需要创建如下符号链接:</p><blockquote><p><code>$ ln -sv ../usr/bin/cpp /lib</code></p></blockquote></li><li><p>许多软件包使用cc作为C编译器的名字，为了满足它们的要求</p></li><li><p>需要创建如下符号链接:</p><blockquote><p><code>$ ln -sv gcc /usr/bin/cc</code></p></blockquote></li><li><p>清理工作</p><blockquote><p><code>$ cd ..</code><br><code>$ rm -rf gcc-build</code><br><code>$ rm -rf gcc-4.1.2</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU-LFS-3-1</title>
    <url>/2020/03/01/GNU-LFS-3-1/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 00:16:31 GMT+0800 (中国标准时间) --><h3 id="GNU-LFS-3-1"><a href="#GNU-LFS-3-1" class="headerlink" title="GNU-LFS-3-1"></a>GNU-LFS-3-1</h3><ul><li>此下任何关于LFS的讨论都是基于LFS-v6.2/6.3的LiveCD与手册之上的</li><li>程序内所拥有的文件与库这里不做阐述，可参考LFS-v6.2/6.3手册内容</li></ul><hr><p><strong>目标主机-1</strong></p><ul><li>内核头文件安装</li><li>Glibc安装</li><li>目标主机工具链解析</li><li>LFS-v6.2/v6.3</li><li>LFS-v6.3-LiveCD</li></ul><h3 id="内核头文件"><a href="#内核头文件" class="headerlink" title="内核头文件"></a>内核头文件</h3><p><strong>LFS-v6.3</strong></p><ul><li>[Linux-2.6.22.5]安装流程<blockquote><p><code>$ tar xvf $LFS/linux-2.6.22.5.tar.bz2</code><br><code>$ cd linux-2.6.22.5</code><br><code>$ sed -i &#39;/scsi/d&#39; include/Kbuild</code><br><code>$ make mrproper</code><br><code>$ make headers_check</code><br><code>$ make INSTALL_HDR_PATH=dest headers_install</code><br><code>$ cp -rv dest/include/* /usr/include</code><br><code>$ cd ..</code><br><code>$ rm -rf linux-2.6.22.5</code></p></blockquote></li></ul><hr><p><strong>Linux-Libc-Headers-2.6.12.0</strong></p><ul><li><p>添加一个用户空间头文件和新内核对于<code>inotify</code>特性的系统调用支持:</p><blockquote><p><code>$ patch -Np1 -i ../linux-libc-headers-2.6.12.0-inotify-3.patch</code></p></blockquote></li><li><p>安装内核头文件:</p><blockquote><p><code>$ install -dv /usr/include/asm</code><br><code>$ cp -Rv include/asm-i386/* /usr/include/asm</code><br><code>$ cp -Rv include/linux /usr/include</code></p></blockquote></li><li><p>确保这些头文件的所有者是root:</p><blockquote><p><code>$ chown -Rv root:root /usr/include/{asm,linux}</code></p></blockquote></li><li><p>确保用户可以读取这些头文件:</p><blockquote><p><code>$ find /usr/include/{asm,linux} -type d -exec chmod -v 755 {} \;</code><br><code>$ find /usr/include/{asm,linux} -type f -exec chmod -v 644 {} \;</code></p></blockquote></li><li><p>此时安装的头文件为<code>/usr/include/{asm,linux}/*.h</code></p></li><li><p>头文件内容可参考LFS-v6.2的6.7.2章节，这里不做过多阐述</p></li></ul><hr><p><strong>Man-pages-2.63/Man-pages-2.34</strong></p><ul><li>直接进行编译安装:<blockquote><p><code>$ tar xvf $LFS/man-pages-2.63.tar.bz2</code><br><code>$ cd man-pages-2.63</code><br><code>$ make install</code><br><code>$ cd ..</code><br><code>$ rm -rf man-pages-2.63</code></p></blockquote></li></ul><hr><h3 id="Glibc"><a href="#Glibc" class="headerlink" title="Glibc"></a>Glibc</h3><p><strong>Glibc-2.5.1/2.3.6</strong></p><ul><li><p>在进行之前请检查一下是否glibc-2.5.1和glibc-build这两个目录已经被删除，如果没有删除请删除后在继续</p></li><li><p>将glibc-libidn包解压到Glibc的源码目录:</p><blockquote><p><code>$ tar xvf $LFS/glibc-2.5.1.tar.bz2</code><br><code>$ cd glibc-2.5.1</code><br><code>$ tar -xvf $LFS/glibc-libidn-2.5.1.tar.gz</code><br><code>$ mv glibc-libidn-2.5.1 libidn</code></p></blockquote></li><li><p>应用下面这个patch来修正软件包在<code>sys/kd.h</code>之后包含<code>linux/types.h</code>导致编译错误:</p><blockquote><p><code>$ patch -Np1 -i ../glibc-2.3.6-linux_types-1.patch</code></p></blockquote></li><li><p>添加一个头文件来定义为新内核对于inotify特性的系统调用函数:</p><blockquote><p><code>$ patch -Np1 -i ../glibc-2.3.6-inotify-1.patch</code></p></blockquote></li><li><p>抑制locale的安装，以避免出现bash的bug</p><blockquote><p><code>$ sed -i &#39;/vi_VN.TCVN/d&#39; localedata/SUPPORTED</code></p></blockquote></li><li><p>当运行make install时，一个叫<code>test-installation.pl</code>的脚本会在我们新安装的Glibc上做一个小的完整性测试</p></li><li><p>然而，由于我们的<code>toolchain</code>仍然指向<code>/tools</code>目录，完整性测试会导致使用错误的Glibc</p></li><li><p>所以必须强制脚本测试刚安装的脚本</p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">$ sed -i \ </span><br><span class="line">'s|<span class="type">libs</span> -o|<span class="type">libs</span> -L/usr/lib -Wl,-dynamic-linker=/lib/ld-linux.so<span class="number">.2</span> -o|<span class="type">' \   </span></span><br><span class="line"><span class="type">scripts</span>/test-installation.pl</span><br></pre></td></tr></table></figure></li><li><p>继续运行指令:</p><blockquote><p><code>$ sed -i &#39;s|@BASH@|/bin/bash|&#39; elf/ldd.bash.in</code><br><code>$ mkdir -v</code><br><code>$ ../glibc-build</code><br><code>$ cd ../glibc-build</code></p></blockquote></li><li><p>配置安装脚本:</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">$ ../glibc-2.5.1/configure </span><br><span class="line">-<span class="ruby">-prefix=<span class="regexp">/usr \ </span></span></span><br><span class="line"><span class="ruby">--disable-profile \</span></span><br><span class="line"><span class="ruby">--enable-add-ons \ </span></span><br><span class="line"><span class="ruby">--enable-kernel=<span class="number">2.6</span>.<span class="number">0</span> \</span></span><br><span class="line"><span class="ruby">--libexecdir=<span class="regexp">/usr/lib</span><span class="regexp">/glibc</span></span></span><br></pre></td></tr></table></figure></li><li><p>新参数说明:</p></li><li><p>参数<code>--libexecdir=/usr/lib/glibc</code></p><blockquote><p>把<code>pt_chown</code>程序的位置从默认的<code>/usr/libexec</code>改为<code>/usr/lib/glibc</code></p></blockquote></li></ul><blockquote><p><code>$ make</code></p></blockquote><ul><li><p>对结果进行测试:</p><blockquote><p><code>$ make -k check 2&gt;&amp;1 | tee glibc-check-log</code><br><code>$ grep Error glibc-check-log</code></p></blockquote></li><li><p>在安装Glibc的过程中，它会警告缺少<code>/etc/ld.so.conf</code>文件</p></li><li><p>其实这没什么关系，不过下面的命令能修正它:</p><blockquote><p><code>$ touch /etc/ld.so.conf</code></p></blockquote></li></ul><blockquote><p><code>$ make install</code></p></blockquote><ul><li><p>(LFS-v6.2独有)此部还需要安装<code>inotify头文件</code>到系统头文件的地方:</p><blockquote><p><code>$ cp -v ../glibc-2.3.6/sysdeps/unix/sysv/linux/inotify.h \ /usr/include/sys</code></p></blockquote></li><li><p>一次安装所有列在<code>glibc-2.3.6/localedata/SUPPORTED</code>中的<code>locales</code></p><blockquote><p><code>$ make localedata/install-locales</code></p></blockquote></li></ul><hr><p><strong>配置Glibc</strong></p><ul><li><p>此时需要建立<code>/etc/nsswitch.conf</code>文件</p></li><li><p>因为在这个文件丢失或不正确的情况下，Glibc会使用默认配置，而Glibc的默认配置无法很好地在网络环境下工作</p></li><li><p>并且我们也需要设置自己的时区</p></li><li><p>建立一个新的<code>/etc/nsswitch.conf</code>文件:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> &gt; /etc/nsswitch.<span class="keyword">conf</span> &lt;&lt; <span class="string">"EOF"</span> </span><br><span class="line"># Begin /etc/nsswitch.<span class="keyword">conf</span> </span><br><span class="line">passwd: <span class="keyword">files</span> </span><br><span class="line">group: <span class="keyword">files</span> </span><br><span class="line">shado<span class="variable">w:</span> <span class="keyword">files</span></span><br><span class="line">host<span class="variable">s:</span> <span class="keyword">files</span> dns </span><br><span class="line">network<span class="variable">s:</span> <span class="keyword">files</span> </span><br><span class="line">protocol<span class="variable">s:</span> <span class="keyword">files</span> </span><br><span class="line">service<span class="variable">s:</span> <span class="keyword">files</span> </span><br><span class="line">ether<span class="variable">s:</span> <span class="keyword">files</span> </span><br><span class="line">rpc: <span class="keyword">files</span> </span><br><span class="line"># End /etc/nsswitch.<span class="keyword">conf</span> </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>设置时区:</p><blockquote><p><code>$ cp -v --remove-destination /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p></blockquote></li><li><p>配置动态链接库加载程序</p></li><li><p>写入配置</p></li><li><p>LFS-v6.3</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &gt; &#x2F;etc&#x2F;ld.so.conf &lt;&lt; &quot;EOF&quot; </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib </span><br><span class="line">&#x2F;opt&#x2F;lib </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>LFS-v6.2</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> &gt; /etc/ld.<span class="keyword">so</span>.<span class="keyword">conf</span> &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"># Begin /etc/ld.<span class="keyword">so</span>.<span class="keyword">conf</span></span><br><span class="line">/usr/<span class="keyword">local</span>/lib </span><br><span class="line">/opt/lib</span><br><span class="line"># End /etc/ld.<span class="keyword">so</span>.<span class="keyword">conf</span> </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>$ cd ..</code><br><code>$ rm -rf glibc-build</code><br><code>$ rm -rf glibc-2.5.1</code></p></blockquote><ul><li>glibc的测试比较容易出现错误，比如机器慢就有可能出现超时的错误，还有一些能引起错误的LFS手册上有所提及</li><li>由此某些情况的错误可以无视</li></ul><hr><h3 id="调整目标主机工具链"><a href="#调整目标主机工具链" class="headerlink" title="调整目标主机工具链"></a>调整目标主机工具链</h3><ul><li><p>现在，最终的C库已经安装好了，此时需要再次调整工具链，让本章随后编译的那些工具都连接到这个库上</p></li><li><p>基本上，就是把临系统时增加中调整工具链那里做的调整给取消掉</p></li><li><p>在临时系统中，工具链使用的库是从宿主系统的<code>/{,usr/}lib</code>转向新安装的<code>/tools/lib</code>目录</p></li><li><p>同样的，现在工具链使用的库将从临时的<code>/tools/lib</code>转向LFS系统最终的<code>/{,usr/}lib</code>目录</p></li><li><p>首先，备份<code>/tools</code>下的链接</p><blockquote><p>用刚才在临时主机中编译的链接器来替换<br>再创建一个链接到在<code>/tools/$(gcc -dumpmachine)/bin</code>中的副本</p></blockquote></li><li><p>执行以下命令:</p><blockquote><p><code>$ mv -v /tools/bin/{ld,ld-old}</code><br><code>$ mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}</code><br><code>$ mv -v /tools/bin/{ld-new,ld}</code><br><code>$ ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld</code></p></blockquote></li><li><p>接下来，修正GCC的specs文件，使它指向新的动态链接器</p></li><li><p>这样GCC才能知道在哪能发 现开始文件</p></li><li><p>这里应用一个sed命令:</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ gcc -dumpspecs | sed <span class="string">\</span> </span><br><span class="line">-e <span class="string">'s@/tools/lib/ld-linux.so.2@/lib/ld-linux.so.2@g'</span> <span class="string">\</span> </span><br><span class="line">-e <span class="string">'/\*startfile_prefix_spec:/&#123;n;s@.*@/usr/lib/ @&#125;'</span> <span class="string">\</span> </span><br><span class="line">-e <span class="string">'/\*cpp:/&#123;n;s@$@ -isystem /usr/include@&#125;'</span> &gt; <span class="string">\</span> </span><br><span class="line">`dirname $(gcc --<span class="built_in">print</span>-libgcc-file-name)`/specs</span><br></pre></td></tr></table></figure></li><li><p>还可以利用perl命令</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ gcc -dumpspecs | \ </span><br><span class="line">perl -p -e	's<span class="comment">@/tools/lib/ld-linux.so.2@</span>/<span class="keyword">lib</span>/ld-linux.so<span class="number">.2</span><span class="comment">@g;' \</span></span><br><span class="line"><span class="comment">-e 's@</span>\*startfile_prefix_spec:\n<span class="comment">@$_/usr/lib/ @</span>g;' &gt; \</span><br><span class="line">`dirname	$(gcc --<span class="keyword">print</span>-libgcc-file-name)`/specs</span><br></pre></td></tr></table></figure></li><li><p>如果此时本地主机的系统平台上的动态连接器的名字不是<code>ld-linux.so.2</code></p></li><li><p>必须把上面命令里的<code>ldlinux.so.2</code>换成此时本地主机的系统平台上动态连接器的名字</p></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU-LFS-2-4</title>
    <url>/2020/02/29/GNU-LFS-2-4/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 19:28:06 GMT+0800 (中国标准时间) --><h2 id="GNU-LFS-2-4"><a href="#GNU-LFS-2-4" class="headerlink" title="GNU LFS-2-4"></a>GNU LFS-2-4</h2><ul><li>[GNU 工具链]全面逻辑梳理</li><li>重点在于配置链接器与工具链的逻辑</li></ul><hr><h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h3><ul><li>可以将临时主机的工具链搭建分为两部分</li><li>前半部分为第一遍编译并安装GCC，Binutils和内核头文件</li><li>后半部分为编译并安装Glibc，在配置完Glibc之后，正式调整临时工具链并再次安装GCC与Binutils</li><li>第一步与第二部和第五步与第六步的顺序没有严格规定</li><li>但对GCC与Binutils的第二次编译安装必须在先配置并且编译安装完Glibc之后再进行</li></ul><hr><ul><li><code>Binutils-&gt;GCC-&gt;Headres-&gt;GLibc-&gt;Tools调整-&gt;Binutils-&gt;GCC/C++补丁</code></li><li>参考至<code>LFSv6.2/6.3</code></li></ul><hr><ul><li>因为这里所使用的LiveCD是LFS官方提供的</li><li>由于官方于6.3版本之后就停止维护了</li><li>所以这里只介绍6.3及以下版本</li></ul><hr><ul><li>这里将以下七个工具所需要的</li><li>每个工具编译的重要步骤</li><li>与对工具链的链接和链接器的配置进行了逻辑的梳理</li></ul><hr><h3 id="1-Binutils-Pass-1"><a href="#1-Binutils-Pass-1" class="headerlink" title="1. Binutils Pass-1"></a>1. Binutils Pass-1</h3><ul><li>编译并安装过后</li><li>为调整工具链而准备链接器</li></ul><blockquote><p><code>$ make -C ld clean</code><br><code>$ make -C ld LIB_PATH=/tools/lib</code><br><code>$ cp -v ld/ld-new /tools/bin</code></p></blockquote><ul><li>参数<code>-C ld LIB_PATH=/tools/lib</code></li><li>指定<code>Makefile</code>的<code>LIB_PATH</code>变量值</li><li>使其明确指向临时工具目录，以覆盖默认值</li><li>这个变量同时还指定了链接器的默认库搜索路径</li><li>在编译完Glibc后就会用到</li></ul><hr><h3 id="2-GCC-Pass-1"><a href="#2-GCC-Pass-1" class="headerlink" title="2. GCC Pass-1"></a>2. GCC Pass-1</h3><ul><li>编译并安装过后</li><li>创建gcc的符号链接为cc，以保证兼容性<blockquote><p><code>$ ln -vs gcc /tools/bin/cc</code></p></blockquote></li></ul><hr><h3 id="3-kernel-headers-API"><a href="#3-kernel-headers-API" class="headerlink" title="3. kernel headers API"></a>3. kernel headers API</h3><ul><li>将头文件编译并复制到所需目录</li></ul><hr><h3 id="4-Glibc"><a href="#4-Glibc" class="headerlink" title="4. Glibc"></a>4. Glibc</h3><ul><li>编译并安装C标准库</li><li>执行<code>touch /tools/etc/ld.so.conf</code></li><li>以修补安装过程中缺少的<code>/tools/etc/ld.so.conf</code></li></ul><hr><h3 id="5-调整工具链-LFS-v6-2-v6-3"><a href="#5-调整工具链-LFS-v6-2-v6-3" class="headerlink" title="5. 调整工具链(LFS-v6.2/v6.3)"></a>5. 调整工具链(LFS-v6.2/v6.3)</h3><ul><li><p>在临时系统的C标准库安装好之后</p></li><li><p>需要将临时工具链中的所有工具都连接到C标准库之上</p></li><li><p>为了达到这个目标，必须调整链接器和编译器的space文件</p></li><li><p>因为Binutils Pass-1的时候以经调整过链接器了</p></li><li><p>所以现在需要做的只是将其重新命名并被正确的找到和使用</p></li><li><p>方法是备份原来的链接器，然后再用调整过的链接器来替代</p></li><li><p>最后再创建一个指向<code>/tools/$(gcc -dumpmachine)/bin</code>中链接器副本的链接</p></li></ul><blockquote><p><code>$ mv -v /tools/bin/{ld,ld-old}</code><br><code>$ mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}</code><br><code>$ mv -v /tools/bin/{ld-new,ld}</code><br><code>$ ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld</code></p></blockquote><ul><li>从现在开始，所有程序都将连接到<code>/tools/lib</code>中的库文件</li></ul><hr><ul><li><p>接下来需要做的就是修正GCC中的spaces文件</p></li><li><p>目的是使他指向一个新的动态链接器</p></li><li><p>本质上就是把specs中所有的<code>/lib/ld-linux.so.2</code>都替换成<code>/tools/lib/ld-linux.so.2</code></p></li><li><p>这里用的是sed命令，有两种语法(分别是LFS-v6.2与LFS-v6.3)</p></li><li><p>如果当前的本地主机上的动态连接器的名字不是<code>ld-linux.so.2</code></p></li><li><p>必须人为的把以下命令里的<code>ldlinux.so.2</code>换成本地主机的系统平台上动态连接器的名</p></li><li><p>LFS-v6.2</p></li></ul><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> SPECFILE=`dirname <span class="symbol">$</span>(gcc -print-libgcc-<span class="keyword">file</span>-name)`/specs &amp;&amp; </span><br><span class="line">gcc -dumpspecs &gt; <span class="symbol">$</span>SPECFILE &amp;&amp;</span><br><span class="line">sed <span class="string">'s@^/lib/ld-linux.so.2@/tools&amp;@g'</span>	<span class="symbol">$</span>SPECFILE &gt; tempspecfile &amp;&amp;</span><br><span class="line">mv -vf tempspecfile	 <span class="symbol">$</span>SPECFILE &amp;&amp; </span><br><span class="line">unset SPECFIL</span><br></pre></td></tr></table></figure><ul><li>LFS-v6.3</li></ul><blockquote><p><code>$ gcc -dumpspecs | sed &#39;s@^/lib/ld-linux.so.2@/tools&amp;@g&#39; &gt;</code>dirname $(gcc -print-libgcc-file-name)<code>/ specs</code></p></blockquote><hr><ul><li><p>最后删除GCC专属头文件目录中的头文件，以避免宿主机中的头文件污染编译环境</p></li><li><p>这里的命令v6.2与v6.3没有区别</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GCC_INCLUDEDIR=`dirname $(gcc -<span class="built_in">print</span>-libgcc-file-name)`/include &amp;&amp;</span><br><span class="line">find <span class="variable">$&#123;GCC_INCLUDEDIR&#125;</span>/* -maxdepth 0 -xtype d -<span class="built_in">exec</span> rm -rvf <span class="string">'&#123;&#125;'</span> \; &amp;&amp;</span><br><span class="line">rm -vf `grep -l <span class="string">"DO NOT EDIT THIS FILE"</span> <span class="variable">$&#123;GCC_INCLUDEDIR&#125;</span>/*` &amp;&amp;</span><br><span class="line"><span class="built_in">unset</span> GCC_INCLUDEDIR</span><br></pre></td></tr></table></figure></li><li><p>工具链的调整方法有好几种</p></li><li><p>而且不同版本GCC的specs可能会有不同</p></li><li><p>但实际上都是把specs文件中的<code>/lib/ld-linux.so.2</code>替换成<code>/tools/lib/ld-linux.so.2</code></p></li><li><p>还直接用<code>gcc -dumpspecs</code>导出后手工直接编辑specs文件</p></li></ul><hr><h3 id="6-Binutils-Pass-2"><a href="#6-Binutils-Pass-2" class="headerlink" title="6. Binutils Pass-2"></a>6. Binutils Pass-2</h3><ul><li><p>编译并安装</p></li><li><p>编译配置中配置参数<code>--with-lib-path=/tools/lib</code></p></li><li><p>以指示configure脚本在Binutils编译过程中将传递给连接器的库搜索路径设为<code>/tools/lib</code></p></li><li><p>以防止连接器搜索宿主系统的库目录</p></li><li><p>最后为目标主机的调整工具链阶段配置链接器:</p><blockquote><p><code>$ make -C ld clean</code><br><code>$ make -C ld LIB_PATH=/usr/lib:/lib</code><br><code>$ cp -v ld/ld-new /tools/bin</code></p></blockquote></li></ul><hr><h3 id="7-GCC-C-补丁-Pass-2"><a href="#7-GCC-C-补丁-Pass-2" class="headerlink" title="7. GCC/C++补丁 Pass-2"></a>7. GCC/C++补丁 Pass-2</h3><ul><li><p>在GCC编译过程中会运行<code>fixincludes脚本</code>来扫描系统头文件目录</p></li><li><p>并找出需要修正的头文件，然后把修正后的头文件放到GCC专属头文件目录里</p></li><li><p>因为现在GCC和Glibc已经安装完毕，而且它们的头文件已知无需修正</p></li><li><p>所以这里并不需要<code>fixincludes脚本</code></p></li><li><p>必须先禁止fixincludes运行，以保证编译环境不受原主机所污染</p><blockquote><p><code>$ cp -v gcc/Makefile.in{,.orig} &amp;&amp;</code><br><code>$ sed &#39;s@\./fixinc\.sh@-c true@&#39; gcc/Makefile.in.orig &gt; gcc/Makefile.in</code></p></blockquote></li><li><p>因为在前几步中编译的GCC Pass-1中进行的<code>bootstrap</code>编译使用了<code>-fomit-frame-pointer</code>选项</p></li><li><p>而非<code>bootstrap</code>编译则默认忽略了该选项</p></li><li><p>所以需要使用下面的sed命令来确保在非<code>bootstrap</code>编译时也同样使用<code>-fomit-frame-pointer</code>选项</p></li><li><p>用以保持一致性:</p></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ cp -v gcc/<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span><span class="keyword">in</span>&#123;,.tmp&#125; &amp;&amp;</span><br><span class="line">sed 's/^XCFLAGS =$/&amp; -fomit-frame-pointer/' gcc/<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span><span class="keyword">in</span>.tmp \</span><br><span class="line">	&gt; gcc/<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span><span class="keyword">in</span></span><br></pre></td></tr></table></figure><ul><li><p>然后使用补丁修改补丁修改GCC的缺省动态连接器(通常是<code>ld-linux.so.2</code>)的位置:</p><blockquote><p><code>$ patch -Np1 -i /lfs-sources/gcc-4.1.2-specs-1.patch</code></p></blockquote></li><li><p>该命令同时还把/usr/include`从GCC的头文件搜索路径里删掉</p></li><li><p>现在预先打补丁而不是在安装GCC之后调整specs文件可以保证新的动态连接器在编译GCC的时候就用上</p></li><li><p>也就是说，随后的所有临时程序都会连接到新的Glibc上</p></li><li><p>然后配置编译器，并进行编译与编译安装</p></li><li><p>关于GCC的C++是在LFS-v9.0中出现的，这里先不做过多阐述</p></li></ul><hr><ul><li>至此结束临时主机的[GNU 工具链]配置环节</li><li>下一步即为配置其它的辅助命令与工具链所处的大环境</li><li>从而为目标主机提供应有的功能与服务</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU-LFS-2-3</title>
    <url>/2020/02/29/GNU-LFS-2-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 19:28:06 GMT+0800 (中国标准时间) --><h3 id="GNU-LFS-2-3"><a href="#GNU-LFS-2-3" class="headerlink" title="GNU LFS-2.3"></a>GNU LFS-2.3</h3><ul><li>GCC Pass-2</li><li>Bintils Pass-2</li></ul><hr><h3 id="Bintils-Pass-2"><a href="#Bintils-Pass-2" class="headerlink" title="Bintils Pass-2"></a>Bintils Pass-2</h3><ul><li>Binutils-2.16.1/LFS-6.2 Pass-2 154 MB 1.1 SBU</li><li>Binutils-2.17/LFS-6.3 Pass 2</li><li>Binutils-2.32/LFS-9.0 Pass-2 879 MB 1.1 SUB</li></ul><hr><p><strong>Binutils-2.16.1/2.17</strong></p><ul><li>解压文件并进入编译目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar xvf /lfs-sources/binutils-2.17.tar.bz2 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -v binutils-build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> binutils-build</span></span><br></pre></td></tr></table></figure></li></ul><p>编译配置</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="string">../binutils-2.17</span><span class="params">(-2.16.1)</span><span class="string">/configure</span> <span class="params">--prefix=/tools</span> 	\</span><br><span class="line">			<span class="params">--disable-nls</span> 		\ </span><br><span class="line">			<span class="params">--with-lib-path=/tools/lib</span></span><br></pre></td></tr></table></figure><ul><li><p>新参数含义:</p></li><li><p>参数<code>--with-lib-path=/tools/lib</code></p><blockquote><p>这个选项指示configure脚本在Binutils编译过程中将传递给连接器的库搜索路径设为<code>/tools/lib</code><br>以防止连接器搜索宿主系统的库目录</p></blockquote></li><li><p>编译及安装</p><blockquote><p><code>$ make</code><br><code>$ make install</code></p></blockquote></li><li><p>为目标机器的工具链调整配置连接器</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>make -C ld clean </span><br><span class="line"><span class="variable">$ </span>make -C ld LIB_PATH=<span class="regexp">/usr/lib</span><span class="symbol">:/lib</span> </span><br><span class="line"><span class="variable">$ </span>cp -v ld/ld-new	/tools/bin</span><br></pre></td></tr></table></figure></li><li><p>最后清理一下</p><blockquote><p><code>$ cd .. rm -rf binutils-build</code><br><code>$ rm -rf binutils-2.17</code></p></blockquote></li></ul><hr><p><strong>Binutils-2.32</strong></p><ul><li>编译配置<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="attribute">CC</span>=<span class="variable">$LFS_TGT</span>-gcc                \ </span><br><span class="line"><span class="attribute">AR</span>=<span class="variable">$LFS_TGT</span>-ar                	 \ </span><br><span class="line"><span class="attribute">RANLIB</span>=<span class="variable">$LFS_TGT</span>-ranlib        	 \ </span><br><span class="line"><span class="built_in">..</span>/configure                	 \    </span><br><span class="line"><span class="attribute">--prefix</span>=/tools         	 \    </span><br><span class="line">--disable-nls            	 \    </span><br><span class="line">--disable-werror       		 \   </span><br><span class="line"><span class="attribute">--with-lib-path</span>=/tools/lib 	 \  </span><br><span class="line"> --with-sysroot</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数含义:</strong></p><ul><li><p>参数<code>CC=$LFS_TGT-gcc</code>,<code>AR=$LFS_TGT-ar</code>,<code>RANLIB=$LFS_TGT-ranlib</code></p><blockquote><p>因为这是真正的原生编译Binutils，设置这些变量能确保编译系统使用交叉编译器和相关的工具，而不是 宿主系统中已有的</p></blockquote></li><li><p>参数<code>--with-lib-path=/tools/lib</code></p><blockquote><p>这告诉配置脚本在编译Binutils的时候指定库搜索目录，此处将<code>/tools/lib</code>传递到链接器</p></blockquote></li><li><p>参数<code>--with-sysroot sysroot</code></p><blockquote><p>功能使链接器可以找到包括在其命令行中的其它共享对象明确需要的共享对象<br>否则的话，在某些主机上一些软件包可能会编译不成功</p></blockquote></li><li><p>之后进行编译安装</p></li><li><p>为目标机器中的工具链阶段准备链接器</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>make -C ld clean </span><br><span class="line"><span class="variable">$ </span>make -C ld LIB_PATH=<span class="regexp">/usr/lib</span><span class="symbol">:/lib</span> </span><br><span class="line"><span class="variable">$ </span>cp -v ld/ld-new /tools/bin</span><br></pre></td></tr></table></figure></li></ul><p><strong>make 参数说明</strong></p><ul><li>参数<code>-C ld clean</code><blockquote><p>用于告诉make程序移除所有ld子目录中编译过的文件</p></blockquote></li><li>参数<code>-C ld LIB_PATH=/usr/lib:/lib</code><blockquote><p>这个选项重新编译ld子目录中的所有文件<br>在命令行中指定<code>Makefile</code>的<code>LIB_PATH</code>变量可以使我们能 够重写临时工具的默认值并指向正确的最终路径<br>该变量的值指定链接器的默认库搜索路径<br>目标主机中会用到这个准备</p></blockquote></li></ul><hr><h3 id="GCC-Pass-2"><a href="#GCC-Pass-2" class="headerlink" title="GCC Pass-2"></a>GCC Pass-2</h3><ul><li>GCC 9.2.0 LFS-9.0 3.7 GB/15 SBU</li><li>GCC 4.1.2 LFS-6.3</li><li>GCC 4.0.3 LFS-6.2 443 MB/4.2 SBU</li></ul><hr><p><strong>GCC 4.1.2/4.0.3 Pass-2</strong></p><blockquote><p><code>$ tar xvf /lfs-sources/gcc-4.1.2.tar.bz2</code><br><code>$ cd gcc-4.1.2</code></p></blockquote><ul><li>禁止fixincludes脚本运行，以保证编译环境不被污染<blockquote><p><code>$ cp -v gcc/Makefile.in{,.orig}</code><br><code>$ sed &#39;s@\./fixinc\.sh@-c true@&#39; gcc/Makefile.in.orig &gt; gcc/Makefile.in</code></p></blockquote></li><li>因为在之前的<code>GCC Pass-1</code>中进行的<code>bootstrap</code>编译使用了<code>-fomit-frame-pointer</code>选项，而非bootstrap`编译则默认忽略了该选项</li><li>所以需要使用下面的sed命令来确保在非<code>bootstrap</code>编译时也同样使用<code>-fomit-frame-pointer</code>选项，以保持一致性<blockquote><p><code>$ cp -v gcc/Makefile.in{,.tmp}</code><br><code>$ sed &#39;s/^XCFLAGS =$/&amp; -fomit-frame-pointer/&#39; gcc/Makefile.in.tmp gcc \</code><br><code>&gt; Makefile.in</code></p></blockquote></li><li>使用下面的补丁来修改GCC的缺省动态连接器(通常是<code>ld-linux.so.2</code>)的位置，同时把<code>/usr/include</code>从GCC的头文件搜索路径里删掉:<blockquote><p><code>$ patch -Np1 -i /lfs-sources/gcc-4.1.2-specs-1.patch</code></p></blockquote></li><li>预先打补丁而不是在安装GCC之后调整specs文件的作用是:<blockquote><p>可以保证新的动态连接器在编译GCC的时候就用上<br>也就是说，随后的所有临时程序都会连接到新的Glibc上</p></blockquote></li><li>此补丁非常重要，必须进行使用才能成功编译</li></ul><ul><li>GCC Pass-2 编译配置:<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ mkdir -v <span class="built_in">..</span>/gcc-build</span><br><span class="line">$ cd <span class="built_in">..</span>/gcc-build </span><br><span class="line">$ <span class="built_in">..</span>/gcc-4.1.2/configure <span class="attribute">--prefix</span>=/tools 	\ </span><br><span class="line"><span class="attribute">--with-local-prefix</span>=/tools 			\ </span><br><span class="line"><span class="attribute">--enable-clocale</span>=gnu 				\</span><br><span class="line">--enable-shared 				\ </span><br><span class="line"><span class="attribute">--enable-threads</span>=posix 				\</span><br><span class="line">--enable-__cxa_atexit 				\ </span><br><span class="line"><span class="attribute">--enable-languages</span>=c,c++ 			\</span><br><span class="line">--disable-libstdcxx-pch</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数解析:</strong><br><code>--prefix=/tools</code><br><code>--with-local-prefix=/tools</code></p><ul><li>参数<code>--enable-clocale=gnu</code><blockquote><p>用于确保确保C++库在任何情况下都使用正确的locale模块</p></blockquote></li><li>参数<code>--enable-threads=posix</code><blockquote><p>用于使C++异常能处理多线程代码</p></blockquote></li><li>参数<code>--enable-__cxa_atexit</code><blockquote><p>用<code>__cxa_atexit</code>代替<code>atexit</code>来登记C++对象的本地静态和全局析构函数<br>这是为了完全符合标准对析构函数的处理规定</p></blockquote></li><li>参数<code>--enable-languages=c,c++</code><blockquote><p>用于编译C和C++语言的编译器</p></blockquote></li><li>参数<code>--disable-libstdcxx-pch</code><blockquote><p>不为<code>libstdc++</code>编译预编译头(PCH)，它占用了很大空间，并且在此版本中用不到它</p></blockquote></li></ul><hr><p><strong>编译安装并清理:</strong></p><blockquote><p><code>$ make</code><br><code>$ make install</code><br><code>$ cd ..</code><br><code>$ rm -rf gcc-build</code><br><code>$ rm -rf gcc-4.1.2</code></p></blockquote><hr><p><strong>GCC 9.2.0 Pass-2</strong></p><ul><li><p>因为在第一次编译GCC的时候安装了一些内部系统头文件</p></li><li><p>其中的一个<code>limits.h</code>会反过来包括对应的系统头文件<code>limits.h</code>，在本次的实例中，是<code>/tools/include/limits.h</code></p></li><li><p>但是，第一次编译gcc的时候<code>/tools/include/limits.h</code>并不存在</p></li><li><p>因此GCC安装的内部头文件只是部分的自包含文件，并不包括系 统头文件的扩展功能</p></li><li><p>这足以编译临时libc，但是这次编译GCC要求完整的内部头文件</p></li><li><p>使用和正常情况下GCC编译系统使用的相同的命令创建一个完整版本的内部头文件:</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ cat gcc/limitx.h gcc/glimits.h gcc/limity.h &gt; \  </span><br><span class="line">`dirname <span class="constructor">$($LFS_TGT-<span class="params">gcc</span> -<span class="params">print</span>-<span class="params">libgcc</span>-<span class="params">file</span>-<span class="params">name</span>)</span>`/<span class="keyword">include</span>-fixed/limits.h</span><br></pre></td></tr></table></figure></li><li><p>再一次更改 GCC 的默认动态链接器的位置，使用安装在<code>/tools</code>的那个</p></li><li><p>执行以下配置:</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ for file in gcc/config/&#123;linux,i386/linux&#123;,64&#125;&#125;<span class="string">.h</span> </span><br><span class="line">do  </span><br><span class="line">cp -uv $file&#123;,<span class="string">.orig</span>&#125;  </span><br><span class="line">sed -e 's@<span class="string">/lib</span>\<span class="params">(64\)</span>\?\<span class="params">(32\)</span>\?<span class="string">/ld</span>@<span class="string">/tools</span>&amp;@g' \</span><br><span class="line">       -e 's@<span class="string">/usr</span>@<span class="string">/tools</span>@g' $file.orig &gt; $file  </span><br><span class="line"><span class="keyword">echo</span> ' </span><br><span class="line"><span class="comment">#undef STANDARD_STARTFILE_PREFIX_1 </span></span><br><span class="line"><span class="comment">#undef STANDARD_STARTFILE_PREFIX_2 </span></span><br><span class="line"><span class="comment">#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/" </span></span><br><span class="line"><span class="comment">#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file  </span></span><br><span class="line">touch $file.orig </span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>如果是在<code>x86_64</code>环境上构建，为64位库改变默认目录名至<code>lib</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> $(uname -m) <span class="keyword">in</span>  </span><br><span class="line">x86_64)    </span><br><span class="line">sed -e <span class="string">'/m64=/s/lib64/lib/'</span> \        </span><br><span class="line">-i.orig gcc/config/i386/t-linux64  </span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></li><li><p>和第一次编译GCC一样，它要求GMP,MPFR和MPC软件包</p></li><li><p>解压tar包并把它们重名为到所需的文件夹名</p></li><li><p>执行以下命令:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ tar -xf ../mpfr<span class="number">-4.0</span><span class="number">.2</span>.tar.xz </span><br><span class="line">$ mv -v mpfr<span class="number">-4.0</span><span class="number">.2</span> mpfr </span><br><span class="line">$ tar -xf ../gmp<span class="number">-6.1</span><span class="number">.2</span>.tar.xz </span><br><span class="line">$ mv -v gmp<span class="number">-6.1</span><span class="number">.2</span> gmp </span><br><span class="line">$ tar -xf ../mpc<span class="number">-1.1</span><span class="number">.0</span>.tar.gz </span><br><span class="line">$ mv -v mpc<span class="number">-1.1</span><span class="number">.0</span> mpc</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>在开始编译 GCC 之前，注意要取消所有会覆盖默认优化选项的环境变量</p></li><li><p>编译配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="attribute">CC</span>=<span class="variable">$LFS_TGT</span>-gcc                                   	\ </span><br><span class="line"><span class="attribute">CXX</span>=<span class="variable">$LFS_TGT</span>-g++                               		\ </span><br><span class="line"><span class="attribute">AR</span>=<span class="variable">$LFS_TGT</span>-ar                                 		\ </span><br><span class="line"><span class="attribute">RANLIB</span>=<span class="variable">$LFS_TGT</span>-ranlib                             	\ </span><br><span class="line"><span class="built_in">..</span>/configure                                      	\    </span><br><span class="line"><span class="attribute">--prefix</span>=/tools                                		\	    </span><br><span class="line"><span class="attribute">--with-local-prefix</span>=/tools                 		\    </span><br><span class="line"><span class="attribute">--with-native-system-header-dir</span>=/tools/include    	\    </span><br><span class="line"><span class="attribute">--enable-languages</span>=c,c++                                \    </span><br><span class="line">--disable-libstdcxx-pch                       	        \    </span><br><span class="line">--disable-multilib                             	        \    </span><br><span class="line">--disable-bootstrap                            		\    </span><br><span class="line">--disable-libgomp</span><br></pre></td></tr></table></figure></li></ul><p><strong>新参数说明:</strong></p><ul><li>参数<code>--enable-languages=c,c++</code><blockquote><p>这个选项确保编译了C 和C++编译器</p></blockquote></li><li>参数<code>--disable-libstdcxx-pch</code><blockquote><p>不为<code>libstdc++</code>编译预编译的头文件(PCH)<br>这会花费很多时间，却对我们没有用处</p></blockquote></li><li>参数<code>--disable-bootstrap</code><blockquote><p>对于原生编译的 GCC，默认是做一个[引导]构建<br>这不仅会编译GCC一次，而是会编译很多次</p></blockquote></li></ul><hr><ul><li>然后执行编译安装等操作</li><li>在编译并安装过后，可以为其设置符号链接(<code>gcc-&gt;cc</code>)<blockquote><p><code>$ ln -sv gcc /tools/bin/cc</code></p></blockquote></li><li>很多程序和脚本执行cc而不是gcc来保证程序的通用性<blockquote><p>并且在所有的Unix类型的系统上都能用<br>而非仅局限于安装了GCC的Unix 类型的系统</p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>LFS-v6.2</li><li>LFS-v6.3</li><li>LFS-v9.0</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU-LFS-2-2</title>
    <url>/2020/02/29/GNU-LFS-2-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 08:32:01 GMT+0800 (中国标准时间) --><h3 id="GNU-LFS-2-2"><a href="#GNU-LFS-2-2" class="headerlink" title="GNU LFS-2-2"></a>GNU LFS-2-2</h3><ul><li><p>内容简述</p><blockquote><p>Linux Kernel Headeres(CN-LFS-6.2/6.3/9.0)<br>Glibc/Libstdc++(CN-LFS-6.2/6.3/9.0)<br>第一遍的工具链调整(CN-LFS-6.2/6.3/9.0)</p></blockquote></li><li><p>说明内容:</p></li><li><p>本篇内容将新版和旧版的资料相融合(将新版补充旧版的内容)</p></li><li><p>同时将其它的学习资料补充进LFS官方的文档内</p></li><li><p>在区分版本说明时，会先去介绍6.3再解释其它版本</p></li></ul><hr><h3 id="Linux-API-Headers"><a href="#Linux-API-Headers" class="headerlink" title="Linux API Headers"></a>Linux API Headers</h3><ul><li><p>每个版本的Linux kernel headers的名字都不一样</p></li><li><p>这里整合性的指出了三个版本的安装方法，分别是:</p><blockquote><p>Linux-2.6.22.5 API Headers(LFS-6.3)<br>Linux-5.2.8 API (LFS-9.0)<br>Linux-Libc-Headers-2.6.12.0 (LFS-6.2)</p></blockquote></li><li><p>新建编译目录和清理工作这里就不做过多阐述了</p></li></ul><hr><p><strong>Version-2.6.22.5(LFS-v6.3)</strong></p><ul><li>解压并进入文件夹<blockquote><p><code>$ tar xvf /lfs-sources/linux-2.6.22.5.tar.bz2</code><br><code>$ cd linux-2.6.22.5</code></p></blockquote></li></ul><p>清除所有存在的多余依赖关系:</p><blockquote><p><code>$ make mrproper</code></p></blockquote><p>编译头文件</p><blockquote><p><code>$ make headers_check</code></p></blockquote><ul><li><p>从源代码中提取用户可见的内核头文件到指定位置</p><blockquote><p><code>$ make INSTALL_HDR_PATH=dest headers_install</code></p></blockquote></li><li><p>保存在一个临时本地文件夹中然后复制到所需的位置</p><blockquote><p><code>$ cp -rv dest/include/* /tools/include</code></p></blockquote></li><li><p>清理</p><blockquote><p><code>$ cd ..</code><br><code>$ rm -rf linux-2.6.22.5</code></p></blockquote></li></ul><hr><p><strong>Version-5.2.8(LFS-v9.0)</strong></p><ul><li><p>大致构建用时: 0.1 SBU</p></li><li><p>所需磁盘空间: 960 MB</p></li><li><p>清除依赖项</p><blockquote><p><code>$ make mrproper</code></p></blockquote></li><li><p>从源代码中提取用户可见的内核头文件</p></li><li><p>把它们保存在一个临时本地文件夹中然后复制到所需的位置</p></li><li><p>因为解压过程会移除目标文件夹中任何已有的文件</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">make</span> INSTALL_HDR_PATH=dest headers_install</span><br><span class="line"><span class="keyword">cp</span> -<span class="keyword">rv</span> dest/include/* /tools/include</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>Version-2.6.12.0(LFS-未知版本)</strong></p><ul><li><p>Linux-Libc-Headers-2.6.12.0</p></li><li><p>Linux-Libc-Headers内包含了纯净的内核头文件</p></li><li><p>预计编译时间：少于0.1</p></li><li><p>SBU所需磁盘空间：27MB</p></li><li><p>安装这些头文件所需指令:</p><blockquote><p><code>cp -Rv include/asm-i386 /tools/include/asm</code><br><code>cp -Rv include/linux /tools/include</code></p></blockquote></li><li><p>asm-i386为架构参数，需要自行进行调整</p></li></ul><hr><h3 id="Glibc"><a href="#Glibc" class="headerlink" title="Glibc"></a>Glibc</h3><ul><li>Glibc-2.5.1</li><li>Glibc-2.30</li></ul><hr><p><strong>Glibc-2.5.1</strong></p><ul><li><p>LFS-v6.3</p></li><li><p>解压并进入编译目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar xvf /lfs-sources/glibc-2.5.1.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -v glibc-build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> glibc-build</span></span><br></pre></td></tr></table></figure></li><li><p>编译配置</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">$ ../glibc-2.5.1/configure --prefix=/tools 	\</span><br><span class="line">-<span class="ruby">-disable-profile 				\</span></span><br><span class="line"><span class="ruby">--enable-add-ons 				\</span></span><br><span class="line"><span class="ruby">--enable-kernel=<span class="number">2.6</span>.<span class="number">0</span> 				\</span></span><br><span class="line"><span class="ruby">--with-binutils=<span class="regexp">/tools/bin</span> 			\	 </span></span><br><span class="line"><span class="ruby">--without-gd 					\</span></span><br><span class="line"><span class="ruby">--with-headers=<span class="regexp">/tools/include</span> 			\ </span></span><br><span class="line"><span class="ruby">--without-selinux</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>参数说明:</strong></p><ul><li><p>参数<code>--prefix=/tools</code></p><blockquote><p>用于指定安装目录</p></blockquote></li><li><p>参数<code>--disable-profile</code></p></li><li><p>参数<code>--enable-add-ons</code></p><blockquote><p>用于指示Glibc使用附加的NPTL包作为线程库</p></blockquote></li><li><p>参数<code>--enable-kernel=2.6.0</code></p><blockquote><p>用于告诉Glibc编译支持2.6.x内核的库</p></blockquote></li><li><p>参数<code>--with-binutils=/tools/bin</code></p><blockquote><p>用于保证在编译Glibc时不会用错Binutils程序</p></blockquote></li><li><p>参数<code>--without-gd</code></p><blockquote><p>可以保证不生成memusagestat程序</p></blockquote></li><li><p>参数<code>--with-headers=/tools/include</code></p><blockquote><p>数指示Glibc按照前面刚刚安装到tools目录中的内核头文件编译自己<br>从而精确的知道内核的特性以根据这些特性对自己进行最佳化编译</p></blockquote></li><li><p>参数<code>--without-selinux</code></p><blockquote><p>用于明确禁用含有SELinux特性的Glibc，以防止会出现许多操作失败的结果</p></blockquote></li><li><p>其中参数<code>--enable-kernel=2.6.0</code>，只是为了说明kernel的大版本</p><blockquote><p>所以不需要根据实际的kernel版本来改<br>即使是用linux-2.6.15也一样只写2.6.0就可以了</p></blockquote></li><li><p>编译至二进制格式</p><blockquote><p><code>$make</code></p></blockquote></li><li><p>配置链接器</p><blockquote><p><code>$ mkdir -v /tools/etc</code><br><code>$ touch /tools/etc/ld.so.conf</code></p></blockquote></li><li><p>编译安装</p><blockquote><p><code>$ make install</code></p></blockquote></li><li><p>清理工作</p><blockquote><p><code>$ cd ..</code><br><code>$ rm -rf glibc-build</code><br><code>$ rm -rf glibc-2.5.1</code></p></blockquote></li></ul><hr><p><strong>Glibc-2.30</strong></p><ul><li><p>Glibc 软件包包含了主要的 C 函数库</p></li><li><p>这个库提供了分配内存，搜索目录，打开关闭文件，读写文件，操作字 符串，模式匹配，基础算法等基本程序</p></li><li><p>大致构建用时: 4.8 SBU</p></li><li><p>所需磁盘空间: 896 MB</p></li><li><p>编译配置</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">..</span>/glibc-2.5.1/configure              \      </span><br><span class="line"><span class="attribute">--prefix</span>=/tools                    	\      </span><br><span class="line"><span class="attribute">--host</span>=<span class="variable">$LFS_TGT</span>                    	\      </span><br><span class="line"><span class="attribute">--build</span>=$(../scripts/config.guess) 	\      </span><br><span class="line"><span class="attribute">--enable-kernel</span>=3.2                	\      </span><br><span class="line"><span class="attribute">--with-headers</span>=/tools/include</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数说明:</strong></p><ul><li><p><code>$ --host=$LFS_TGT, --build=$(../scripts/config.guess)</code></p><blockquote><p>这些选项的组合效果是Glibc的构建系统配置它自己用<code>/tools</code>里面的交叉链接器和交叉编译器交叉编译自己</p></blockquote></li><li><p><code>$ --enable-kernel=3.2</code></p><blockquote><p>这告诉Glibc编译能支持3.2以及之后的内核库<br>更早的内核版本不受支持</p></blockquote></li><li><p><code>$ --with-headers=/tools/include</code>告诉Glibc利用刚刚安装在tools文件夹中的头文件编译自身</p><blockquote><p>此能够根据内核的具体特性提供更好的优化</p></blockquote></li><li><p>在新版本的配置中，不仅需要安装C语言的标准库，还需要安装与配置对C++支持的标准库</p></li><li><p>Libstdc++是标准的C++库</p></li><li><p>需要用它来编译C++ 代码(GCC的一部分是用C++写的)</p></li><li><p>但是在构建GCC Pass-1时，我们需要推迟它的安装进程，因为依赖的glibc，还未部署在<code>/tools</code>目录中</p></li><li><p>大致构建用时: 0.5 SBU</p></li><li><p>所需磁盘空间: 879 MB</p></li><li><p>记得新建源码编译目录与编译完清理，这里不对此部分进行赘述了</p></li><li><p>因为Libstdc++是GCC源文件的一部分</p></li><li><p>所以首先应该解压GCC的压缩包，然后进入<code>gcc-9.2.0</code>文件夹</p></li><li><p>编译配置</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">$ ../libstdc++-v3/configure             \    </span><br><span class="line">-<span class="ruby">-host=$LFS_TGT                 	\    </span></span><br><span class="line"><span class="ruby">--prefix=<span class="regexp">/tools                 	\    </span></span></span><br><span class="line"><span class="ruby">--disable-multilib              	\    </span></span><br><span class="line"><span class="ruby">--disable-nls                   	\    </span></span><br><span class="line"><span class="ruby">--disable-libstdcxx-threads     	\    </span></span><br><span class="line"><span class="ruby">--disable-libstdcxx-pch         	\    </span></span><br><span class="line"><span class="ruby">--with-gxx-<span class="keyword">include</span>-dir=<span class="regexp">/tools/</span>$LFS_TGT/<span class="keyword">include</span>/c++<span class="regexp">/9.2.0</span></span></span><br></pre></td></tr></table></figure></li></ul><p><strong>配置说明:</strong></p><ul><li><p>参数<code>--host=...</code></p><blockquote><p>用于指示使用我们刚才编译的交叉编译器，而不是<code>/usr/bin</code>中的</p></blockquote></li><li><p>参数<code>--disable-libstdcxx-threads</code></p><blockquote><p>由于我们还没有编译C线程库，C++的也还不能编译</p></blockquote></li><li><p>参数<code>--disable-libstdcxx-pch</code></p><blockquote><p>此选项防止安装预编译文件，此步骤并不需要</p></blockquote></li><li><p>参数<code>--with-gxx-include-dir=/tools/$LFS_TGT/include/c++/9.2.0</code></p><blockquote><p>这是C++编译器搜索标准include文件的位置<br>在一般的编译中，这个信息自动从顶层文件夹中传入Libstdc++ configure选项<br>在我们的例子中，必须明确给出这信息</p></blockquote></li><li><p>进行编译安装</p><blockquote><p>$ make<br>$ make install</p></blockquote></li></ul><hr><p><strong>其它情况</strong></p><ul><li>在编译过程中可能会发生以下警告</li></ul><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">configure: WARNING: </span><br><span class="line"><span class="comment">*** These auxiliary programs are missing or </span></span><br><span class="line"><span class="comment">*** incompatible versions: msgfmt </span></span><br><span class="line"><span class="comment">*** some features will be disabled. </span></span><br><span class="line"><span class="comment">*** Check the INSTALL file for required versions.</span></span><br></pre></td></tr></table></figure><ul><li>msgfmt程序的缺失或者不兼容通常是无害的</li><li>这个msgfmt程序是Gettext软件包的一部分，主机发行版应该提供了</li></ul><hr><h3 id="调整工具链"><a href="#调整工具链" class="headerlink" title="调整工具链"></a>调整工具链</h3><ul><li>根据自身情况进行工具链调整</li><li>以下实例为LFS-v6.3的配置代码</li><li>同时也包括了部分LFS-v6.2的内容</li></ul><hr><p><strong>调整思路:</strong></p><ul><li>因为现在临时的C库已经装好，接下来本章中要编译的所有工具应该连接到这些库上</li><li>为了达到这个目标，需要调整连接器和编译器的specs文件</li><li>在第一遍编译Binutils快结束时已经调整过的连接器，现在需要被重新命名以便可以被正确的找到和使用</li><li>首先备份原来的连接器，然后用调整过的连接器来替代</li><li>最后还要创建一个指向<code>/tools/$(gcc-dumpmachine)/bin</code>中连接器副本的连接</li><li>如果当前本地主机的系统平台上，动态连接器的名字不是<code>ld-linux.so.2</code></li><li>必须人为的把spaces配置里的<code>ldlinux.so.2</code>换成你的系统平台上动态连接器的名字</li></ul><hr><ul><li>以下为工具链配置代码(LFS-6.3)<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ mv -v /tools/bin/&#123;ld,ld-old&#125; </span><br><span class="line">$ mv -v /tools/<span class="constructor">$(<span class="params">gcc</span> -<span class="params">dumpmachine</span>)</span>/bin/&#123;ld,ld-old&#125; </span><br><span class="line">$ mv -v /tools/bin/&#123;ld-<span class="keyword">new</span>,ld&#125; </span><br><span class="line">$ ln -sv /tools/bin/ld /tools/<span class="constructor">$(<span class="params">gcc</span> -<span class="params">dumpmachine</span>)</span>/bin/ld </span><br><span class="line">$ gcc -dumpspecs <span class="pattern-match">| sed 's@^<span class="operator">/</span>lib<span class="operator">/</span>ld-linux.so.2@<span class="operator">/</span>tools&amp;@g' &gt; `dirname <span class="constructor">$(<span class="params">gcc</span> -<span class="params">print</span>-<span class="params">libgcc</span>-<span class="params">file</span>-<span class="params">name</span>)</span>`<span class="operator">/</span> specs </span></span><br><span class="line"><span class="pattern-match"><span class="constructor">$</span> <span class="constructor">GCC_INCLUDEDIR</span>=`dirname <span class="constructor">$(<span class="params">gcc</span> -<span class="params">print</span>-<span class="params">libgcc</span>-<span class="params">file</span>-<span class="params">name</span>)</span>`<span class="operator">/</span><span class="keyword">include</span> <span class="operator">&amp;&amp;</span> </span></span><br><span class="line"><span class="pattern-match">find <span class="constructor">$</span>&#123;<span class="constructor">GCC_INCLUDEDIR</span>&#125;<span class="operator">/</span><span class="operator">*</span> -maxdepth 0 -xtype d -exec rm -rvf '&#123;&#125;' \; <span class="operator">&amp;&amp;</span> </span></span><br><span class="line"><span class="pattern-match">rm -vf `grep -l "<span class="constructor">DO</span> <span class="constructor">NOT</span> <span class="constructor">EDIT</span> <span class="constructor">THIS</span> <span class="constructor">FILE</span>" <span class="constructor">$</span>&#123;<span class="constructor">GCC_INCLUDEDIR</span>&#125;<span class="operator">/</span><span class="operator">*</span>` <span class="operator">&amp;&amp;</span></span></span><br><span class="line"><span class="pattern-match">unset <span class="constructor">GCC_INCLUDEDIR</span></span></span><br></pre></td></tr></table></figure></li></ul><p><strong>语句内容刨析:</strong></p><ul><li>符号链接部分</li></ul><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ mv -v /tools/bin/&#123;<span class="keyword">ld</span>,<span class="keyword">ld</span>-old&#125; </span><br><span class="line">$ mv -v /tools/$(gcc -dumpmachine)/bin/&#123;<span class="keyword">ld</span>,<span class="keyword">ld</span>-old&#125; </span><br><span class="line">$ mv -v /tools/bin/&#123;<span class="keyword">ld</span>-new,<span class="keyword">ld</span>&#125; </span><br><span class="line">$ ln -sv /tools/bin/<span class="keyword">ld</span> /tools/$(gcc -dumpmachine)/bin/<span class="keyword">ld</span></span><br></pre></td></tr></table></figure><ul><li><p>就是几个符号链接</p></li><li><p>当设置完成之后，所有程序都将连接到<code>/tools/lib</code>中的库文件</p></li><li><p>space部分</p></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ gcc -dumpspecs <span class="pattern-match">| sed 's@^<span class="operator">/</span>lib<span class="operator">/</span>ld-linux.so.2@<span class="operator">/</span>tools&amp;@g' &gt; `dirname <span class="constructor">$(<span class="params">gcc</span> -<span class="params">print</span>-<span class="params">libgcc</span>-<span class="params">file</span>-<span class="params">name</span>)</span>`<span class="operator">/</span> specs </span></span><br><span class="line"><span class="pattern-match"><span class="constructor">$</span> <span class="constructor">GCC_INCLUDEDIR</span>=`dirname <span class="constructor">$(<span class="params">gcc</span> -<span class="params">print</span>-<span class="params">libgcc</span>-<span class="params">file</span>-<span class="params">name</span>)</span>`<span class="operator">/</span><span class="keyword">include</span> <span class="operator">&amp;&amp;</span> </span></span><br><span class="line"><span class="pattern-match">find <span class="constructor">$</span>&#123;<span class="constructor">GCC_INCLUDEDIR</span>&#125;<span class="operator">/</span><span class="operator">*</span> -maxdepth 0 -xtype d -exec rm -rvf '&#123;&#125;' \; <span class="operator">&amp;&amp;</span> </span></span><br><span class="line"><span class="pattern-match">rm -vf `grep -l "<span class="constructor">DO</span> <span class="constructor">NOT</span> <span class="constructor">EDIT</span> <span class="constructor">THIS</span> <span class="constructor">FILE</span>" <span class="constructor">$</span>&#123;<span class="constructor">GCC_INCLUDEDIR</span>&#125;<span class="operator">/</span><span class="operator">*</span>` <span class="operator">&amp;&amp;</span></span></span><br><span class="line"><span class="pattern-match">unset <span class="constructor">GCC_INCLUDEDIR</span></span></span><br></pre></td></tr></table></figure><p>此代码还可以拆成以下两部分</p><ul><li><p>部分一</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> SPECFILE=`dirname <span class="symbol">$</span>(gcc -print-libgcc-<span class="keyword">file</span>-name)`/specs &amp;&amp; </span><br><span class="line">gcc -dumpspecs &gt; <span class="symbol">$</span>SPECFILE &amp;&amp;</span><br><span class="line">sed <span class="string">'s@^/lib/ld-linux.so.2@/tools&amp;@g'</span>	<span class="symbol">$</span>SPECFILE &gt; tempspecfile &amp;&amp;</span><br><span class="line">mv -vf tempspecfile <span class="symbol">$</span>SPECFILE &amp;&amp; </span><br><span class="line">unset SPECFILE</span><br></pre></td></tr></table></figure></li><li><p>用于修正GCC的specs文件，使它指向新的动态连接器</p></li><li><p>只需要像以上那样使用一个简单的sed命令就能做到</p></li><li><p>同时也可以手动编辑specs文件</p><blockquote><p>本质上就是把所有的<code>/lib/ld-linux.so.2</code>都替换成<code>/tools/lib/ld-linux.so.2</code>就行</p></blockquote></li><li><p>部分二</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GCC_INCLUDEDIR=`dirname $(gcc -<span class="built_in">print</span>-libgcc-file-name)`/include &amp;&amp;</span><br><span class="line">find <span class="variable">$&#123;GCC_INCLUDEDIR&#125;</span>/* -maxdepth 0 -xtype d -<span class="built_in">exec</span> rm -rvf <span class="string">'&#123;&#125;'</span> \; &amp;&amp;</span><br><span class="line">rm -vf `grep -l <span class="string">"DO NOT EDIT THIS FILE"</span> <span class="variable">$&#123;GCC_INCLUDEDIR&#125;</span>/*` &amp;&amp;</span><br><span class="line"><span class="built_in">unset</span> GCC_INCLUDEDIR</span><br></pre></td></tr></table></figure></li><li><p>用于删除GCC专属头文件目录中的头文件</p><blockquote><p>以避免宿主系统中的头文件污染编译环境</p></blockquote></li></ul><hr><ul><li>相关说明<blockquote><p>工具链的调整方法有好几种，而且不同版本GCC的specs可能会有不同<br>但实际上都是把specs文件中的<code>/lib/ld-linux.so.2</code>替换成了<code>/tools/lib/ld-linux.so.2</code><br>所以即使有些文章在调整工具链上的命令和LFS手册上的不一样也不用太奇怪<br>当然也可以 直接用<code>gcc -dumpspecs</code>导出后手工直接编辑specs文件<br>spaces必须加以检查以确保被修改的配置的的确确生效了</p></blockquote></li></ul><hr><h3 id="内容参考"><a href="#内容参考" class="headerlink" title="内容参考"></a>内容参考</h3><ul><li>CN-LFS-v9.0</li><li>CN-LFS-v6.3</li><li>CN-LFS-v6.2</li><li>在LFS-1的URL资源整合目录里都有说明</li></ul><hr><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>GNU-LFS-2-1</title>
    <url>/2020/02/29/GNU-LFS-2-1/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 00:16:31 GMT+0800 (中国标准时间) --><h2 id="GNU-LFS-2-1"><a href="#GNU-LFS-2-1" class="headerlink" title="GNU LFS-2-1"></a>GNU LFS-2-1</h2><hr><h3 id="构造临时系统-1-0"><a href="#构造临时系统-1-0" class="headerlink" title="构造临时系统-1.0"></a>构造临时系统-1.0</h3><ul><li>1.0-为第一遍编译并安装临时工具链内Binutils与GCC</li></ul><p><strong>概述:</strong></p><ul><li><p>对于临时系统的简述</p></li><li><p>目的是何构造一个最小的Linux系统</p></li><li><p>该系统将包含刚好足够构建目标主机中最终LFS系统所需的工具，以及一个比最小环境具有更好用户便利性的工作环境</p></li><li><p>使用的软件包皆为v6.3版本的LFS-liveCD中拥有的软件包</p></li><li><p>本文只介绍基本的[GNU 工具链]的搭建参考于v6.3与v9.0(对6.3进行补充，对9.0进行说明)</p><blockquote><p>v6.3和v9.0都有进行举例说明</p></blockquote></li><li><p>构建这个最小系统有两个步骤:</p><blockquote><p>第一步: 构建一个与宿主系统无关的新工具链(编译器、汇编器、链接器、 库和一些有用的工具)<br>第二步: 使用该工具链，去构建其它的基础工具</p></blockquote></li><li><p>临时系统中编译得到的文件将被安装在目录<code>$LFS/tools</code>中</p><blockquote><p>以确保在下一章中安装的文件和宿主系统生成的目录相互分离<br>由于此处编译的软件包都是临时性的，因此可以人为的去避免出现污染后面即将构成的LFS系统的情况发生</p></blockquote></li></ul><p><strong>需要特别注意的几点:</strong></p><ul><li>在构建的过程需要注意的问题</li></ul><ol><li>把所有源文件和补丁放到 chroot 环境可访问的目录，例如<code>/mnt/lfs/sources/</code><blockquote><p>但是千万不 能把源文件放在<code>/mnt/lfs/tools/</code>中</p></blockquote></li><li>进入到源文件目录</li><li>对于每个软件包:<blockquote><p>a. 用tar程序解压要编译的软件包<br>同时在临时系统目录中，确保解压软件包时本地主机使用的是lfs用户<br>b. 进入到解压后创建的目录中<br>c. 根据指南说明编译软件包<br>d. 回退到源文件目录<br>e. 除非特别说明，删除解压出来的目录</p></blockquote></li></ol><hr><ul><li><p>进入LFS包编译目录</p><blockquote><p><code>cd $LFS/sources</code></p></blockquote></li><li><p>第一遍编译[GNU 工具链]说明:</p><blockquote><p>在编译完成之后，通常需要运行测试套件<br>但此时测试套件框架(Tcl，Expect和DejaGNU)还没有就绪<br>同时因为此时是所有工作的初期阶段<br>所以此进行测试的收效甚微，因为第一遍编译的程序很快会被第二遍的代</p></blockquote></li></ul><hr><h3 id="1-0-0"><a href="#1-0-0" class="headerlink" title="1.0.0"></a>1.0.0</h3><p><strong>Binutils-2.17/2.32-Pass 1</strong><br><strong>安装交叉编译的Binutils</strong></p><ul><li><p>目标软件包简述:</p><blockquote><p>Binutils 软件包包含一个链接器，一个汇编器，以及其它处理目标文件的工具<br>大致构建用时: 1 SBU<br>所需磁盘空间: 580 MB</p></blockquote></li><li><p>创建目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar xvf /lfs-sources/binutils-2.17.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -v binutils-build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> binutils-build</span></span><br></pre></td></tr></table></figure></li><li><p>v6.3配置编译</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">CC=<span class="string">"gcc -B/usr/bin/"</span> <span class="string">../binutils-2.17/configure</span> <span class="params">--prefix=/tools</span>  	\</span><br><span class="line">				            <span class="params">--disable-nls</span> 		\</span><br><span class="line">				            <span class="params">--disable-werror</span></span><br></pre></td></tr></table></figure></li><li><p>v9.0编译配置</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="attribute">CC</span>=<span class="string">"gcc -B/usr/bin/"</span>  <span class="built_in">..</span>/binutils-2.32/configure 	<span class="attribute">--prefix</span>=/tools            \</span><br><span class="line">             					<span class="attribute">--with-sysroot</span>=<span class="variable">$LFS</span>        	\</span><br><span class="line">             					<span class="attribute">--with-lib-path</span>=/tools/lib 	\</span><br><span class="line">             					<span class="attribute">--target</span>=<span class="variable">$LFS_TGT</span>          	\</span><br><span class="line">             					--disable-nls              	\</span><br><span class="line">             					--disable-werror</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数说明:</strong></p><ul><li><p>参数<code>CC=&quot;gcc -B/usr/bin/&quot;</code>该选项强制gcc使用宿主系统中/usr/bin目录下的连接器</p><blockquote><p>这样做的必要是因为新生成的ld可能与某些宿主系统的gcc不兼容</p></blockquote></li><li><p>参数<code>--prefix=/tools</code>用于告诉配置脚本将<code>Binutils程序</code>安装到<code>/tools</code>文件夹</p></li><li><p>参数<code>--with-sysroot=$LFS</code>用于交叉编译，告诉编译系统在<code>$LFS</code>中查找所需的目标系统库</p></li><li><p>参数<code>--with-lib-path=/tools/lib</code>指定需要配置使用的链接器的库路径</p></li><li><p>参数<code>--target=$LFS_TGT</code>，因为<code>LFS_TGT</code>变量中的机器描述和<code>config.guess</code>脚本返回的值略有不同，这个选项会告诉<code>configure</code>脚本调整<code>Binutils</code>的构建系统来构建一个交叉链接器</p></li><li><p>参数<code>--disable-nls</code>会禁止国际化(i18n)，因为国际化对临时工具来说没有必要</p></li><li><p>参数<code>--disable-werror</code>会防止来自宿主编译器的警告事件导致停止编译</p></li><li><p>继续编译并进行编译安装</p><blockquote><p>$make<br>$make install</p></blockquote></li><li><p>为调整工具链步骤准备连接器</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ make -C <span class="keyword">ld</span> clean </span><br><span class="line">$ make -C <span class="keyword">ld</span> LIB_PATH=/tools/lib</span><br><span class="line">$ <span class="keyword">cp</span> -v <span class="keyword">ld</span>/<span class="keyword">ld</span>-new /tools/bin</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数说明:</strong></p><ul><li><p>参数<code>-C ld clean</code></p><blockquote><p>用于告诉make程序删除所有ld子目录中编译生成的文件</p></blockquote></li><li><p>参数<code>-C ld LIB_PATH=/tools/lib</code></p><blockquote><p>用于这个选项重新编译ld子目录中的所有文件</p></blockquote></li><li><p>清理工作</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .. </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf binutils-build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf binutils-2.17</span></span><br></pre></td></tr></table></figure></li><li><p>如果是在<code>x86_64</code>上构建，创建符号链接，以确保工具链的完整性:</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">case</span> $(uname -m) in  </span><br><span class="line">	x86_64) mkdir -v /tools/<span class="class"><span class="keyword">lib</span> &amp;&amp; <span class="title">ln</span> -<span class="title">sv</span> <span class="title">lib</span> /<span class="title">tools</span>/<span class="title">lib64</span> ;</span>; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>该软件包的详细信息位于<code>Section#6.16.2</code>的<code>Binutils内容</code></p></li></ul><hr><h3 id="2-0-0"><a href="#2-0-0" class="headerlink" title="2.0.0"></a>2.0.0</h3><p><strong>GCC-4.12/9.2.0 Pass-1</strong><br><strong>安装交叉编译的GCC</strong></p><ul><li>目标软件包简述:<blockquote><p>GCC软件包包括GNU编译器集，其中有C和C++的编译器<br>大致构建用时: 12 SBU<br>所需磁盘空间: 3.1 GB</p></blockquote></li></ul><p><strong>以下内容为LFS-v6.3的GCC编译过程</strong></p><ul><li><p>创建目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar xvf /lfs-sources/gcc-4.1.2.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -v gcc-build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gcc-build</span></span><br></pre></td></tr></table></figure></li><li><p>v6.3编译配置</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CC</span>=<span class="string">"gcc -B/usr/bin/"</span> <span class="built_in">..</span>/gcc-4.1.2/configure 	<span class="attribute">--prefix</span>=/tools 		\ </span><br><span class="line">				      		 <span class="attribute">--with-local-prefix</span>=/tools 	\</span><br><span class="line">				       		--disable-nls 			\</span><br><span class="line">				       		--enable-shared 		\</span><br><span class="line">				       		<span class="attribute">--enable-languages</span>=c</span><br></pre></td></tr></table></figure></li><li><p>v9.0编译配置</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">CC=<span class="string">"gcc -B/usr/bin/"</span> ../gcc-<span class="number">9.2</span>.<span class="number">0</span>/configure       	<span class="string">\</span></span><br><span class="line"> --target=$LFS_TGT                              	<span class="string">\</span></span><br><span class="line"> --prefix=/tools                                	<span class="string">\</span> </span><br><span class="line"> --<span class="keyword">with</span>-glibc-version=<span class="number">2.11</span>                      	<span class="string">\</span> </span><br><span class="line">  --<span class="keyword">with</span>-sysroot=$LFS                            	<span class="string">\</span> </span><br><span class="line">  --<span class="keyword">with</span>-newlib                                  	<span class="string">\</span> </span><br><span class="line"> --without-headers                              	<span class="string">\</span> </span><br><span class="line"> --<span class="keyword">with</span>-local-prefix=/tools                     	<span class="string">\</span> </span><br><span class="line"> --<span class="keyword">with</span>-<span class="keyword">native</span>-system-header-dir=/tools/include 	<span class="string">\</span> </span><br><span class="line"> --disable-nls                                  	<span class="string">\</span></span><br><span class="line"> --disable-shared                               	<span class="string">\</span></span><br><span class="line"> --disable-multilib                             	<span class="string">\</span> </span><br><span class="line"> --disable-decimal-float                        	<span class="string">\</span> </span><br><span class="line"> --disable-threads                              	<span class="string">\</span> </span><br><span class="line"> --disable-libatomic                            	<span class="string">\</span> </span><br><span class="line"> --disable-libgomp                              	<span class="string">\</span> </span><br><span class="line"> --disable-libquadmath                          	<span class="string">\</span> </span><br><span class="line"> --disable-libssp                               	<span class="string">\</span> </span><br><span class="line"> --disable-libvtv                               	<span class="string">\</span></span><br><span class="line"> --disable-libstdcxx                            	<span class="string">\</span> </span><br><span class="line"> --enable-languages=c,c++</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>配置含义(参数说明):</strong></p><ul><li>参数<code>--with-newlib</code><blockquote><p>由于还没有可用的C库，这确保编译libgcc时定义了常数<code>inhibit_libc</code><br>这可以防止编译任何需要libc支持的代码</p></blockquote></li><li>参数<code>--without-headers</code><blockquote><p>在创建完整的交叉编译器时，GCC要求标准头文件和目标系统兼容<br>对于我们的目的来说，不需要这些头文件<br>这个选项可以防止GCC查找它们</p></blockquote></li><li>参数<code>--with-local-prefix=/tools GCC</code><blockquote><p>此参数会查找本地已安装的include文件的系统位置<br>默认是<code>/usr/local</code><br>把它设置为<code>/tools</code>能把主机位置中的<code>/usr/local</code>从GCC的搜索路径中排除</p></blockquote></li><li>参数<code>--with-native-system-header-dir=/tools/include</code><blockquote><p>GCC默认会在/usr/include中查找系统头文件<br>和<code>sysroot</code>选项一起使用，会转换为<code>$LFS/usr/include</code><br>在后面两个章节中头文件会被安装到<code>$LFS/tools/include</code><br>这个选项确保 gcc 能正确找 到它们<br>第二次编译 GCC 时，同样的选项可以保证不会去寻找主机系统的头文件</p></blockquote></li><li>参数<code>--disable-shared</code><blockquote><p>这个选项强制GCC静态链接到它的内部库<br>我们这样做是为了避免主机系统可能出现的问题</p></blockquote></li><li>参数:<blockquote><p><code>--disable-decimal-float</code>,<code>--disable-threads</code>,<code>--disable-libatomic</code>,<code>--disablelibgomp</code>,<br><code>--disable-libquadmath</code>,<code>--disable-libssp</code>,<code>--disable-libvtv</code>,<code>--disablelibstdcxx</code><br>这些选项取消了对十进制浮点数扩展，线程化，<code>libatomic</code>，<code>libgomp</code>，<code>libquadmath</code>，<code>libssp</code>，<code>libvtv</code>，<code>libcilkrts</code>和<code>C++</code>标准库的支持<br>这些功能在编译 交叉编译器的时候会导致编译失败，对于交叉编译临时 libc 来说也没有必要</p></blockquote></li><li>参数<code>--disable-multilib</code><blockquote><p>在<code>x86_64</code>机器上，LFS 还不支持<code>multilib</code>配置<br>这个选项对 x86 来说无害</p></blockquote></li><li>参数<code>--enable-languages=c,c++</code><blockquote><p>这个选项确保只编译 C 和 C++ 编译器<br>这些是现在唯一需要的语言</p></blockquote></li><li>此时只编译了GCC里的C编译器</li></ul><hr><ul><li><p>编译并安装</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; $ make bootstrap</span></span><br><span class="line"><span class="quote">&gt; $ make install</span></span><br></pre></td></tr></table></figure></li><li><p>创建符号连接(工具链)</p><blockquote><p><code>$ ln -vs gcc /tools/bin/cc</code></p></blockquote></li><li><p>清理工作</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .. </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf gcc-build </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf gcc-4.1.2</span></span><br></pre></td></tr></table></figure></li><li><p>该软件包的详细信息位于<code>Section#6.21.2</code>的GCC软件包内容里</p></li></ul><hr><ul><li>对于工具链内的工具或其它软件的编译安装大致可分为以下几步:</li></ul><ol><li>创建目录</li><li>配置编译器与其脚本文件</li><li>编译并安装</li><li>配置工具链</li></ol><ul><li>配置其它独有(针对于不同工具的特殊配置)性质</li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>金钟国的v6.3-LFS</p></li><li><p>孙海勇的v6.3-LFS</p></li><li><p>LFS-v9.0</p></li><li><p><code>5.4. Binutils-2.18 - 第一遍</code><a href="https://blbl.dev/lfs_6.4_zhcn/chapter05/binutils-pass1.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://blbl.dev/lfs_6.4_zhcn/chapter05/binutils-pass1.html</code></p></blockquote></li><li><p><code>gcc -B/usr/bin -B</code>的含义<a href="https://www.169it.com/tech-qa-linux/article-10702497996978005026.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.169it.com/tech-qa-linux/article-10702497996978005026.html</code></p></blockquote></li><li><p>百度知道<a href="https://zhidao.baidu.com/question/501313846.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zhidao.baidu.com/question/501313846.html</code></p></blockquote></li></ul><hr><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><p><strong>对于9.2.0版本的GCC的补充内容</strong></p><ul><li><p>需要GMP，MPFR和MPC 软件包</p></li><li><p>在本地的主机发行版中可能并不包括这些软件包，它们将和GCC一起编译</p></li><li><p>将每个解压软件包到 GCC 的目录下，并重命名解压后得到的目录，以便GCC编译过程中能自动使用这些软件</p></li><li><p>执行以下命令:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ tar -xf ../mpfr<span class="number">-4.0</span><span class="number">.2</span>.tar.xz</span><br><span class="line">$ mv -v mpfr<span class="number">-4.0</span><span class="number">.2</span> mpfr </span><br><span class="line">$ tar -xf ../gmp<span class="number">-6.1</span><span class="number">.2</span>.tar.xz</span><br><span class="line">$ mv -v gmp<span class="number">-6.1</span><span class="number">.2</span> gmp</span><br><span class="line">$ tar -xf ../mpc<span class="number">-1.1</span><span class="number">.0</span>.tar.gz</span><br><span class="line">$ mv -v mpc<span class="number">-1.1</span><span class="number">.0</span> mpc</span><br></pre></td></tr></table></figure></li><li><p>下面的指令将会修改GCC默认的动态链接器的位置，安装到<code>/tools</code>目录中的</p></li><li><p>并将<code>/usr/include</code>从GCC的include检索路径中移除</p></li><li><p>执行以下命令:</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ for file in gcc/config/&#123;linux,i386/linux&#123;,64&#125;&#125;<span class="string">.h</span> </span><br><span class="line">do  </span><br><span class="line">cp -uv $file&#123;,<span class="string">.orig</span>&#125;  </span><br><span class="line">sed -e 's@<span class="string">/lib</span>\<span class="params">(64\)</span>\?\<span class="params">(32\)</span>\?<span class="string">/ld</span>@<span class="string">/tools</span>&amp;@g' \</span><br><span class="line">-e 's@<span class="string">/usr</span>@<span class="string">/tools</span>@g' $file.orig &gt; $file  </span><br><span class="line"><span class="keyword">echo</span> ' </span><br><span class="line"><span class="comment">#undef STANDARD_STARTFILE_PREFIX_1 </span></span><br><span class="line"><span class="comment">#undef STANDARD_STARTFILE_PREFIX_2 </span></span><br><span class="line"><span class="comment">#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/" </span></span><br><span class="line"><span class="comment">#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file  </span></span><br><span class="line">touch $file.orig </span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>参数解析:</strong></p><p><strong>执行逻辑说明:</strong></p><ol><li>首先复制文件<code>gcc/config/linux. h</code>,<code>gcc/config/i386/linux.h</code>，和<code>gcc/config/i368/linux64.h</code></li><li>然后给复制的文件加上<code>.orig</code>后缀</li><li>然后第一个sed表达式在每个<code>/lib/ld</code>,<code>/lib64/ld</code>或者<code>/lib32/ld</code>实例前面增加<code>/tools</code><blockquote><p>第二个sed表达式替换<code>/usr</code>的硬编码实例</p></blockquote></li><li>然后添加这改变默认<code>startfile前缀</code>到文件末尾的定义语句<blockquote><p>此时需要注意<code>/tools/lib/</code>后面的<code>/</code>是必须的</p></blockquote></li><li>最后用<code>touch</code>更新复制文件的时间戳<blockquote><p>当与<code>cp -u</code>一起使用时，可以防止命令被无意中运行两次造成对原始文件意外的更改</p></blockquote></li></ol><hr><ul><li>在<code>x86_64</code>的主机上，为64位的库设置默认目录名至[lib]:</li><li>执行以下命令:<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span><span class="keyword">case</span> <span class="variable">$(</span>uname -m) <span class="keyword">in</span>  </span><br><span class="line">x86_64)</span><br><span class="line">sed -e <span class="string">'/m64=/s/lib64/lib/'</span> \        </span><br><span class="line">-i.orig gcc/config/i386/t-linux64 </span><br><span class="line">;; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="补充内容-1"><a href="#补充内容-1" class="headerlink" title="补充内容-1"></a>补充内容-1</h3><ul><li><p>在LFS-v6.3版本中</p></li><li><p>这里要注意第一遍编译的时候编译器参数需要指定:<code>CC=&quot;gcc -B/usr/bin/</code></p><blockquote><p>用以强制gcc使用宿主系统中/usr/bin目录下的连接器</p></blockquote></li><li><p>ld-GNU链接器</p></li><li><p>在第一次工具链调整之后需要进行一次可用性测试</p></li><li><p>在第二次编译安装完成GCC后需要进行一次可用性测试</p></li><li><p>测试组件</p><blockquote><p>Tcl-8.4.15<br>Expect-5.43.0<br>DejaGNU-1.4.4</p></blockquote></li></ul><hr><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>参考自LFS-v9.0第5.5章节</p></li><li><p>LFS-v9.0<a href="https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf</code></p></blockquote></li><li><p>LFS-v6.2</p><blockquote><p>参考金步国的中文译本</p></blockquote></li><li><p>LFS-v6.3</p><blockquote><p>参考孙海勇的中文译本</p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU-LFS-1</title>
    <url>/2020/02/28/GNU-LFS-1/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 01:00:17 GMT+0800 (中国标准时间) --><h3 id="LFS-1"><a href="#LFS-1" class="headerlink" title="LFS-1"></a>LFS-1</h3><ul><li>参考资料为CN-[LFS-BOOK(v9.0)]-PDF版</li></ul><hr><p><strong>文案说明:</strong></p><ul><li><p>GNU LFS-1-x 为LFS基本配置描述</p></li><li><p>GNU LFS-2-x 为临时系统描述</p></li><li><p>GNU LFS-3-x 为目标主机描述</p></li><li><p>进入chroot来操作目标主机</p></li><li><p>因为文章内关于LFS-v6.3或LFS-v6.2的内容使用了相近的解释，所以对于版本参数的描述可能有些凌乱</p></li><li><p>所以版本的问题需要就具体情况而定，文章里不会做对版本的细致区别</p></li><li><p>6.2和6.3版本的LFS有一个比较大的区别就是内核文件的不同，其它近乎相同</p></li><li><p>同时文章内的内容与资料仅供参考，具体实践还需查阅官方文档</p></li><li><p>使用6.3版本的原因是因为LFS官方的LiveCD的最新版本为6.3版本</p></li></ul><p><strong>本地主机环境一览:</strong></p><ul><li>原主机环境准备</li><li>主机内存(RAM)为4GB</li><li>主机磁盘为30GB</li><li>CPU为4核-2.2GHZ</li><li>本地主机硬盘接口类型为SCSI</li><li>磁盘分区表类型为MBR(GPT/GUID不做阐述)</li><li>磁盘启动引导类型为BIOS(UEFI不做阐述)</li><li>CD使用LFS-liveCD-v6.3(2007)</li></ul><hr><h3 id="1-0-0-1-2-7"><a href="#1-0-0-1-2-7" class="headerlink" title="1.0.0-1.2.7"></a>1.0.0-1.2.7</h3><p><strong>1.0.0</strong></p><ul><li>使用cfdisk工具对原主机进行分区(也可以使用fdisk工具进行分区操作)<blockquote><p><code>$cfdisk /dev/sda</code></p></blockquote></li></ul><p><strong>1.1.0 格式化磁盘分区</strong></p><ul><li><p>Swap分区(swap)</p><blockquote><p><code>$mkswap /dev/&lt;yyy&gt;</code><br><code>$mkswap /dev/sda1</code></p></blockquote></li><li><p>LFS分区(ext)</p><blockquote><p><code>$mkfs -v -t ext4/ext3 /dev/&lt;xxx&gt;</code><br><code>$mkfs.ext4/ext3 /dev/sda2</code><br><code>$mkfs -v -t ext3 /dev/sda2</code></p></blockquote></li><li><p>格式化为ext3文件系统</p><blockquote><p><code>mke2fs -jv /dev/&lt;xxx&gt;</code></p></blockquote></li></ul><p><strong>相关实例与指令具体说明:</strong></p><ul><li>前者为标准格式，后者为实例</li><li>在原主机磁盘上创建新分区</li><li>由于是LFS官方提供的liveCD，所以此时的原主机没有任何分区</li><li>这里创建两个本地的主分区: /dev/sda1用于交换分区(swap)，/dev/sda2用作目标主机制作环境，分区文件格式为ext3(或ext3/ext4等等)</li><li>存储容量分别是7000B与530000B(拟定，因本地主机的处理器指令集位数问题，实际情况会发生细微变动)</li></ul><hr><p><strong>1.2.0 设置LFS所处目录的系统变量</strong></p><ul><li>因为整个实现过程需要多次用到LFS系统的目录，所以先将LFS系统目录设置为LFS变量(变量名自拟，这里为LFS，即$LFS)</li><li>因为这里将要把LFS分区挂载到/mnt目录中，所以可以将LFS系统目录建立到/mnt目录内，以下指令直接创建环境变量:<blockquote><p><code>$export LFS=/mnt/lfs</code></p></blockquote></li></ul><p><strong>1.2.1 将新分区(LFS系统分区)进行挂载</strong></p><ul><li>挂载的目是访问所被挂载的分区，上一步中将分区所在目录设为了$LFS变量所指向的地址</li><li>创建挂载点<blockquote><p><code>mkdir -pv $LFS</code></p></blockquote></li><li>挂载LFS分区及其文件系统(文件可以自动识别，即便不加也是可以的)<blockquote><p><code>mount -v -t ext3/ext4 /dev/&lt;xxx&gt; $LFS</code><br><code>mount -v -t ext3 /dev/sda2 $LFS</code><br><code>mount /dev/sda2 $LFS</code></p></blockquote></li><li>(非必要)挂载并使用swap分区<blockquote><p><code>/sbin/swapon -v /dev/&lt;zzz&gt;</code></p></blockquote></li></ul><p><strong>相关实例与指令具体说明:</strong></p><ul><li>这里与以后的说明都将/dev/sda2分区称为LFS分区，即目标系统根目录</li><li>交换分区(swap)的作用是可以有效的解决编译过程中所需内存的不足，所以可以分出一个小型磁盘分区来当作swap空间</li><li>所以swap的容量可以按需分配，而sda2当然是越大越好</li><li>宿主机(原主机)和LFS分区的swap是公用的，如果原宿主机拥有swap，就没有必要再新建一个了</li><li>有关于磁盘分区的标志与其它分区表类型和启动引导类型的内容这里就不做过多赘述了</li></ul><hr><p><strong>1.2.2 创建必要目录以及目录权限分配</strong></p><ul><li><p>今后在第二阶段(临时系统)制作的时候会将所有的软件编译到<code>$LFS/tools</code>中，以便与第三阶段时所编译的软件完全分离</p></li><li><p>在目标系统成型后，便可将其遗弃</p></li><li><p>执行以下操作需要root权限</p></li><li><p>创建工具链目录<code>$LFS/tools</code></p><blockquote><p><code>mkdir -v $LFS/tools</code></p></blockquote></li><li><p>在原主机内创建符号链接，用以指向LFS分区中新建的目录(/tools)</p></li><li><p>此时所创建的符号链接将永远指向<code>/tools</code>文件夹</p><blockquote><p>即编译器，汇编器，链接器无论是在临时系统或是目标系统中都可以进行使用</p></blockquote></li><li><p>配置符号链接</p><blockquote><p><code>ln -sv $LFS/tools /</code></p></blockquote></li></ul><p><strong>1.2.3 创建源代码编译用目录</strong></p><blockquote><p><code>mkdir -v $LFS/sources</code></p></blockquote><ul><li>权限分配<blockquote><p><code>chmod -v a+wt $LFS/sources</code></p></blockquote></li></ul><hr><p><strong>1.2.4 添加LFS用户(自定义非特权用户命名)</strong></p><ul><li>因为以root用户登陆时，一个操作失误便可以摧毁整个操作系统，所以在此需要新建一个非特权用户来对软件包进行编译</li><li>同时也是为了建立一个干净的工作环境，这里创建一个名为lfs的新用于作为新组(同样命名为lfs)的成员</li><li>添加新用户:<blockquote><p><code>groupadd lfs</code></p></blockquote></li><li>将新用户lfs的shell设为默认bash，并将用户lfs添加到lfs组中，同时为lfs用户创建主目录</li><li>并对用户输入位置设置为空设备(null)，以防止可能从框架目录复制文件的情况<blockquote><p><code>useradd -s /bin/bash -g lfs -m -k /dev/null lfs</code></p></blockquote></li><li>设置lfs用户密码，可以为空<blockquote><p><code>passwd lfs</code></p></blockquote></li><li>将目录所有者改变为lfs<blockquote><p><code>chown -v lfs $LFS/tools</code></p></blockquote></li><li>同时为用户lfs赋予访问$LFS/tools目录的所有权限<blockquote><p><code>chown -v lfs $LFS/sources</code></p></blockquote></li><li>以lfs身份登陆主机</li><li>切换用户并启动shell环境<blockquote><p><code>su - lfs</code></p></blockquote></li></ul><hr><p><strong>1.2.5 设置环境</strong></p><ul><li>通过为bash shell创建两个开机启动文件，来设置合适的工作环境</li><li>以lfs用户的身份来创建一个新的<code>.bash_profile</code>文件<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cat &gt; ~/.bash_profile &lt;&lt; <span class="string">"EOF"</span> </span><br><span class="line">exec env -i <span class="attribute">HOME</span>=<span class="variable">$HOME</span> <span class="attribute">TERM</span>=<span class="variable">$TERM</span> <span class="attribute">PS1</span>=<span class="string">'\u:\w\$ '</span> /bin/bash </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p><strong>具体说明:</strong></p><ul><li>当以lfs用户身份登录时，初始shell通常是一个login的shell</li></ul><ol><li>它先读取宿主机的<code>/etc/profile</code>文件(很可能包括一些设定和环境变量)</li><li>然后是<code>.bash_profile</code>文件</li><li><code>.bash_profile</code>中的命令<code>exec env -i.../bin/bash</code>用一个除了HOME，TERM和PS1变量外</li><li>其他环境完全为空的新shell代替运行中的shell</li><li>这能确保不会有潜在的和意想不到的危险环境变量，从宿主机泄露到构建环境中</li><li>这样做主要是为了确保环境的干净</li></ol><hr><p><strong>1.2.6 配置<code>.bashrc</code>文件</strong></p><ul><li>新的shell实例是一个<code>non-login</code>的shell</li><li>它不会读取<code>/etc/profile</code>或者<code>.bash_profile</code>文件，而是读取<code>.bashrc</code></li><li>创建<code>.bashrc</code>文件:<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cat &gt; ~/.bashrc &lt;&lt; <span class="string">"EOF"</span> </span><br><span class="line"><span class="builtin-name">set</span> +h </span><br><span class="line">umask 022 </span><br><span class="line"><span class="attribute">LFS</span>=/mnt/lfs </span><br><span class="line"><span class="attribute">LC_ALL</span>=POSIX </span><br><span class="line"><span class="attribute">LFS_TGT</span>=$(uname -m)-lfs-linux-gnu </span><br><span class="line"><span class="attribute">PATH</span>=/tools/bin:/bin:/usr/bin </span><br><span class="line"><span class="builtin-name">export</span> LFS LC_ALL LFS_TGT PATH </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p><strong>具体说明:</strong></p><ul><li><code>set +h</code>命令关闭了bash的哈希功能</li><li>设置用户文件新建时的掩码(umask)为 022，以确保新建的文件和目录只有其所有者可写，但任何人都可读可执行</li><li>LFS 变量应设置成选定的挂载点</li><li><code>LC_ALL变量</code>控制某些程序的本地化，使它们的消息遵循特定国家的惯例</li><li>设置<code>LC_ALL</code>为<code>POSIX</code>或<code>C</code>(两者是等价的)，以确保在chroot环境中一切能如期望的那样进行</li><li><code>LFS_TGT变量</code>设置了一个虽非默认，但在构建交叉编译器、连接器和交叉编译临时工作链时，用得上到的兼容的机器说明</li><li>通过把<code>/tools/bin</code>放在标准<code>PATH变量</code>的前面，使得所有在临时主机中安装的程序，一经安装shell便能马上使用</li><li>与之配合的关闭哈希功能，能在临时主机环境中的程序在可用的情况下，限制使用宿主机中旧程序的风险</li></ul><hr><ul><li>1.2.7 启用配置</li><li>最后，启用刚才创建的用户配置</li><li>为构建临时工具完全准备好环境:<blockquote><p><code>source ~/.bash_profile</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>GNU\Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Disk-1</title>
    <url>/2020/02/28/Disk/</url>
    <content><![CDATA[<!-- build time:Mon Mar 02 2020 05:30:05 GMT+0800 (中国标准时间) --><h2 id="Disk-1"><a href="#Disk-1" class="headerlink" title="Disk-1"></a>Disk-1</h2><hr><h3 id="Disk-引导逻辑全过程描述"><a href="#Disk-引导逻辑全过程描述" class="headerlink" title="Disk 引导逻辑全过程描述"></a>Disk 引导逻辑全过程描述</h3><ul><li>磁盘从底层固件引导至操作系统启动所对应的执行逻辑</li><li>本篇内容仅为主观描述，仅供参考</li></ul><p><strong>执行逻辑简述:</strong></p><p>Linux</p><blockquote><p><code>BIOS/UEFI(ROM)-&gt;MBR/GPT/GUID-(LBA/CHS)-&gt;VBR-&gt;grldr-&gt;boot loader-&gt;GRUB/LILO...-&gt;启动整个Linux系统</code></p></blockquote><p>windows</p><blockquote><p><code>BIOS-&gt;MBR-&gt;DPT-&gt;PBR-&gt;Bootmgr-&gt;BCD-&gt;系统选择界面--&gt;选择windows-NT-&gt;Winload.exe-&gt;内核加载等 -&gt;启动整个windows-NT系统</code></p></blockquote><p><strong>文字描述:</strong></p><ol><li><p>先给基于ROM的固件BIOS/UEFI通电(启动/运行)，以加载磁盘主引导程序</p></li><li><p>POST(Power-On Self-Test)，基于BIOS程序进行对本地主机的硬件自检</p></li><li><p>基于对应固件类别来加载引导扇区(Boot Sequence)</p><blockquote><p>BIOS根据Boot Sequence中的顺序，将最前面的存储设备的引导扇区的内容加载到内存中，并跳转到引导程序的第一条指令</p></blockquote></li><li><p>再通过基于主引导记录类型(MBR/GPT/GUID)来指定的寻址模式(LBA/CHS)来寻找已有的开机引导程序(进入磁盘启动环节)</p><blockquote><p>关于MBR与GPT的内容可参考历史文章</p></blockquote></li><li><p>基于某个类别的主引导记录类型利用分区表将控制权转交给硬盘的某个分区</p><blockquote><p>此时在四个主分区里面，只有一个是激活的计算机会读取激活分区的第一个扇区，叫做卷引导记录(Volume Boot Record，缩写为VBR，也可称为分区引导记录，Partition Boot Record，缩写为PBR)<br>卷引导记录的有以下主要作用:<br>寻找激活分区根目录下的grldr(Grub),NTLDR(XP),bootmgr(Win7 above),btldr.mbr(BootLink)等可用于引导的程序</p></blockquote></li><li><p>执行启动管理器(boot loader)，此时卷引导记录搜索到激活分区中的启动管理器，将控制权交给启动管理器运行</p><blockquote><p>boot loader是系统预先安装的程序，用以实现由用户选择启动哪一个操作系统<br>启动管理器寻找激活分区中的启动配置数据(如: Win7中的BCD文件、XP中的boot.ini文件)，根据启动配置数据，在显示器上显示多操作系统选择画面<br>然后选择相应的操作系统<br>最后控制权交给操作系统<br>Linux环境中，目前最流行的启动管理器是Grub<br>在windows下为启动管理器bootmgr(xp中的ntldr文件)</p></blockquote></li><li><p>下一步是将控制权转交给操作系统，以此让操作系统的内核首先被载入内存</p></li><li><p>最后实现磁盘内操作系统的启动</p></li></ol><p><strong>或</strong></p><ol><li>由BIOS/UEFI寻找第一个可启动设备(通常为Disk)</li><li>然后从MBR/GPT/GUID中基于的寻址模式来加载启动程序</li><li>最终把代码控制权交给GRUB(或其它引导程序)</li></ol><ul><li>所谓操作系统的引导过程是将存放在硬盘上的静态的操作系统装载到内存中，并开始执行操作系统的过程</li><li>每一个不同类别的工具都有完全不同的执行逻辑与所执行步骤对应的执行标志，这里先不做过多阐述</li></ul><hr><p><strong>相关概念:</strong></p><ul><li>引导扇区: 主引导记录(主引导扇区)/全局唯一标识符(全局唯一标识分区表)<blockquote><p>MBR/GPT/GUID</p></blockquote></li><li>磁盘引导程序所基于的寻址模式(LBA/CHS)</li><li>LVM/RAID(逻辑卷管理/磁盘阵列)</li><li>BIOS/UEFI(固件系统)</li><li>磁盘/磁盘分区所属数据类型/文件系统</li><li>磁盘映像文件格式</li><li>磁盘驱动/硬件驱动/设备驱动</li><li>扩展分区(Extended partition)和逻辑分区(logical partition)<blockquote><p>扩展引导记录(Extended boot record)缩写为EBR</p></blockquote></li><li>MBR/GPT分区表</li><li>启动管理器(boot loader)</li></ul><hr><p><strong>磁盘缓存(Disk Buffer/Disk Cache)相关概述:</strong></p><ul><li><p>用于将下载到的数据先保存于系统为软件分配的内存空间中(这个内存空间被称之为”内存池”)</p><blockquote><p>当保存到内存池中的数据达到一个程度时，便会将数据保存到硬盘中<br>这样可以减少实际的磁盘操作，有效的保护磁盘免于重复的读写操作而导致的损坏</p></blockquote></li><li><p>磁盘缓存是为了减少CPU透过I/O读取磁盘驱动器的次数</p><blockquote><p>提升磁盘I/O的效率，用一块存储器来存储访问较频繁的磁盘内容<br>因为存储器的访问是电子动作，而磁盘的访问是机械动作，感觉上磁盘I/O变得较为快速</p></blockquote></li><li><p>普遍的磁盘通常有32MB或64MB缓存，现在市售上128MB与256MB也十分常见</p><blockquote><p>旧的硬盘则有8MB或16MB</p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>CN-磁盘缓存<a href="https://zh.wikipedia.org/wiki/%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98</code></p></blockquote></li><li><p>CN-阮一峰-计算机是如何启动的?<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.ruanyifeng.com/blog/2013/02/booting.html</code></p></blockquote></li><li><p>CSDN-操作系统引导过程<a href="https://blog.csdn.net/jonathan321/article/details/51987680" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://blog.csdn.net/jonathan321/article/details/51987680</code></p></blockquote></li><li><p>CSDN-操作系统引导程序学习笔记<a href="https://blog.csdn.net/aice_dachong/article/details/50843240" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://blog.csdn.net/aice_dachong/article/details/50843240</code></p></blockquote></li><li><p>CSDN-操作系统概念：系统引导过程、引导程序、固件<a href="https://blog.csdn.net/qq_36328643/article/details/79922425" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://blog.csdn.net/qq_36328643/article/details/79922425</code></p></blockquote></li></ul><hr><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><p><strong>硬盘的物理结构描述与图解:</strong></p><ul><li>磁盘的物理结构图例-1</li></ul><img src="/images/disk-images/磁盘-1.png" width="20%" height="20%"><ul><li>磁道(Track)</li><li>柱面(Cylinder)</li><li>扇区(Sector)</li><li>磁头(Heads)</li><li>盘片(Platters)</li><li>每个碟片都有两面，因此也会相对应每碟片有2个磁头</li></ul><hr><ul><li>磁盘的物理结构图例-2</li></ul><img src="/images/disk-images/磁盘-6.png" width="20%" height="20%"><ul><li>A: 磁道</li><li>B: 扇面</li><li>C: 扇区</li><li>D: 簇(扇区组)</li><li>在硬盘上定位某一数据记录位置—C扇区，使用了三维定位</li></ul><hr><ul><li>其它磁盘物理结构有关图片</li></ul><img src="/images/disk-images/磁盘-2.png" width="20%" height="20%"> <img src="/images/disk-images/磁盘-3.png" width="20%" height="20%"> <img src="/images/disk-images/磁盘-4.png" width="20%" height="20%"> <img src="/images/disk-images/磁盘-5.png" width="20%" height="20%"><hr><p><strong>图片来源:</strong></p><ul><li><p>CN-简书<a href="https://www.jianshu.com/p/42308db1fcde" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.jianshu.com/p/42308db1fcde</code></p></blockquote></li><li><p>CN Wiki-GPT<a href="https://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8</code></p></blockquote></li><li><p>CN Wiki-磁盘<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Disk</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU GRUB</title>
    <url>/2020/02/28/GNU-GRUB/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GRUB-简述"><a href="#GRUB-简述" class="headerlink" title="GRUB 简述"></a>GRUB 简述</h3><ul><li>概述</li><li>启动过程(逻辑)</li><li>特性(相对于LILO或其它的引导程序)</li><li>相关概念</li></ul><p><strong>概述:</strong></p><ul><li>GNU GRUB，简称GRUB</li><li>基于GNU通用公共许可证</li><li>是一个来自GNU项目的启动引导程序</li><li>GRUB是多启动规范的实现，它允许用户可以在计算机内同时拥有多个操作系统并在计算机启动时选择希望运行的操作系统</li><li>GRUB可用于选择操作系统分区上的不同内核，也可用于向这些内核传递启动参数</li><li>GNU GRUB的前身为Grand Unified Bootloader</li><li>它主要用于类Unix系统</li><li>同大多Linux发行版一样，GNU系统也采用GNU GRUB作为它的启动器</li><li>Solaris从10 1/06版开始在x86系统上也采用GNU GRUB作为启动器</li></ul><hr><p><strong>GRUB启动过程:</strong></p><ol><li>计算机启动后，BIOS将寻找第一个可启动的设备(通常为硬盘)</li><li>而后从MBR中加载启动程序，然后把控制交给这段代码</li><li>MBR位于硬盘的前512字节内</li></ol><ul><li>GRUB第一版的启动过程</li></ul><ol><li>GRUB的步骤1包含在MBR中<blockquote><p>由于受MBR的大小限制，步骤1所做的几乎只是装载GRUB的下一步骤(存放在硬盘的其它位置)</p></blockquote></li><li>步骤1既可以直接装载步骤2，也可以装载步骤1.5: GRUB的步骤1.5包含在MBR后面的30千字节中</li><li>步骤1.5加载步骤2</li><li>当步骤2启动后，它将呈现一个界面来让用户选择启动的操作系统<blockquote><p>这步通常采用的是图形菜单的形式，如果图形方式不可用或者用户需要更高级的控制<br>可以使用GRUB的命令行提示，通过它，用户可以手工指定启动参数<br>GRUB还可以设置超时后自动从某一个内核启动</p></blockquote></li></ol><ul><li>GRUB第二版的启动过程</li><li>与GRUB第一版相似的是，<code>boot.img</code>像步骤1一样在MBR或在启动分区中<blockquote><p>但是，它可以从任何LBA48地址的一个扇区中读取</p></blockquote></li></ul><ol><li>它(boot.img)将读取core.img(产生于diskboot.img)的第一个扇区以用来后面读取core.img的剩余部分</li><li>core.img正常情况下跟步骤1.5储存在同一地方并且有着同样的问题<blockquote><p>可是，当他被移动到一个文件系统或一个纯粹的分区时会比在步骤1.5移动或删除引起更少的麻烦<br>一旦完成读取，core.img会读取默认的配置文件和其他需要的模块</p></blockquote></li></ol><ul><li>当GRUB启动后的执行逻辑(NT内核的特点)</li><li>一旦选择了启动选项，GRUB把选择的内核加载内存并把控制交给内核<blockquote><p>在此步骤中，对于Windows之类不支持多启动标准的操作系统，GRUB也可以通过链式启动把控制传给其它启动器<br>在这种情况下，其它操作系统的启动程序被GRUB保存了下来</p></blockquote></li><li>与内核不同，其它操作系统如同直接自MBR启动<blockquote><p>类似Windows的启动菜单，也许是另一个启动管理器，它允许在多个不支持多启动的操作系统中做进一步的选择<br>在已有Windows的系统上面，或者包含多个Windows版本的系统上安装现代的Linux而不修改原操作系统，即属于这类情况</p></blockquote></li></ul><hr><p><strong>GRUB特点:</strong></p><ul><li><p>GRUB的一个重要的特性是安装它不需依附一个操作系统</p><blockquote><p>但是，这种安装需要一个Linux/Windows副本<br>由于单独工作，GRUB实质上是一个微型系统，通过链式启动的方式，它可以启动所有安装的主流操作系统</p></blockquote></li><li><p>与LILO不同，修改GRUB的配置文件后，不必把GRUB重新安装到MBR或者某个分区中</p></li><li><p>在Linux中，<code>$grub-install</code>命令是用来把GRUB的步骤1安装到MBR或者分区中的</p><blockquote><p>GRUB的配置文件、步骤2以及其它文件必须安装到某个可用的分区中<br>如果这些文件或者分区不可用，步骤1将把用户留在命令行界面</p></blockquote></li><li><p>GRUB Legacy的配置文件</p><blockquote><p>为<code>/boot/grub/menu.lst</code>或<code>/boot/grub/grub.conf</code></p></blockquote></li><li><p>GRUB 2的配置文件</p><blockquote><p>为<code>/boot/grub/grub.conf</code></p></blockquote></li><li><p>除了硬盘外，GRUB也可安装到光盘、软盘和闪存盘等移动介质中</p><blockquote><p>以此引导一台无法从硬盘启动的系统</p></blockquote></li></ul><hr><p><strong>相关概念(关键字):</strong></p><ul><li>LILO</li><li>SYSLINUX</li><li>GRUB</li><li>UEFI</li><li>BIOS</li><li>MBR</li><li>GPT</li><li>NTLDR</li><li>Windows Boot Manager</li></ul><hr><h3 id="GRUB-使用方法与相关指令简述"><a href="#GRUB-使用方法与相关指令简述" class="headerlink" title="GRUB 使用方法与相关指令简述"></a>GRUB 使用方法与相关指令简述</h3><ul><li>grub命令是多重引导程序grub的命令行shell工具</li><li>基本语法:<blockquote><p><code>$grub [options]</code></p></blockquote></li><li>直接键入grub则直接进入grub命令行</li><li>其它参数这里不过过多阐述</li></ul><hr><ul><li><p>正常启动情况下，屏幕上出现grub的启动项选择菜单时按<code>c键</code>也是可以进入<code>grub&gt;</code>状态的</p></li><li><p>grub指令最重要且最常用的功能就是用来启动损坏的或者是LFS的已独立系统</p></li><li><p>用grub的命令来手工启动系统只需要用到四个命令<code>boot</code>，<code>kernel</code>，<code>initrd</code>，<code>boot</code></p></li><li><p>参数<code>--help</code>用于显示帮助信息</p></li><li><p>列出当前电脑上可能的磁盘设备</p><blockquote><p><code>grub&gt; root (hd/sd</code><br>然后按两次TAB键<br>通常会输出硬盘为<code>hd0/hd1</code>或<code>sd0/sd1</code>等</p></blockquote></li><li><p>选择本地主机的安装Linux系统的硬盘</p></li><li><p>比如<code>hd0</code>，执行</p><blockquote><p><code>grub&gt; root (hd0,</code><br>再按两次TAB键<br>通常输出并列出本地主机第一块硬盘上的分区情况<br>此时可以知道哪个是swap交换分区(0x82)或哪个是Linux分区(0x83)</p></blockquote></li><li><p>然后选择可能的/boot目录所在的分区</p><blockquote><p>执行<code>root (hd0, 1)</code>并回车</p></blockquote></li><li><p>查看所选分区是否为<code>/boot</code>所在分区(根目录分区判断)</p><blockquote><p><code>grub&gt; cat /xxx/xxx</code><br>xxx为指定文件目录<br>按两次TAB键</p></blockquote></li><li><p>这里以输入<code>cat /sbin/init</code>来举例，连按两次TAB键之后参考以下两种情况:</p></li></ul><ol><li>如果出现一些init开头的文件，则说明该分区为<code>/</code>所在的分区</li><li>如果没有出现/sbin/init文件，说明(hd0,1)分区仅仅是<code>/boot</code>分区而不是<code>/</code>分区<blockquote><p>此时需要重新输入<code>$root (hd0,N)</code>命令，这里N是某个Linux分区<br>然后再试<code>cat /sbin/init</code>， 直到屏幕上出现<code>/sbin/init</code><br>则说明找到了<code>/</code>分区<br>严格来说，应该是<code>/sbin</code>目录所在的分区</p></blockquote></li></ol><ul><li><p>此指令还可用于判断所选分区内的文件目录与拥有文件，利用所存储文件的类别来判断分区的作用及分区名</p></li><li><p>这里的关键问题是如何确定系统的几个分区: <code>/boot</code>，<code>/</code>与<code>/sbin</code></p></li><li><p>比如输入<code>cat /boot/vm</code>并按两次TAB键</p><blockquote><p>如果出现一些<code>vm</code>开头的文件，比如<code>vmlinuz-2.6.15-26-386</code>说明这里是<code>/boot</code>所在的分区</p></blockquote></li><li><p>再输入<code>cat /boot/initrd</code>并按两次TAB键</p><blockquote><p>如果出现一些<code>initrd</code>开头的文件，比如<code>initrd.img-2.6.15-26-386</code>说明这个<code>/boot</code>所在的分区有<code>initrd</code>即<code>ramdisk</code>镜像</p></blockquote></li></ul><p><strong>通用指令集:</strong></p><ul><li>一般情况下，依次输入以下命令即可以进入(启动)系统<blockquote><p><code>root (hd0,1)</code> # 此时假设<code>/dev/hda2</code>是本地主机的<code>/boot</code>所在的分区<br><code>kernel /boot/vmlinuz-2.6.15-26-386 ro dev=/dev/hda3</code> # 此时假设<code>/dev/hda3</code>是本地主机的根目录<code>/</code>所在的分区<br><code>initrd /boot/initrd.img-2.6.15-26-386</code><br><code>boot</code><br>双引号</p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>CN-WIKI-GNU GRUB<a href="https://zh.wikipedia.org/wiki/GNU_GRUB" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/GNU_GRUB</code></p></blockquote></li><li><p>EN-GNU 官网<a href="https://www.gnu.org/software/grub/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.gnu.org/software/grub/</code></p></blockquote></li><li><p>EN-GNU 手册<a href="https://www.gnu.org/software/grub/manual/grub/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.gnu.org/software/grub/manual/grub/</code></p></blockquote></li><li><p>CN-GRUB 2 中文指南<a href="http://wiki.ubuntu-tw.org/index.php?title=GRUB_2_%E4%B8%AD%E6%96%87%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://wiki.ubuntu-tw.org/index.php?title=GRUB_2_%E4%B8%AD%E6%96%87%E6%8C%87%E5%8D%97</code></p></blockquote></li><li><p>CN-GRUB入门教程(Ubantu论坛)<a href="https://forum.ubuntu.org.cn/viewtopic.php?t=2475" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://forum.ubuntu.org.cn/viewtopic.php?t=2475</code></p></blockquote></li><li><p>EN-mmap.page<a href="https://mmap.page/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://mmap.page/</code></p></blockquote></li><li><p>CN-GRUB指令集整合<a href="https://man.linuxde.net/grub" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://man.linuxde.net/grub</code></p></blockquote></li><li><p>CN-Linux命令大全<a href="https://man.linuxde.net/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://man.linuxde.net/</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Disk</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Toolchain/GNU toolchain</title>
    <url>/2020/02/27/Toolchain-GNU-toolchain/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h2 id="工具链基本概念简述-1"><a href="#工具链基本概念简述-1" class="headerlink" title="工具链基本概念简述-1"></a>工具链基本概念简述-1</h2><ul><li>此模块只做简单的概述与对于概念的浅层理解</li><li>工具环境所需要的包这里不做过多赘述(与工具链无关)</li></ul><hr><h3 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h3><p><strong>概述:</strong></p><ul><li>Toolchain</li><li>在开发软件过程中，一组工具链(toolchain)是一系列用于制作软件程序的工具</li><li>这些工具一般一个接一个地运用，上一个工具的输出即是下一个工具的输入，因此得名</li><li>但工具链这个词汇也可指涉这些工具并无此相依运行的限制</li><li>工具链与集成开发环境形成对照，分别代表了两种不同风格的软件开发环境</li></ul><p><strong>基本构成:</strong></p><ul><li>通常一个软件开发的工具链由以下组成:</li></ul><ol><li>编译器</li><li>链接器 (将源代码/目标代码转换成可执行程序档)</li><li>库 (提供与操作系统之间的界面)</li><li>调试器 (用来测试、调试所产出的程序)</li></ol><hr><h3 id="GNU-工具链"><a href="#GNU-工具链" class="headerlink" title="GNU 工具链"></a>GNU 工具链</h3><p><strong>概述:</strong></p><ul><li>GNU toolchain</li><li>是一个包含了由GNU计划所产生的各种编程工具的集合，由自由软件基金会负责维护工作</li><li>这些工具形成了一条工具链，用于开发应用程序和操作系统</li><li>同时与集成开发环境相对应</li></ul><p><strong>GNU工具链组成:</strong></p><ul><li>GNU make：用于编译和构建的自动工具</li><li>GNU编译器集合 (GCC) 一组多种编程语言的编译器</li><li>GNU Binutils: 包含链接器、汇编器和其它工具的工具集</li><li>GNU Bison: 编译器编译程序，经常和 Flex词法分析器 配合使用</li><li>GNU m4: m4 宏预处理器</li><li>GNU Debugger (GDB):代码调试工具</li><li>GNU构建系统 (autotools):<blockquote><p>Autoconf<br>Autoheader<br>Automake<br>Libtool</p></blockquote></li><li>GNU C Library: GNU C标准函数库</li><li>GNU Classpath</li></ul><hr><h3 id="交叉工具链"><a href="#交叉工具链" class="headerlink" title="交叉工具链:"></a>交叉工具链:</h3><p><strong>概述:</strong></p><ul><li><p>用于提供编译，链接，处理等功能</p></li><li><p>就是为了编译，链接，处理和调试跨平台体系结构的程序代码</p></li><li><p>每次执行工具链软件时，通过带有不同的参数，可以实现编译，链接，处理或者调试等不同的功能</p></li><li><p>从工具链的组成上来说，它一般由多个程序构成，分别对应着各个功能</p></li><li><p>所谓的交叉工具链是由以下两个概念组合而成的:</p></li></ul><ol><li>交叉编译: 是A机器上编译生成，运行在B机器上<blockquote><p>两个机子有不同的机器指令</p></blockquote></li><li>工具链: 一般由编译器，连接器，解释器和调试器组成</li></ol><hr><h3 id="交叉编译器"><a href="#交叉编译器" class="headerlink" title="交叉编译器:"></a>交叉编译器:</h3><ul><li>是指一个在某个系统平台下可以产生另一个系统平台的可执行文件的编译器</li><li>交叉编译器在目标系统平台(开发出来的应用程序序所运行的平台)难以或不容易编译时非常有用</li><li>交叉编译器的存在对于从一个开发主机为多个平台编译代码是非常有必要的</li><li>直接在平台上编译有时行不通，例如在一个嵌入式系统的单片机 ，因为它们没有操作系统，所以直接编译行不通</li><li>交叉编译器和源代码至源代码编译器不同，交叉编译器用于二进制代码的跨平台软件开发<blockquote><p>而源到源编译器是将某种编程语言的程序源代码作为输入<br>生成以另一种编程语言构成的等效源代码的编译器，但两者都是编程工具</p></blockquote></li><li>交叉编译器的基本用法就是将构建环境与目标环境分开</li><li>常在下面几种情况中使用(具体使用方法这里不做过多赘述):<blockquote><p>嵌入式电脑<br>编译多个目标库<br>引导一个新平台(Bootstrapping)<br>程序虚拟机(比如JVM)</p></blockquote></li></ul><hr><ul><li>工具链用途简述:</li><li>GNU工具链在针对嵌入式系统的Linux内核、BSD及其它软件的开发中起着至关重要的作用</li><li>GNU工具链中的部分工具也被Solaris, Mac OS X, Microsoft Windows (via Cygwin and MinGW/MSYS) and Sony PlayStation 3等其它平台直接使用或进行了移植</li></ul><hr><p><strong>工具链相关概念(关键字):</strong></p><ul><li>工具链</li><li>GNU 工具链</li><li>集成开发环境</li><li>编译器/标准库/链接器/调试器</li><li>交叉编译器</li><li>分布式/并发版本控制系统(CVS,Git等等)</li><li>工具链环境</li></ul><hr><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p><strong>工具链环境:</strong></p><ul><li>所谓的工具链环境就是:<blockquote><p>不光包含于工具链的基本组件<br>还包含于各类辅助指令所对应的工具与程序的本地系统环境</p></blockquote></li></ul><hr><h3 id="GNU工具链组件完全性参考"><a href="#GNU工具链组件完全性参考" class="headerlink" title="GNU工具链组件完全性参考:"></a>GNU工具链组件完全性参考:</h3><p><strong>基本工具:</strong></p><ul><li>GNU make: 用于编译和构建的自动工具</li><li>GNU编译器集(GCC): 一组多种编程语言的编译器</li><li>GNU Binutils: 包含链接器，汇编器和其它工具的工具集</li><li>GNU调试工具(GDB): 代码调试工具</li><li>GNU自动化生成工具(autotools): 自动化检查软件编译过程的工具</li></ul><hr><p><strong>工具链体系:</strong></p><ul><li>此部分用于描述工具链的相关概念与结构，以实现对工具链实施完整的分析</li><li>本文选取LFS的工具链来说明工具链体系内的软件包组成及依赖关系</li><li>为了使以上不同类别的所属工具形成一个互相关联且互相依赖的工具链体系</li><li>必须安装与配置以下软件包工具与相关程序及源码来构成与实现其工具链体系的依赖关系</li></ul><p><strong>所需软件一览:</strong></p><p><strong>Binutils(汇编器):</strong></p><ul><li>包含的程序:<blockquote><p><code>addr2line，ar，as，c++filt，elfedit，gprof，ld，ld.bfd</code>，<br><code>nm，objcopy，objdump，ranlib，readelf，size，strings 和 strip</code></p></blockquote></li><li>包含的库:<blockquote><p><code>libiberty，libbfd</code> 和 <code>libopcodes</code></p></blockquote></li></ul><p><strong>GCC(编译器):</strong></p><ul><li>包含的程序:<blockquote><p><code>c++，cc(到 gcc 的链接)，cpp，g++，gcc</code>，<br><code>gcc-ar，gcc-nm，gcc-ranlib，gccbug</code> 和 <code>gcov</code></p></blockquote></li><li>包含的库:<blockquote><p><code>libgcc，libgcov，libgomp，liblto_plugin，libmudflap</code>，<br><code>libquadmath，libssp，libstdc++，libsupc++</code></p></blockquote></li><li>依赖的包: <code>gmp，mpfr，mpc</code></li></ul><p><strong>Linux API Headers:</strong></p><ul><li>这个是可选包，如果是为了做一个通用工具链，必须将其换成相应平台的头文件包</li><li>包含的头文件:<blockquote><p><code>/usr/include/asm/*.h</code>，<code>/usr/include/asm-generic/*.h</code>，<br><code>/usr/include/drm/*.h</code>，<code>/usr/include/linux/*.h</code>，<code>/usr/include/mtd/*.h</code>，<br><code>/usr/include/rdma/*.h</code>，<code>/usr/include/scsi/*.h</code>，<br><code>/usr/include/sound/*.h</code>，<code>/usr/include/video/*.h</code>，<code>/usr/include/xen/*.h</code></p></blockquote></li></ul><p><strong>Glibc:</strong></p><ul><li>可以根据标准LFS系统的制作方法来安装Glic(可以大幅度简化实现难度)</li><li>包含的程序:<blockquote><p><code>catchsegv，gencat，getconf，getent，iconv，iconvconfig</code>，<br><code>ldconfig，ldd，lddlibc4，locale, localedef，makedb，mtrace，nscd</code>，<br><code>pcprofiledump，pldd，pt_chown，rpcgen, sln, sotruss, sprof, tzselect, xtrace, zdump 和 zic</code></p></blockquote></li><li>包含的库:<blockquote><p><code>ld.so</code>，<code>libBrokenLocale</code>，<code>libSegFault</code>，<code>libanl</code>，<code>libbsd-compat</code>，<code>libc</code>，<code>libcidn</code>，<code>libcrypt</code>，<br><code>libdl</code>，<code>libg</code>，<code>libieee</code>，<code>libm</code>，<code>libmcheck</code>，<code>libmemusage</code>，<code>libnsl</code>，<code>libnss</code>，<code>libpcprofile</code>，<code>libpthread</code>，<br><code>libresolv</code>，<code>librpcsvc</code>，<code>librt</code>，<code>libthread_db</code>，<code>libutil</code></p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>CN-WIKI GNU核心工具组<a href="https://zh.wikipedia.org/wiki/GNU%E6%A0%B8%E5%BF%83%E5%B7%A5%E5%85%B7%E7%BB%84" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/GNU%E6%A0%B8%E5%BF%83%E5%B7%A5%E5%85%B7%E7%BB%84</code></p></blockquote></li><li><p>CN-WIKI GNU工具链<a href="https://zh.wikipedia.org/wiki/GNU%E5%B7%A5%E5%85%B7%E9%93%BE" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/GNU%E5%B7%A5%E5%85%B7%E9%93%BE</code></p></blockquote></li><li><p>CN-WIKI 交叉工具链<a href="https://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8</code></p></blockquote></li><li><p>百度百科 交叉工具链<a href="https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E5%B7%A5%E5%85%B7%E9%93%BE/2503696" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E5%B7%A5%E5%85%B7%E9%93%BE/2503696</code></p></blockquote></li><li><p>CN-WIKI 交叉编译器<a href="https://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8</code></p></blockquote></li><li><p>Linux From Scratch (简体中文版/版本: 9.0)<a href="https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf" target="_blank" rel="noopener">跳转</a></p><blockquote><p>Chapter (5.x. 构建临时系统) 与 (5.2. 工具链技术说明)<br><code>https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf</code></p></blockquote></li><li><p>工具链技术分析与实现(GNU 工具链)<a href="https://www.cnblogs.com/Leo_wl/p/3405580.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.cnblogs.com/Leo_wl/p/3405580.html</code></p></blockquote></li></ul><hr><h2 id="补充内容-1"><a href="#补充内容-1" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="工具链技术实现"><a href="#工具链技术实现" class="headerlink" title="工具链技术实现"></a>工具链技术实现</h3><ul><li>GNU 工具链</li></ul><h3 id="工具链的使用方式"><a href="#工具链的使用方式" class="headerlink" title="工具链的使用方式"></a>工具链的使用方式</h3><ul><li><p>工具链的目的是提供一个临时可用的编译工作环境，通过chroot来完成在工具环境中进行开发、编译、制作工作</p></li><li><p>为了制作出干净、可移植的工具环境，建议创建一个专用于制作工具链的用户，这也是LFS推荐的</p></li><li><p>在使用工具链之前，此时的本地环境身份应该是root</p></li><li><p>首先挂载虚拟文件系统，然后进入到chroot环境中</p></li></ul><ol><li><strong>挂载虚拟文件系统</strong></li></ol><ul><li><p>可以将以下代码保存为相应的Shell脚本文件，添加执行权限即可使用</p></li><li><p>使用顺序是先挂载虚拟文件系统、后进入chroot环境</p></li><li><p>下方代码只适用于LFS的构建，可根据需求做适当的变量替换，原理和步骤是相同的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mount -o <span class="built_in">bind</span> /dev <span class="variable">$LFS</span>/dev</span><br><span class="line">mount -t devpts devpts <span class="variable">$LFS</span>/dev/pts -o gid=5,mode=620</span><br><span class="line">mount -t proc proc <span class="variable">$LFS</span>/proc</span><br><span class="line">mount -t sysfs sysfs <span class="variable">$LFS</span>/sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -h <span class="variable">$LFS</span>/dev/shm ]; <span class="keyword">then</span></span><br><span class="line">  link=$(readlink <span class="variable">$LFS</span>/dev/shm)</span><br><span class="line">  mkdir -p <span class="variable">$LFS</span>/<span class="variable">$link</span></span><br><span class="line">  mount -t tmpfs shm <span class="variable">$LFS</span>/<span class="variable">$link</span></span><br><span class="line">  <span class="built_in">unset</span> link</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  mount -t tmpfs shm <span class="variable">$LFS</span>/dev/shm</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>进入到Chroot环境执行以下代码:</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">chroot <span class="string">"<span class="variable">$LFS</span>"</span> /tools/bin/env -i \</span><br><span class="line">    HOME=/root                  \</span><br><span class="line">    TERM=<span class="string">"<span class="variable">$TERM</span>"</span>                \</span><br><span class="line">    PS1=<span class="string">'\u:\w\$ '</span>              \</span><br><span class="line">    PATH=/tools/bin:/tools/sbin:/bin:/usr/bin:/sbin:/usr/sbin \</span><br><span class="line">    /tools/bin/bash --login +h</span><br></pre></td></tr></table></figure><hr><ul><li><p>Linux From Scratch (简体中文版/版本: 9.0)<a href="https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf" target="_blank" rel="noopener">跳转</a></p><blockquote><p>Chapter (5.x. 构建临时系统) 与 (5.2. 工具链技术说明)<br><code>https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf</code></p></blockquote></li><li><p>工具链技术分析与实现(GNU 工具链)<a href="https://www.cnblogs.com/Leo_wl/p/3405580.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.cnblogs.com/Leo_wl/p/3405580.html</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-7</title>
    <url>/2020/02/27/LFS-7/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="LFS-7"><a href="#LFS-7" class="headerlink" title="LFS-7"></a>LFS-7</h3><ul><li>内核编译等内容</li><li>有关GRUB的内容会再做补充</li></ul><hr><h3 id="相关指令-通用执行逻辑简述"><a href="#相关指令-通用执行逻辑简述" class="headerlink" title="相关指令(通用执行逻辑简述)"></a>相关指令(通用执行逻辑简述)</h3><ul><li>清理编译所处环境的内核依赖树<blockquote><p><code>$makemrpoper</code></p></blockquote></li></ul><hr><ul><li><p>通过菜单驱动的界面配置内核</p></li><li><p>BLFS包含一些有关LFS外部软件包的特定内核配置要求的信息<a href="http://www.linuxfromscratch.org/blfs/view/svn/longindex.html#kernel-config-index" target="_blank" rel="noopener">BLFS-kernel</a></p></li><li><p>基本语法</p><blockquote><p><code>make LANG=&lt;host_LANG_value&gt; LC_ALL= menuconfig</code></p></blockquote></li><li><p>参数含义:</p><blockquote><p>make将语言环境设置建立为主机上使用的语言环境设置(这个参数建立主机上使用的locale设置)<br>UTF-8 的linux文本控制台上的菜单配置ncurses 接口线图需要这个值<br>确保用主机上的<code>$LANG变量代替&lt;host_LANG_value&gt;(还可以说是用主机中变量&lt;host_LANG_value&gt;的值替换$LANG)</code><br>如果主机没有设置，还可以使用<code>$LC_ALL或$LC_CTYPE</code>的值代替</p></blockquote></li><li><p>另外在某一些场合使用<code>$make oldconfig</code>可能更合适</p><blockquote><p>更多信息可参考README文件</p></blockquote></li><li><p>还有一种方法，可以跳过配置内核的步骤</p><blockquote><p>直接把宿主系统里的内核配置文件<code>.config</code>(如果存在的话)复制到解压后的linux-2.6.32.8目录<br>FLS官方说明这里不推荐这么去做<br>考察全部的配置菜单并从头开始创建内核配置是更好的办法</p></blockquote></li></ul><hr><ul><li><p>编译内核映像和所选模块</p><blockquote><p>make</p></blockquote></li><li><p>参数说明</p><blockquote><p>如果使用内核模块，可能需要<code>/etc/modprobe.d</code>目录中的模块配置<br>关于模块和内核配置的信息请参考 Section 7.9内的LFS 系统的设备和模块处理内容和linux-2.6.32.8/Documentation目录的内核文档<br><code>modprobe.conf(5)</code>也可能有用</p></blockquote></li></ul><hr><ul><li><p>如果内核配置使用模块，执行模块安装指令:</p><blockquote><p><code>make modules_install</code></p></blockquote></li><li><p>当内核编译完成后，还需要一些步骤来完成安装</p></li><li><p>比如需要把一些文件拷贝到/boot目录</p></li></ul><hr><ul><li><p>内核镜像文件所在的路径因所处主机使用的平台不同而不同</p></li><li><p>下面的文件名可以更改为符合本地主机的配置</p></li><li><p>但为了与下一节描述的启动过程的自动安装兼容，文件名的词干应该是vmlinux</p></li><li><p>x86平台上运行以下命令:</p><blockquote><p><code>cp -v arch/x86/boot/bzImage /boot/vmlinux-2.6.32.8-lfs-6.6</code></p></blockquote></li><li><p>System.map是内核的符号文件</p></li><li><p>它映射了内核API中每个函数的入口， 以及正在运行内核的数据结构的地址</p></li><li><p>在调查内核问题时，使用它作为一种资源， 运行以下的命令安装此文件:</p><blockquote><p><code>cp -v System.map /boot/System.map-2.6.32.8</code></p></blockquote></li><li><p>上面<code>make menuconfig</code>这一步产生的内核配置文件<code>.config</code>包含了刚刚编译的内核的所有配置选项</p></li><li><p>最好保留这个文件以备将来参考:</p><blockquote><p><code>cp -v .config /boot/config-2.6.32.8</code></p></blockquote></li><li><p>安装Linux内核文档:</p><blockquote><p><code>install -d /usr/share/doc/linux-2.6.32.8</code><br><code>cp -r Documentation/* /usr/share/doc/linux-2.6.32.8</code></p></blockquote></li></ul><hr><p><strong>配置Linux模块装载顺序:</strong></p><ul><li><p>需要创建<code>/etc/modprobe.d/usb.conf</code>文件</p><blockquote><p>以便如果将USB驱动(<code>ehci_hcd， ohci_hcd 和uhci_hcd</code>)编译成模块时，它们会按正确的顺序装载<br>为了避免在启动时出现警告，<code>ehci_hcd</code>必须在<code>ohci_hcd和uhci_hcd</code>之前装载</p></blockquote></li><li><p>通过运行下面的命令来建立一个新文件/etc/modprobe.d/usb.conf:</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">install -v -m755 -d <span class="string">/etc/modprobe.d</span></span><br><span class="line">cat &gt; <span class="string">/etc/modprobe.d/usb.conf</span> &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"><span class="comment"># Begin /etc/modprobe.d/usb.conf</span></span><br><span class="line"></span><br><span class="line">install ohci_hcd <span class="string">/sbin/modprobe</span> ehci_hcd ; <span class="string">/sbin/modprobe</span> -i ohci_hcd ; <span class="literal">true</span></span><br><span class="line">install uhci_hcd <span class="string">/sbin/modprobe</span> ehci_hcd ; <span class="string">/sbin/modprobe</span> -i uhci_hcd ; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># End /etc/modprobe.d/usb.conf</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>注意事项:</strong></p><ul><li><p>重要的一点是要注意到内核源码目录里的文件所有者不是root</p><blockquote><p>只要是用 root(像在chroot环境里做的那样)用户解压软件包，解压出来的文件的用户和组ID是这个软件包打包者计算机上的用户和组ID<br>对于其它软件包， 这通常不是问题， 因为安装完这些软件包之后源码目录就删除了<br>但是 Linux 内核源码树常常会保存很长的时间， 这样就有可能打包者的用户 ID 和您计算机上某个用户的 ID 相同<br>从而让您计算机上的这个用户获得了内核源码的写权限</p></blockquote></li><li><p>如果准备保留内核源代码，在<code>linux-2.6.32.8</code>目录上执行<code>chown -R 0:0</code>命令以确保全部文件的所有者是<code>root</code></p></li><li><p>一些内核文档建议建立一个从<code>/usr/src/linux</code>指向源码目录的符号链接</p><blockquote><p>这只是一个对 2.6 以前版本内核的特殊要求，并且在 LFS 系统上是不允许这样做的<br>因为基本的LFS系统完成以后，安装其他软件包时可能会因此而引起问题</p></blockquote></li><li><p>系统include目录中的头问题件应该总是保持Glibc编译时的那个版本</p><blockquote><p>这也是Linux内核tar包中的干净的头文件<br>因而，它们绝不要被替换成原始的内核头文件和其他干净的头文件</p></blockquote></li></ul><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><ul><li><p>LFS-v6.3<a href="http://www.linuxfromscratch.org/lfs/view/6.3/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/</code></p></blockquote></li><li><p>LFS-v9.3 重新启动系统<a href="http://www.linuxfromscratch.org/lfs/view/6.3/chapter09/reboot.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/chapter09/reboot.html</code></p></blockquote></li><li><p>CSDN参考资料<a href="https://blog.csdn.net/Sugar_girl/article/details/78713316" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://blog.csdn.net/Sugar_girl/article/details/78713316</code></p></blockquote></li><li><p>LFS内核配置全面信息<a href="http://www.linuxfromscratch.org/hints/downloads/files/kernel-configuration.txt" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/hints/downloads/files/kernel-configuration.txt</code></p></blockquote></li><li><p>LFS-v6.3-第八章第三节<a href="http://www.linuxfromscratch.org/lfs/view/6.3/chapter08/kernel.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/chapter08/kernel.html</code></p></blockquote></li><li><p>Beyond Linux From Scratch (System V Edition) - Version 2020-02-27<a href="http://www.linuxfromscratch.org/lfs/view/6.3/chapter08/kernel.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/blfs/view/svn/longindex.html#kernel-config-index</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-6</title>
    <url>/2020/02/26/LFS-6/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="LFS-6"><a href="#LFS-6" class="headerlink" title="LFS-6"></a>LFS-6</h2><hr><h3 id="LFS实现逻辑补充"><a href="#LFS实现逻辑补充" class="headerlink" title="LFS实现逻辑补充"></a>LFS实现逻辑补充</h3><p><strong>LFS的实现大致可分为以下四个阶段:</strong></p><ul><li>一阶段</li></ul><p>1.创建目标系统目录<br>2.创建临时系统目录</p><ul><li>二阶段</li></ul><p>3.建立预工具链</p><ul><li>三阶段</li></ul><p>4.建立临时系统<br>5.建立目标工具链</p><ul><li>四阶段</li></ul><p>6.建立目标系统<br>7.收尾工作</p><hr><h2 id="临时系统"><a href="#临时系统" class="headerlink" title="临时系统"></a>临时系统</h2><ol start="3"><li><strong>建立预工具链</strong></li></ol><ul><li><p>预工具链</p></li><li><p>汇编器Binutils，编译器GCC，标准库Glibc</p></li><li><p>以及主系统(内核头接口/API headers)</p><blockquote><p>API headers/GCC/BIN/GLI</p></blockquote></li><li><p>调整工具链</p><blockquote><p>每次安装完工具链想用工具集时都需要适当的调整工具链并对工具链进行测试</p></blockquote></li><li><p>Glibc编译过程中需要设置内核版本参数(可忽略小版本只写大版本)</p></li><li><p>二次安装工具目录(GCC/Bintils)</p></li><li><p>Tcl-v8.4</p></li><li><p>Expect-v5.4</p></li><li><p>DejaGNU-v1.4</p></li><li><p>GCC-Pass2</p></li><li><p>Binutils-Pass2</p></li><li><p>其它辅助程序(工具)</p></li><li><p>Tcl/Expect/DejaGNU为代码(二进制)编译文件测试工具</p><blockquote><p><code>$make check</code></p></blockquote></li></ul><hr><h3 id="预工具链安装逻辑"><a href="#预工具链安装逻辑" class="headerlink" title="预工具链安装逻辑:"></a>预工具链安装逻辑:</h3><ol><li>Binutils-2.17 - Pass 1</li><li>GCC-4.1.2 - Pass 1</li><li>Linux-2.6.22.5 API Headers</li><li>Glibc-2.5.1</li><li>Adjusting the Toolchain(调整工具链)</li><li>Tcl-8.4.15</li><li>Expect-5.43.0</li><li>DejaGNU-1.4.4</li><li>GCC-4.1.2 - Pass 2</li><li>Binutils-2.17 - Pass 2</li><li>其它辅助工具</li></ol><hr><p><strong>所对应LFS内章节内容:</strong></p><ol start="5"><li>Constructing a Temporary System(建立一个临时系统)</li></ol><ul><li>Introduction (介绍与说明)</li><li>Toolchain Technical Notes (工具链技术说明)</li><li>Binutils-2.17 - Pass 1 (汇编器)</li><li>GCC-4.1.2 - Pass 1 (编译器)</li><li>Linux-2.6.22.5 API Headers (内核接口)</li><li>Glibc-2.5.1 (标准库)</li><li>至</li><li>Util-linux-2.12r (UTIL)</li><li>Stripping (抛离)</li><li>Changing Ownership (改变所有权)</li><li>临时系统建立至此截止</li></ul><hr><h2 id="目标系统"><a href="#目标系统" class="headerlink" title="目标系统"></a>目标系统</h2><p><strong>第一步(进行必要配置):</strong></p><ol><li>建立目标系统的文件目录结构</li><li>创建与配置必要软链接</li><li>创建root及nobody用户和必要的组</li><li>此时可以选择是否重新加载bash</li><li>加载以使root用户起效</li><li>创建和设置几个临时文件和日志文件</li></ol><p><strong>第二步(建立目标工具链):</strong></p><ul><li>包括安装逻辑说明</li><li>Linux-2.6.22.5 API Headers - 1</li><li>Man-pages-2.63 - 2</li><li>Glibc-2.5.1 - 3</li><li>Re-adjusting the Toolchain(工具链调试) - 4</li><li>Binutils-2.17 - 5</li><li>GCC-4.1.2 - 6</li><li>其它辅助工具 (Shell/Bash，M4，Autotools等等) - 7</li><li>至此，一直到所有软件安装完毕后，进行工具链调试(v6.3的FSL中最后一个工具通常是vim)</li><li>之后退出chroot环境，设置启动脚本</li><li>下一步即为第七章-设置系统启动脚本然后进行最终的内核编译(Kernel Compile)</li></ul><hr><h3 id="建立目标工具链以及目标工具链环境"><a href="#建立目标工具链以及目标工具链环境" class="headerlink" title="建立目标工具链以及目标工具链环境:"></a>建立目标工具链以及目标工具链环境:</h3><p><strong>参考章节</strong></p><p><strong>三.建立LFS系统(III.Building the LFS System)</strong></p><ol start="6"><li>Installing Basic System Software (6.安装基本系统软件)</li></ol><ul><li>Introduction (介绍)</li><li>Preparing Virtual Kernel File Systems (准备虚拟内核文件系统)</li><li>Package Management (包装管理)</li><li>Entering the Chroot Environment (进入Chroot环境)</li><li>Creating Directories (创建目录)</li><li>Creating Essential Files and Symlinks (创建基本文件和符号链接)</li><li>Linux-2.6.22.5 API Headers (Linux-2.6.22.5 API标头)</li><li>Man-pages-2.63 (Man-帮助手册)</li><li>Glibc-2.5.1 (标准库)</li><li>Re-adjusting the Toolchain (重新调整工具链)</li><li>Binutils-2.17 (汇编器)</li><li>GCC-4.1.2 (编译器)</li><li>至</li><li>About Debugging Symbols (调试符相关内容)</li><li>Stripping Again (再次抛离)</li><li>Cleaning Up (清理环境)</li><li>目标系统环境已搭建完毕</li></ul><hr><h3 id="系统启动脚本设置与编译-包括编写"><a href="#系统启动脚本设置与编译-包括编写" class="headerlink" title="系统启动脚本设置与编译(包括编写)"></a>系统启动脚本设置与编译(包括编写)</h3><p><strong>参考自LFS英文版第七章内容:</strong><br><strong>7. Setting Up System Bootscripts</strong></p><ul><li>介绍 (Introduction)</li><li>LFS-Bootscripts-6.3 (LFS-boot 脚本)</li><li>至</li><li>创建到设备的自定义符号链接 (Creating Custom Symlinks to Devices)</li><li>配置网络脚本 (Configuring the network Script)</li></ul><p><strong>配置逻辑说明:</strong></p><ol><li>编译并安装 LFS-Bootscripts-6.3 (LFS-Bootscripts-6.3)</li><li>配置LFS系统上的设备和模块处理 (Device and Module Handling on an LFS System)</li><li>配置setclock脚本 (Configuring the setclock Script)</li><li>配置Linux控制台 (Configuring the Linux Console)</li><li>配置sysklogd脚本 (Configuring the sysklogd Script)</li><li>创建/etc/inputrc文件 (Creating the /etc/inputrc File)</li><li>Bash Shell启动文件 (The Bash Shell Startup Files)</li><li>配置本地网脚本 (Configuring the localnet Script)</li><li>定制/etc/hosts文件 (Customizing the /etc/hosts File)</li><li>创建到设备的自定义符号链接 (Creating Custom Symlinks to Devices)</li><li>配置网络脚本 (Configuring the network Script)</li></ol><ul><li>至此结束系统启动脚本配置，下一步即为内核编译</li></ul><hr><h3 id="配置LFS系统引导项-内核编译"><a href="#配置LFS系统引导项-内核编译" class="headerlink" title="配置LFS系统引导项(内核编译)"></a>配置LFS系统引导项(内核编译)</h3><p><strong>参考自FLS文档第八章</strong><br><strong>8. Making the LFS System Bootable</strong></p><p><strong>配置逻辑介绍(参考内容):</strong></p><ol><li>介绍 (Introduction)</li><li>创建/etc /fstab文件 (Creating the /etc/fstab File)</li><li>Linux-2.6.22.5 (Linux-2.6.22.5编译，配置并安装)</li><li>使LFS系统可启动 (Making the LFS System Bootable)</li></ol><ul><li>相关指令集可参考官方文档</li><li>有关第三项的详细说明与配置参考下一篇文章</li></ul><hr><p><strong>其它内容:</strong></p><ul><li>具体配置内容与描述可参考官方文档(EN/CN)</li><li>这里使用的是LFS官方的LiveCD，官方早已停止维护，所以版本已经很老了</li><li>最新的版本是<code>lfslivecd-x86_64-6.3-r2145.iso</code>(614.510KB)-2007</li><li>这里使用的版本是<code>lfslivecd-x86-6.3-r2145.iso</code>(32位版本/648.638KB)-2007</li><li>在<a href="http://unit-serow.com/2020/02/22/LFS-1/#more" target="_blank" rel="noopener">LFS-1</a>这篇文章内有有关LFS所有资料的链接<blockquote><p><code>http://unit-serow.com/2020/02/22/LFS-1/#more</code></p></blockquote></li></ul><hr><ul><li>对于目标系统中的任何工具的编译完成之后，最好进行编译文件(二进制文件)测试是否正确且可用</li><li>即便有错误，只要不是太多或可以通过下一步的应用测试，就可以先无视掉</li><li>等到目标系统内核建立并编译完成之后再对目标Debug进行修补与维护</li><li>测试指令(测试动态链接库): <code>$make check</code></li><li>测试时间长短由工具决定</li><li>有些二进制包在测试时可能会发生几处无关紧要的错误，但不会影响安装和正常使用<blockquote><p>比如类似于找不到man的动态链接库之类的错误</p></blockquote></li><li>有时测试不能顺利结束，可以根据报错来判断问题所在<blockquote><p>多半是文件依赖，动态库，文件映射或配置文件缺失等问题</p></blockquote></li></ul><hr><h3 id="需调整工具链"><a href="#需调整工具链" class="headerlink" title="需调整工具链:"></a>需调整工具链:</h3><ul><li><p>工具链一(预/临时工具链):</p><blockquote><p>预工具链与临时工具链(GCC/Glibc/Binutils/Linux Kernel API Headers)<br>调整specs文件<br>调试与测试所属工具链环境</p></blockquote></li><li><p>工具链二(目标工具链):</p><blockquote><p>目标工具链(GCC/Glibc/Linux Kernel API Headers/Binutils/Man-pages)<br>调整specs文件<br>调试与测试所属工具链环境</p></blockquote></li><li><p>最后执行Strip命令并进入新的chroot环境</p></li><li><p>即为拥有两次抛离过程</p><blockquote><p>第一次是主系统-临时系统<br>第二次是临时系统-目标系统<br>最后保证目标系统可以独立运行并将其独立(完全抛离原系统)</p></blockquote></li></ul><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>具体的配置代码与安装代码可参考LFS官方中/英文书籍</li><li>CN-参考资料FSL为6.3版本<a href="http://www.linuxfromscratch.org/lfs/view/6.3/index.html" target="_blank" rel="noopener">跳转</a><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/index.html</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-5</title>
    <url>/2020/02/26/LFS-5/</url>
    <content><![CDATA[<!-- build time:Mon Mar 02 2020 05:24:05 GMT+0800 (中国标准时间) --><h2 id="LFS-5"><a href="#LFS-5" class="headerlink" title="LFS-5"></a>LFS-5</h2><ul><li>应用笔记以及经验总结</li></ul><hr><h3 id="首要逻辑说明"><a href="#首要逻辑说明" class="headerlink" title="首要逻辑说明:"></a>首要逻辑说明:</h3><ul><li>编译工具就是汇编工具与语言编译器(Binutils/GCC)</li><li>汇编工具，语言编译器，对应语言标准库被合称为工具链(Binutils/GCC/Glibc)<blockquote><p>工具链的配置即为以上三个工具的配置<br>因为让编译工具生成可执行文件需要对应标准库，所以这里将标准库算到工具链内(严格来说标准库并不是工具)</p></blockquote></li><li>辅助命令</li><li>文件(目录)映射</li></ul><hr><ol><li>创建目标系统目录</li><li>创建临时系统目录</li><li>建立预工具链</li><li>建立临时系统</li><li>建立目标工具链</li><li>建立目标系统</li><li>收尾工作</li></ol><hr><p><strong>作用解释:</strong></p><ul><li><code>CC=&quot;gcc -B/usr/bin&quot;</code></li><li>在第一遍编译GCC中是调用/tools内的gcc<blockquote><p>调用GCC作为编译器，指定GCC运行环境为/usr/bin</p></blockquote></li><li>在第一遍编译Binutils时是调用/tools内的GCC，接下来指定链接器指向</li><li>在第二遍编译Binutils中是在调用host中的GCC</li></ul><hr><p><strong>注意事项(相关内容):</strong></p><ul><li>设置工具链的时候必须保证工具处于可用状态</li><li>有些程序和工具可能需要编译及安装两遍以上</li><li>在目标机器内Glibc的测试比较容易出现错误，比如机器慢就有可能出现超时的错误<blockquote><p>还有一些能引起错误的LFS手册上有所提及<br>类似于超时这种 错误有时候很难避免<br>只能跳过去或进行多次编译以及安装</p></blockquote></li><li>跳过对于目标机器内Glibc及其工具链的测试</li><li>有一两个Error就忽略吧</li><li>测试代码并统计<blockquote><p><code>$make check</code><br>测试统计有可能会出现个别失败<br>有时会完全成功</p></blockquote></li><li>参考资料均来自十年前(最少)</li><li>参考资料本身没什么太大问题</li></ul><hr><h3 id="问题一览"><a href="#问题一览" class="headerlink" title="问题一览"></a>问题一览</h3><ul><li>待解决问题<blockquote><p>v6.2 无内核头部配置文件<br>v6.3 第二次编译C函数库(Glibc)时出错<br>v6.3 目标工具链-Binutils编译出现错误，没有通过测试，并且已无视<br>v6.3 目标工具链-GCC编译出现几处错误，但不影响使用并已成功通过安装测试与应用测试<br>v6.3 测试Automake-1.10工具源代码编译文件时出现三个错误，但无伤大雅<br>v6.3 Linux内核编译出现问题(kernel version:2.6.22.5)<br>v6.3 找不到GCC</p></blockquote></li></ul><hr><ul><li>目标机器内的Glibc标准函数库测试错误问题已解决</li><li>目标机器内的GCC编译器问题已解决</li><li>目标工具链内的GCC安装与应用测试成功</li><li>编译Coreutils-6.9出现两处Error<blockquote><p>动态链接库测试中编译帮助文件<code>man目录</code>失效<br><code>BEGIN failed--compilation aborted at ./help2man line 28</code><br>离开<code>*/man</code>目录<br>已经无视，并且进行代码测试后也是这个问题</p></blockquote></li><li>Procps-3.2.7(Top)<blockquote><p><code>collect2: ld returned 1 exit status</code><br>make停止<br>安装失败</p></blockquote></li><li>Perl-5.8.8<blockquote><p>动态链接库测试中编译出现两条错误<br>并不妨碍正常编译安装，并且编译安装成功</p></blockquote></li><li>Readline-5.2<blockquote><p>动态链接库测试中编译出现一条错误<br>并不妨碍正常编译安装，并且编译安装成功</p></blockquote></li><li>Automake-1.10<blockquote><p>动态链接库测试中编译出现三条错误<br>并不妨碍正常编译安装，并且编译安装成功</p></blockquote></li><li>Psmisc-22.5<blockquote><p>cannot find tinfo，ncurses or termcap libraries<br>无法找到无法找到tinfo、ncurses或termcap库<br>编译失败</p></blockquote></li><li>Udev-113<blockquote><p>make test测试与安装无错误</p></blockquote></li><li>到达第七章与第八章之间的退出chroot出现问题<blockquote><p>根据LFS官方手册配置，进入新的系统环境下GCC丢失<br>未解决</p></blockquote></li></ul><hr><p><strong>错误补充</strong></p><ul><li>Coreutils-6.9动态库链接的测试编译有一处错误，原因关于man</li><li>perl-5.8.8的test测试出现未知错误两处(测试静态库)</li><li>automake-1.10<blockquote><p>动态库链接测试编译出现三处错误<br>[check-TESTS] ERROR 1<br>[check-am] Error 2<br>[check-recursive] Error 3<br>但能顺利结束并编译安装</p></blockquote></li><li>Findutils-4.2.31<blockquote><p>编译测试出现三次错误<br>check-DEJAGNU Error 1<br>check-am Error 2<br>[check-recursive] Error 3</p></blockquote></li><li>IPRoute2-2.6.20-070313<blockquote><p>编译错误<br>[arpd] Error1<br>[all] Error 2</p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>开源中国<a href="https://www.oschina.net/" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://www.oschina.net/</code></p></blockquote></li></ul><hr><ul><li>LFS注册<a href="http://www.linuxfromscratch.org/cgi-bin/lfscounter.php" target="_blank" rel="noopener">跳转</a><blockquote><p><code>http://www.linuxfromscratch.org/cgi-bin/lfscounter.php</code></p></blockquote></li></ul><hr><ul><li>LFS-6.3版本<a href="http://www.linuxfromscratch.org/lfs/view/6.3/" target="_blank" rel="noopener">跳转</a><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/</code></p></blockquote></li></ul><hr><ul><li>LFS-6.3内核编译(kernel version:2.6.22.5)<a href="http://www.linuxfromscratch.org/lfs/view/6.3/chapter08/kernel.html" target="_blank" rel="noopener">跳转</a><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/chapter08/kernel.html</code></p></blockquote></li></ul><hr><ul><li>冲天飞豹Blog(已经挂了)<blockquote><p><code>http://youbest.cublog.cn/</code></p></blockquote></li></ul><hr><ul><li>LFS-PDF<a href="https://pan.baidu.com/s/1nZARmQlO63fh5BVGug4gPg" target="_blank" rel="noopener">跳转</a><blockquote><p>链接:<code>https://pan.baidu.com/s/1nZARmQlO63fh5BVGug4gPg</code><br>提取码:414z</p></blockquote></li></ul><hr><h3 id="重要工具与程序简述-小部分-最新版本"><a href="#重要工具与程序简述-小部分-最新版本" class="headerlink" title="重要工具与程序简述(小部分/最新版本):"></a>重要工具与程序简述(小部分/最新版本):</h3><ul><li><p><code>Glibc (2.30) - 16,189 KB:</code></p><blockquote><p>主页: <code>http://www.gnu.org/software/libc/</code><br>下载: <code>http://ftp.gnu.org/gnu/glibc/glibc-2.30.tar.xz</code><br>MD5 校验和: <code>2b1dbdf27b28620752956c061d62f60c</code></p></blockquote></li><li><p><code>GCC (9.2.0) - 68,953 KB:</code></p><blockquote><p>主页: <code>https://gcc.gnu.org/</code><br>下载: <code>http://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.xz</code><br>MD5 校验和: <code>3818ad8600447f05349098232c2ddc78</code></p></blockquote></li><li><p><code>Linux (5.2.8) - 104,555 KB:</code></p><blockquote><p>主页: <code>https://www.kernel.org/</code><br>下载: <code>https://www.kernel.org/pub/linux/kernel/v5.x/linux-5.2.8.tar.xz</code><br>MD5 校验和: <code>602dd0ecb8646e539fefb2beb6eb6fe0</code></p></blockquote></li><li><p><code>Binutils (2.32) - 20,288 KB:</code></p><blockquote><p>主页: <code>http://www.gnu.org/software/binutils/</code><br>下载: <code>http://ftp.gnu.org/gnu/binutils/binutils-2.32.tar.xz</code><br>MD5 校验和: <code>0d174cdaf85721c5723bf52355be41e6</code></p></blockquote></li><li><p><code>GRUB (2.04) - 6,245 KB:</code></p><blockquote><p>主页: <code>http://www.gnu.org/software/grub/</code><br>下载: <code>https://ftp.gnu.org/gnu/grub/grub-2.04.tar.xz</code><br>MD5 校验和: <code>5aaca6713b47ca2456d8324a58755ac7</code></p></blockquote></li><li><p><code>LFS-Bootscripts (20190524) - 32 KB:</code></p><blockquote><p>下载: <code>http://www.linuxfromscratch.org/lfs/downloads/9.0/lfs-bootscripts-20190524.tar.xz</code><br>MD5 校验和: <code>c91b11e366649c9cec60c2552820fed5</code></p></blockquote></li></ul><hr><ul><li><p><code>Autoconf (2.69) - 1,186 KB:</code></p><blockquote><p>主页：<code>http://www.gnu.org/software/autoconf/</code><br>下载：<code>http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz</code><br>MD5 校验和：<code>50f97f4159805e374639a73e2636f22e</code></p></blockquote></li><li><p><code>Automake (1.16.1) - 1,499 KB:</code></p><blockquote><p>主页：<code>http://www.gnu.org/software/automake/</code><br>下载：<code>http://ftp.gnu.org/gnu/automake/automake-1.16.1.tar.xz</code><br>MD5 校验和：<code>53f38e7591fa57c3d2cee682be668e5b</code></p></blockquote></li><li><p><code>Bash (5.0) - 9,898 KB:</code></p><blockquote><p>主页：<code>http://www.gnu.org/software/bash/</code><br>下载：<code>http://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz</code><br>MD5 校验和：<code>2b44b47b905be16f45709648f671820b</code></p></blockquote></li><li><p><code>File (5.37) - 867 KB:</code></p><blockquote><p>主页：<code>https://www.darwinsys.com/file/</code><br>下载: <code>ftp://ftp.astron.com/pub/file/file-5.37.tar.gz</code><br>MD5 校验和： <code>80c29aca745466c6c24d11f059329075</code></p></blockquote></li><li><p><code>Libtool (2.4.6) - 951 KB:</code></p><blockquote><p>主页：<code>http://www.gnu.org/software/libtool/</code><br>下载：<code>http://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.xz</code><br>MD5 校验和：<code>1bfb9b923f2c1339b4d2ce1807064aa5</code></p></blockquote></li><li><p><code>M4 (1.4.18) - 1,180 KB:</code></p><blockquote><p>主页：<code>http://www.gnu.org/software/m4/</code><br>下载：<code>http://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz</code><br>MD5 校验和：<code>730bb15d96fffe47e148d1e09235af82</code></p></blockquote></li><li><p><code>Make (4.2.1) - 1,932 KB:</code></p><blockquote><p>主页：<code>http://www.gnu.org/software/make/</code><br>下载：<code>http://ftp.gnu.org/gnu/make/make-4.2.1.tar.gz</code><br>MD5 校验和：<code>7d0dcb6c474b258aab4d54098f2cf5a7</code></p></blockquote></li><li><p><code>OpenSSL (1.1.1c) - 8,657 KB:</code></p><blockquote><p>主页：<code>https://www.openssl.org/</code><br>下载：<code>https://www.openssl.org/source/openssl-1.1.1c.tar.gz</code><br>MD5 校验和：<code>15e21da6efe8aa0e0768ffd8cd37a5f6</code></p></blockquote></li></ul><hr><ul><li><p><code>Gawk (5.0.1) - 3,063 KB:</code></p><blockquote><p>主页：<code>http://www.gnu.org/software/gawk/</code><br>下载：<code>http://ftp.gnu.org/gnu/gawk/gawk-5.0.1.tar.xz</code><br>MD5 校验和：<code>f9db3f6715207c6f13719713abc9c707</code></p></blockquote></li><li><p><code>Util-linux (2.34) - 4,859 KB:</code></p><blockquote><p>主页：<code>http://freecode.com/projects/util-linux</code><br>下载：<code>https://www.kernel.org/pub/linux/utils/util-linux/v2.34/util-linux-2.34.tar.xz</code><br>MD5 校验和：<code>a78cbeaed9c39094b96a48ba8f891d50</code></p></blockquote></li><li><p><code>Zlib (1.2.11) - 457 KB:</code></p><blockquote><p>主页：<code>https://www.zlib.net/</code><br>下载：<code>https://zlib.net/zlib-1.2.11.tar.xz</code><br>MD5 校验和：<code>85adef240c5f370b308da8c938951a68</code></p></blockquote></li></ul><hr><p><strong>补丁:</strong></p><ul><li><p><code>Coreutils 国际化修复补丁 - 168 KB:</code></p><blockquote><p>下载：<code>http://www.linuxfromscratch.org/patches/lfs/9.0/coreutils-8.31-i18n-1.patch</code><br>MD5 校验和：<code>a9404fb575dfd5514f3c8f4120f9ca7d</code></p></blockquote></li><li><p><code>Glibc FHS 补丁 - 2.8 KB:</code></p><blockquote><p>下载：<code>http://www.linuxfromscratch.org/patches/lfs/9.0/glibc-2.30-fhs-1.patch</code><br>MD5 校验和：<code>9a5997c3452909b1769918c759eff8a2</code></p></blockquote></li></ul><hr><h3 id="已解决问题一览"><a href="#已解决问题一览" class="headerlink" title="已解决问题一览"></a>已解决问题一览</h3><ul><li>如果实在找不到GCC且有难以解决的问题，可以先利用已有的临时主机中的/tools目录来对目标主机进行错误与空白修补</li><li>各参数作用这里不做过多赘述，可参考LFS官方手册</li></ul><hr><ul><li>参考自LFS-v6.3版本第6.4-Entering the Chroot Environment至6.59-Stripping Again章节</li><li>第七章末尾找不到GCC的问题已解决<blockquote><p>需要先完全配置才能去抛离上一级系统目录环境(此时需要脱离的是临时系统)<br>在第六章开头理解出问题了<br>在查询了FSL官方的英文文档之后<br>发现退出chroot的代码只需要执行一遍<br>chroot及附带配置的作用是抛离前(是属于目标系统的)的配置<br>使用Strip对文件(二进制压缩包)进行清理</p></blockquote></li></ul><p><strong>可参考以下指令:</strong></p><ol><li><p>退出chroot环境:</p><blockquote><p><code>$logout</code></p></blockquote></li><li><p>为Strip而进入chroot环境:</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">chroot <span class="variable">$LFS</span> /tools/bin/env -i \</span><br><span class="line">    HOME=<span class="regexp">/root TERM=$TERM PS1='\u:\w\$ ' \</span></span><br><span class="line"><span class="regexp">    PATH=/bin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/usr/sbin</span> \</span><br><span class="line">    /tools/bin/bash --login</span><br></pre></td></tr></table></figure></li><li><p>Strip:</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/tools/bin/find /&#123;,usr/&#125;&#123;bin,<span class="class"><span class="keyword">lib</span>,<span class="title">sbin</span>&#125; -<span class="title">type</span> <span class="title">f</span> \</span></span><br><span class="line">  -exec /tools/bin/strip --strip-debug <span class="string">'&#123;&#125;'</span> <span class="string">';'</span></span><br></pre></td></tr></table></figure></li></ol><hr><ul><li>摘选自LFS-v6.3/EN-CN(翻译)<blockquote><p>A large number of files will be reported as having their file format not recognized.<br>These warnings can be safely ignored.<br>These warnings indicate that those files are scripts instead of binaries.</p></blockquote></li><li>翻译内容:<blockquote><p>大量文件将被报告为文件格式无法识别<br>可以安全地忽略这些警告<br>这些警告表明这些文件是脚本而不是二进制文件</p></blockquote></li></ul><hr><p><strong>补充内容:</strong></p><ul><li><p>摘选自FSL官方文档:</p><blockquote><p>From now on, when reentering the chroot environment after exiting, use the following modified chroot command:</p></blockquote><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">chroot <span class="string">"$LFS"</span> /usr/bin/env -i \</span><br><span class="line">    HOME=<span class="regexp">/root TERM="$TERM" PS1='\u:\w\$ ' \</span></span><br><span class="line"><span class="regexp">    PATH=/bin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/usr/sbin</span> \</span><br><span class="line">    /bin/bash --login</span><br></pre></td></tr></table></figure><blockquote><p>The reason for this is that the programs in /tools are no longer needed. Since they are no longer needed you can delete the /tools directory if so desired.</p></blockquote></li><li><p>翻译内容:</p><blockquote><p>从现在开始，退出后重新进入chroot环境时，请使用以下修改后的chroot命令：<br>这样做的原因是/tools不再需要其中的程序<br>因为不再需要它们，所以可以根据需要来决定是否去删除/tools目录</p></blockquote></li></ul><hr><p><strong>补充内容:</strong></p><ul><li>6.4章节中描述的带有临时机器中的/tools文件夹的目标机器<blockquote><p>It is time to enter the chroot environment to begin building and installing the final LFS system. As user root, run the following command to enter the realm that is, at the moment, populated with only the temporary tools:</p></blockquote></li><li>翻译内容:<blockquote><p>现在是时候进入chroot环境开始构建和安装最终的LFS系统了<br>以user root身份，运行以下命令以输入当前仅由临时工具填充的领域:</p></blockquote><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">chroot <span class="string">"$LFS"</span> /tools/bin/env -i \</span><br><span class="line">    HOME=<span class="regexp">/root TERM="$TERM" PS1='\u:\w\$ ' \</span></span><br><span class="line"><span class="regexp">    PATH=/bin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/tools/bin</span> \</span><br><span class="line">    /tools/bin/bash --login +h</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>重点内容-1</strong></p><ul><li>6.2.章节 准备虚拟内核文件系统</li><li>6.22章节 挂载和激活/dev</li></ul><hr><p><strong>解决思路:</strong></p><ul><li>把/tools的内容转到<code>/usr</code>内<blockquote><p>为什么<code>cc/gcc</code>工具会不生效<br><code>GCC/Binutils/Glibc/Linux-2.6.22.5</code>已成功编译并安装入目标主机的<code>/usr</code>或<code>/usr/bin</code>文件目录内<br>每次的重新开始都是对经验的不断累积</p></blockquote></li><li>孙海勇在LinuxSir上的LFS教程-26-27页与29页</li><li><code>LFS 7.4 chapter 6.7: make: gcc: Command not found</code><a href="https://unix.stackexchange.com/questions/110184/lfs-7-4-chapter-6-7-make-gcc-command-not-found" target="_blank" rel="noopener">跳转</a><blockquote><p>LFS 7.4-第6.7章:make: gcc: 找不到命令<br><code>https://unix.stackexchange.com/questions/110184/lfs-7-4-chapter-6-7-make-gcc-command-not-found</code></p></blockquote></li></ul><hr><p><strong>参考资料:</strong></p><ul><li><p>6.4 Entering the Chroot Environment<a href="http://www.linuxfromscratch.org/lfs/view/6.3/chapter06/chroot.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/chapter06/chroot.html</code></p></blockquote></li><li><p>6.59. Stripping Again<a href="http://www.linuxfromscratch.org/lfs/view/6.3/chapter06/strippingagain.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/chapter06/strippingagain.html</code></p></blockquote></li><li><p>6.60. Cleaning Up<a href="http://www.linuxfromscratch.org/lfs/view/6.3/chapter06/revisedchroot.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/view/6.3/chapter06/revisedchroot.html</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Privacy Guard/GPG-1</title>
    <url>/2020/02/24/GPG-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="GNU-Privacy-Guard-GPG-1"><a href="#GNU-Privacy-Guard-GPG-1" class="headerlink" title="GNU Privacy Guard/GPG-1"></a>GNU Privacy Guard/GPG-1</h2><h3 id="简要概述与参考资料整理"><a href="#简要概述与参考资料整理" class="headerlink" title="简要概述与参考资料整理"></a>简要概述与参考资料整理</h3><ul><li><p>数据完整性(Data integrity)</p></li><li><p>使用工具:</p></li><li><p>GPG(GNU Privacy Guard)</p><blockquote><p>Linux GPG<br>GNU PG</p></blockquote></li></ul><hr><h3 id="命令简述"><a href="#命令简述" class="headerlink" title="命令简述:"></a>命令简述:</h3><ul><li><p>生成密钥</p><blockquote><p><code>$gpg --gen-key</code><br>安装提示对密钥进行配置</p></blockquote></li><li><p>列出密钥</p><blockquote><p><code>$gpg --list-keys</code></p></blockquote></li><li><p>删除密钥</p><blockquote><p><code>gpg --delete-key [用户ID]</code></p></blockquote></li><li><p>输入密钥</p><blockquote><p><code>gpg --import [密钥文件]</code></p></blockquote></li><li><p>加密文件</p><blockquote><p><code>gpg --recipient [用户ID] --output [file name] --encrypt [file name]</code></p></blockquote></li><li><p>解密并输出内容</p><blockquote><p><code>gpg [file name]</code></p></blockquote></li><li><p>文件签名(二进制存储)</p><blockquote><p><code>gpg --sign [file name]</code></p></blockquote></li><li><p>文件签名(ASCII码存储)</p><blockquote><p><code>gpg --clearsign [file name]</code></p></blockquote></li><li><p>生成单独的签名文件(二进制存储)</p><blockquote><p><code>gpg --detach-sign [file name]</code></p></blockquote></li><li><p>生成单独的签名文件(ASCII码存储)</p><blockquote><p><code>gpg --armor --detach-sign [file name]</code></p></blockquote></li><li><p>验证签名</p><blockquote><p><code>gpg --verify [file name].[asc] [file name]</code></p></blockquote></li><li><p>等等</p></li></ul><hr><p><strong>其它说明:</strong></p><ul><li>方括号为可选参数</li><li>这里的数据完整性以数据签名实现</li><li>压缩所选文件或目录并进行哈希加密实现数字签名</li><li>不进行压缩进行数字加密</li></ul><hr><p><strong>相关概念:</strong></p><ul><li>GPG</li><li>PGP</li><li>GPG2</li><li>RSA加密算法(对称加密算法)</li><li>数据校检</li><li>数字签名</li><li>数据完整性</li><li>软件包签名</li><li>压缩文件签名</li><li>数据库数据完整性</li><li>文件目录数据完整性</li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><p><strong>以下内容参考自中文维基与百度百科:</strong></p><p><strong>中文维基</strong></p><ul><li><p>数据完整性<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7</code></p></blockquote></li><li><p>数字签名<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0</code></p></blockquote></li></ul><p><strong>百度百科</strong></p><ul><li><p>数据完整性<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7</code></p></blockquote></li><li><p>数据校检<a href="https://baike.so.com/doc/741565-784957.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://baike.so.com/doc/741565-784957.html</code></p></blockquote></li></ul><hr><p><strong>参考文献:</strong></p><ul><li><p>Linux下使用GPG加密解密的说明及示例<a href="https://www.linuxidc.com/Linux/2015-02/113015.htm" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.linuxidc.com/Linux/2015-02/113015.htm</code></p></blockquote></li><li><p>如何在Linux下使用GPG(GnuPG)加密及解密<a href="https://jingyan.baidu.com/album/3d69c5513244a7f0ce02d751.html?picindex=1" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://jingyan.baidu.com/album/3d69c5513244a7f0ce02d751.html?picindex=1</code></p></blockquote></li><li><p>GPG简要介绍<a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.ruanyifeng.com/blog/2013/07/gpg.html</code></p></blockquote></li><li><p>Gnu隐私卫士(GnuPG)袖珍HOWTO(中文版)<a href="https://www.gnupg.org/howtos/zh/index.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.gnupg.org/howtos/zh/index.html</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Password</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Containers/LXC-1</title>
    <url>/2020/02/24/LXC-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="Linux-Containers-LXC-1"><a href="#Linux-Containers-LXC-1" class="headerlink" title="Linux Containers/LXC-1"></a>Linux Containers/LXC-1</h2><p><strong>相关内容:</strong></p><ul><li>LXC(Linux Containers)</li><li>linux内核映射文件</li><li>文件映射</li></ul><hr><h3 id="LXC-Linux-Containers"><a href="#LXC-Linux-Containers" class="headerlink" title="LXC(Linux Containers)"></a>LXC(Linux Containers)</h3><p><strong>概述:</strong></p><ul><li>其名称来自Linux软件容器(Linux Containers)的缩写</li><li>是一种操作系统层虚拟化（Operating system–level virtualization)技术</li><li>作用是为Linux内核容器功能的一个用户空间接口</li></ul><hr><h3 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h3><ol><li><strong>实现方法:</strong></li></ol><ul><li>在Linux内核中，提供了cgroups功能，来达成资源的区隔化<blockquote><p>它同时也提供了名称空间区隔化的功能，使应用程序看到的操作系统环境被区隔成独立区间，包括行程树，网络，用户id，以及挂载的文件系统<br>但是cgroups并不一定需要引导任何虚拟机<br>LXC利用cgroups与名称空间的功能，提供应用软件一个独立的操作系统环境<br>LXC不需要Hypervisor这个软件层，软件容器(Container)本身极为轻量化，提升了创建虚拟机的速度<br>软件Docker被用来管理LXC的环境</p></blockquote></li></ul><hr><ul><li>执行流程简述:<blockquote><p>它将应用软件系统打包成一个软件容器(Container)，内含应用软件本身的代码，以及所需要的操作系统核心和库<br>透过统一的名字空间和共享API来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境<br>从而使得Linux用户可以容易的创建和管理系统或应用容器</p></blockquote></li></ul><hr><ol start="2"><li><strong>具体实现:</strong></li></ol><ul><li><p>当前的LXC使用下列内核功能来控制进程:</p><blockquote><p>内核名字空间(进程间通信，uts，mount，pid，network和user)<br>AppArmor和SELinux配置<br>Seccomp策略<br>chroot(使用<code>pivot_root</code>)<br>Kernel Capibilities<br>控制组(cgroups)</p></blockquote></li><li><p>因此，LXC通常被认为介于“加强版”的chroot和完全成熟的虚拟机之间的技术。LXC的目标是创建一个尽可能与标准安装的Linux相同但又不需要分离内核的环境</p></li></ul><hr><ol start="3"><li><strong>具体使用:</strong></li></ol><ul><li>Proxmox VE:它直到4.0版才使用LXC技术，在此之前的版本都是使用OpenVZ技术</li><li>Docker:它在0.9版之前都是使用LXC技术，但在0.9版之后，已不再是唯一且默认的运行环境</li></ul><hr><h3 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h3><p><strong>概述:</strong></p><ul><li>内存映射文件(Memory-mapped file)，或称”文件映射”与”映射文件”</li><li>是一段虚内存逐字节对应于一个文件或类文件的资源，使得应用程序处理映射部分如同访问主内存</li></ul><hr><p><strong>内存映射文件分为以下两种:</strong></p><ul><li>Persisted<blockquote><p>Persisted文件与硬盘文件相关联，当关闭内存映射时，数据被写入对应的硬盘文件中<br>适合于很大的文件</p></blockquote></li><li>Non-persisted<blockquote><p>Non-persisted文件并不关联于硬盘文件。当关闭内存映射文件，所有数据被抛弃<br>适用于创建进程间通信的共享内存</p></blockquote></li></ul><p><strong>作用:</strong></p><ol><li>最常见用途是绝大多数操作系统(包括Microsoft Windows与Unix-like系统)用于加载进程</li><li>另一个用途是多个进程的共享内存</li><li>第三个用途是对大文件的读写</li></ol><p><strong>优势:</strong></p><ol><li>主要用处是增加I/O性能，特别是用于大文件</li><li>对于小文件，内存映射文件会导致碎片空间浪费，因为内存映射总是要对齐页边界，这起码是4 KiB<blockquote><p>因而一个5 KiB文件将会映射占用8 KiB内存，浪费了3 KiB内存</p></blockquote></li><li>访问内存映射文件比直接文件读写要快几个数量级</li></ol><p><strong>缺点(弊端):</strong></p><ol><li>内存映射文件需要在进程的占用一块很大的连续逻辑地址空间</li><li>对于Intel的IA-32的4 GiB逻辑地址空间，可用的连续地址空间远远小于<code>2---3GiB</code><blockquote><p>相关联的文件的I/O错误(如可拔出驱动器或光驱被弹出，磁盘满时写操作等)的内存映射文件会向应用程序报告SIGSEGV/SIGBUS信号(POSIX环境)<br>或<code>EXECUTE_IN_PAGE_ERROR</code>结构化异常(Windows环境)<br>但通常的内存操作是无需考虑这些异常的</p></blockquote></li><li>有内存管理单元(MMU)才支持内存映射文件</li></ol><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><p>官方网站<a href="https://linuxcontainers.org/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://linuxcontainers.org/</code></p></blockquote></li><li><p>LXC官方文档<a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://linuxcontainers.org/lxc/introduction/</code></p></blockquote></li></ul><hr><p><strong>以下内容参考自中文维基:</strong></p><ul><li><p>虚拟内存<a href="https://zh.wikipedia.org/wiki/Category:%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Category:%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98</code></p></blockquote></li><li><p>磁盘文件系统<a href="https://zh.wikipedia.org/wiki/Category:%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Category:%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F</code></p></blockquote></li><li><p>Linux容器化<a href="https://zh.wikipedia.org/wiki/Category:Linux%E5%AE%B9%E5%99%A8%E5%8C%96" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Category:Linux%E5%AE%B9%E5%99%A8%E5%8C%96</code></p></blockquote></li><li><p>Linux内核功能<a href="https://zh.wikipedia.org/wiki/Category:Linux%E5%86%85%E6%A0%B8%E5%8A%9F%E8%83%BD" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Category:Linux%E5%86%85%E6%A0%B8%E5%8A%9F%E8%83%BD</code></p></blockquote></li><li><p>操作系统层虚拟化<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96</code></p></blockquote></li><li><p>DevOps<a href="https://zh.wikipedia.org/wiki/DevOps" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/DevOps</code></p></blockquote></li><li><p>虚拟化技术(Virtualization)<a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E5%8C%96" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E5%8C%96</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian-3</title>
    <url>/2020/02/23/Debian-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="Debian-GNU-Linux-3"><a href="#Debian-GNU-Linux-3" class="headerlink" title="Debian GNU/Linux-3"></a>Debian GNU/Linux-3</h2><h3 id="Linux-磁盘管理"><a href="#Linux-磁盘管理" class="headerlink" title="Linux 磁盘管理"></a>Linux 磁盘管理</h3><hr><ul><li>本篇文章会不断进行补充</li></ul><p><strong>常见的分区有以下三个:</strong></p><ul><li>fdisk</li><li>cfdisk</li><li>partman</li></ul><hr><p><strong>cfdisk用法</strong></p><ul><li>简易分区管理工具</li><li>这里的磁盘类型是<code>SCSI</code>，<code>IDE</code>则为<code>hda</code>，<code>SATA</code>与<code>NVMe</code>这里不进行过多赘述</li><li>具体可以查看<code>man手册</code>与<code>help帮助</code>指令</li><li>基本流程:<code>创建分区-&gt;配置文件系统根目录与其它选项(作用/用途)-&gt;格式化文件系统-&gt;文件系统挂载并使用</code></li></ul><p><strong>创建分区:</strong></p><ol><li>键入指令<code>$cfdisk /dev/sda</code></li><li>选择任意分区(最好是空白分区，已有分区需要先进行删除)</li><li><code>选择[new选项]-&gt;[primary选项]-&gt;[指定容量数值(以字节为单位)]</code></li><li><code>选择[write选择]-&gt;键入[yes保存修改]-&gt;选择[quit选项退出工具]</code></li></ol><ul><li>参数说明:</li><li>primary 主分区</li><li>extended 扩展分区</li></ul><hr><p><strong>交换分区操作:</strong></p><ul><li><p>格式化交换分区指令(这里将sda1格式化为交换分区)</p><blockquote><p><code>$mkswap /dev/sda1</code></p></blockquote></li><li><p>使用交换分区</p><blockquote><p><code>$swapon [交换分区设备名/交换文件]</code><br><code>$swapon /dev/sda</code></p></blockquote></li><li><p>查看内存信息来检查是否已启用交换分区</p><blockquote><p><code>$free</code></p></blockquote></li><li><p>取消交换分区</p><blockquote><p><code>$swapoff /dev/sda1</code></p></blockquote></li></ul><hr><p><strong>其它概念(交换分区):</strong></p><p><strong>swap</strong></p><ul><li>swap的部分内容就是开启了多少交换空间，其空间大小是开启使用的交换分区或者文件大小的总和</li><li>交换分区可以同时存在多个并可以同时使用</li><li>同时也可以使用文件格式的交换空间</li></ul><p><strong>交换空间</strong></p><ul><li>一般主机系统里会有两个磁盘分区</li><li>一个是交换空间，另一个则是其它的任何分区</li><li>第一个分区计划为用于交换空间</li><li>交换空间又可被称为交换内存空间</li><li>使用这种文件系统的分区被称为交换分区，用于进行系统过程中的内存交换</li></ul><hr><p><strong>格式化分区操作:</strong></p><ul><li>将磁盘分区格式化为指定的文件系统</li><li>有以下几种语法格式:<blockquote><p><code>mkfs.ext2/ext3/ext4/xfs等等 /dev/sdaxxx/(指定磁盘)</code><br><code>mkfs.文件系统 [分区或设备名]</code><br><code>mkfs [options] [指定磁盘文件格式] /dev/sdaxxx/(指定磁盘)</code><br>参数<code>-v</code>，<code>-t</code>等等<br>例如:<code>mkfs -t ext4 /dev/sda3</code></p></blockquote></li></ul><hr><p><strong>磁盘(光盘或设备)挂载:</strong></p><ul><li><p>基本语法格式:</p><blockquote><p><code>mount -o loop [/dev/sdaxxx(指定磁盘)] [/mnt(被挂载目录)]</code><br><code>mount -t ext4(指定磁盘文件系统) /dev/sda4 /mnt</code></p></blockquote></li><li><p>卸载光盘</p><blockquote><p><code>umount /mnt</code><br><code>umount /dev/sda2</code></p></blockquote></li><li><p>mount查看磁盘文件系统挂载情况</p><blockquote><p>参数<code>-h</code>返回容量单位</p></blockquote></li><li><p>mount输出参数说明:</p><blockquote><p>ro表示只读<br>rw为可读可写</p></blockquote></li></ul><hr><p><strong>查看磁盘文件系统挂载情况:</strong></p><blockquote><p><code>$df</code></p></blockquote><hr><p><strong>磁盘文件系统修复:</strong></p><ul><li><p>fsck</p><blockquote><p>fsck(file system consistency check)</p></blockquote></li><li><p>是Unix和类Unix系统上用于检查文件系统完整性的工具</p></li><li><p>基本命令格式:</p><blockquote><p><code>fsck -y /dev/sda1(指定磁盘)</code></p></blockquote></li><li><p>fuser</p><blockquote><p><code>fuser -m /boot</code> 输出选项模块对应线程的pid<br><code>fuser -mk /boot</code> kill掉所选进程的pid</p></blockquote></li></ul><hr><p><strong>其它概念:</strong></p><ul><li>hda一般是指IDE接口的硬盘，hda一般指第一块硬盘，类似的有hdb,hdc等</li><li>sda一般是指SATA接口的硬盘，sda一般指第一块硬盘，类似的有sdb,sdc等</li><li>现在的内核都会把硬盘，移动硬盘，U盘之类的识别为sdX的形式</li></ul><hr><p><strong>参考资料:</strong></p><ul><li><p>Debian 分区程序<a href="https://www.debian.org/releases/wheezy/mips/apcs05.html.zh-cn" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.debian.org/releases/wheezy/mips/apcs05.html.zh-cn</code></p></blockquote></li><li><p>从零开始的Linux From Scratch<a href="http://www.linuxfromscratch.org/lfs/downloads/9.1-rc1/LFS-BOOK-9.1-rc1-NOCHUNKS.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/downloads/9.1-rc1/LFS-BOOK-9.1-rc1-NOCHUNKS.html</code></p></blockquote></li></ul><hr><p><strong>问题解决方案:</strong></p><p><strong>1.找不到fdisk指令</strong></p><ul><li><p>查看路径:</p><blockquote><p><code>whereis cfdisk</code></p></blockquote></li><li><p>输出现有PATH变量路径</p><blockquote><p><code>echo $PATH</code></p></blockquote></li><li><p>配置软链接</p><blockquote><p><code>ln -sv [软件所在路径] [PATH所指定路径]</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian GNU/Linux-2</title>
    <url>/2020/02/23/Debian-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="Debian-GNU-Linux-2"><a href="#Debian-GNU-Linux-2" class="headerlink" title="Debian GNU/Linux-2"></a>Debian GNU/Linux-2</h2><ul><li>网络配置问题统一解决方案</li></ul><h3 id="Debian网络配置基本命令"><a href="#Debian网络配置基本命令" class="headerlink" title="Debian网络配置基本命令"></a>Debian网络配置基本命令</h3><ul><li><p>输出网卡与网络配置情况</p><blockquote><p><code>ip -a/ifconfig</code></p></blockquote></li><li><p>查看所有已有网卡</p><blockquote><p><code>networkctl</code></p></blockquote></li><li><p>网卡配置目录</p><blockquote><p>/etc/network/interfaces</p></blockquote></li></ul><p><strong>网卡配置说明:</strong></p><ul><li><p>配置静态IP地址</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">auto eth0 		#开机自动激活</span><br><span class="line">iface eth0 inte static 	#静态IP</span><br><span class="line">address<span class="built_in"> IP </span>		#本机IP</span><br><span class="line">netmask 255.255.255.0 	#子网掩码</span><br><span class="line"><span class="comment"># network IP</span></span><br><span class="line"><span class="comment"># broadcast IP</span></span><br><span class="line">gateway<span class="built_in"> IP	</span>	#路由网关</span><br></pre></td></tr></table></figure></li><li><p>DHCP自动获取(动态IP地址)</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto</span> <span class="string">eth0</span></span><br><span class="line"><span class="attr">iface</span> <span class="string">eth0 inet dhcp</span></span><br></pre></td></tr></table></figure></li><li><p>配置好之后保存配置，重启网卡(多种方式)</p><blockquote><p><code>service networking restart</code> #service工具<br><code>systemctl restart network</code> #systemctl工具<br><code>/etc/init.d/network-manager restart</code><br><code>/etc/init.d/networking restart</code></p></blockquote></li><li><p>重启指定网卡</p><blockquote><p><code>ifdown eth0</code><br><code>ifup eth0</code></p></blockquote></li><li><p>配置DNS</p><blockquote><p><code>vi /etc/resolv.conf</code><br><code>nameserver 0.0.0.0</code></p></blockquote></li></ul><hr><h3 id="名称与各参数简述与解释"><a href="#名称与各参数简述与解释" class="headerlink" title="名称与各参数简述与解释:"></a>名称与各参数简述与解释:</h3><p><strong>eth(ethernet)</strong></p><blockquote><p>有线网卡<br>物理网卡<br>如:eth0，eth1，eth2…则代表网卡一，网卡二，网卡三…<br>还可称为en</p></blockquote><hr><ul><li>eth各接口说明<blockquote><p>eth0=lan接口<br>eth1=wan接口<br>br-lan=lan网桥<br>br-lan 虚拟设备，用于LAN口设备桥接，可以用<code>brctl show</code>查看使用情况</p></blockquote></li></ul><hr><ul><li>en(ethernet)标识说明:<blockquote><p>o:主板板载网卡，集成是的设备索引号<br>p:独立网卡，PCI网卡<br>s:热插拔网卡，USB之类的扩展槽索引号<br>nnn(数字):MAC地址+主板信息计算得出唯一序列</p></blockquote></li></ul><hr><p><strong>lo</strong></p><blockquote><p>代表localhost，即127.0.0.1<br>虚拟设备，自身的回环网设备</p></blockquote><hr><p><strong>ens</strong></p><blockquote><p>ens33为自动备援模式，名称定为ens33<br>eno1表示主板BIOS内置的网卡<br>ens1表示主板BIOS中内置的PCI-E网卡<br>enp2s0为PCI-E独立网卡<br>eth0:如果没有使用以上任何一个，则将返回默认的网卡名</p></blockquote><hr><ul><li>wlan<blockquote><p>无线网卡<br>wlan0=无限端口</p></blockquote></li></ul><hr><p><strong>网络接口的传统命名方式(可预测命名方案)</strong><br><strong>传统命名:</strong></p><ul><li>以太网:ethX,[0,oo)<blockquote><p>例如eth0，eth1…</p></blockquote></li><li>PPP网络:pppX, [0,…]<blockquote><p>例如，ppp0, ppp1, …</p></blockquote></li></ul><hr><h3 id="NONA"><a href="#NONA" class="headerlink" title="NONA"></a>NONA</h3><ol><li><p>设置网卡</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">nano</span> <span class="string">/etc/network/interfaces</span>  <span class="string">/etc/network/interfacesbak</span>   	<span class="comment">#备份原有配置文件</span></span><br><span class="line"><span class="string">nano</span> <span class="string">/etc/network/interfaces</span>   			<span class="comment">#编辑网网卡配置文件</span></span><br><span class="line"><span class="string">auto</span> <span class="string">lo</span></span><br><span class="line"><span class="string">auto</span> <span class="string">eth0</span>  					<span class="comment">#开机自动连接网络</span></span><br><span class="line"><span class="string">iface</span> <span class="string">lo</span> <span class="string">inet</span> <span class="string">loopback</span></span><br><span class="line"><span class="string">allow-hotplug</span> <span class="string">eth0</span></span><br><span class="line"><span class="string">iface</span> <span class="string">eth0</span> <span class="string">inet</span> <span class="string">static</span>   				<span class="comment">#static表示使用固定ip，dhcp表述使用动态ip</span></span><br><span class="line"><span class="string">address</span> <span class="number">192.168</span><span class="number">.21</span><span class="number">.166</span>   				<span class="comment">#设置ip地址</span></span><br><span class="line"><span class="string">netmask</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>  				<span class="comment">#设置子网掩码</span></span><br><span class="line"><span class="string">gateway</span> <span class="number">192.168</span><span class="number">.21</span><span class="number">.2</span>    				<span class="comment">#设置网关</span></span><br><span class="line"><span class="string">ctrl+o</span>   						<span class="comment">#保存配置</span></span><br><span class="line"><span class="string">ctrl+x</span>   						<span class="comment">#退出</span></span><br></pre></td></tr></table></figure></li><li><p>设置DNS</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cp</span>  <span class="string">/etc/resolv.conf</span>   <span class="string">/etc/resolv.confbak</span>    	<span class="comment">#备份原有dns配置文件</span></span><br><span class="line"><span class="string">nano</span> <span class="string">/etc/resolv.conf</span>   			<span class="comment">#编辑配置文件</span></span><br><span class="line"><span class="string">nameserver</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>   			<span class="comment">#设置首选dns</span></span><br><span class="line"><span class="string">nameserver</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span>   			<span class="comment">#设置备用dns</span></span><br><span class="line"><span class="string">ctrl+o</span>   					<span class="comment">#保存配置</span></span><br><span class="line"><span class="string">ctrl+x</span>   					<span class="comment">#退出</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>网络上关于以下概念的资料数不胜数，这里就不再多做阐述了</li></ul><p><strong>OSI七层模型:</strong></p><blockquote><p>由上至下简述(程序至底层)<br>应用层/表示层/会话层/传输层/网络层/数据链路层/物理层<br>上层依赖于下层，下层为上层提供服务<br>OSI内的每一层模型都有属于自己的协议集与功能集<br>层与层之间相互独立且相互依赖</p></blockquote><ul><li><p>中文维基<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B</code></p></blockquote></li><li><p>TCP/IP</p><blockquote><p>IP:互联网协议<br>TCP:传输控制协议<br>三次握手与四次握手<br>任何基于互联网协议蔟与协议套组都基于TCP/IP</p></blockquote></li><li><p>HTTP</p><blockquote><p>超文本传输协议<br>无状态协议<br>大部分实现都是基于TCP的</p></blockquote></li><li><p>DNS</p><blockquote><p>域名系统</p></blockquote></li><li><p>其它常用协议</p><blockquote><p>应用层:BGP/DHCP/HTTPS/IMAP/NNTP/NTP/POP/SMTP/SNMP/SSH/Telnet等等<br>传输层:UDP/TLS/SSL/DCCP等等<br>网络层:IP/ICMP/IGMP/IPsec等等<br>链接层:APR/PPP/DSL/ISDN等等</p></blockquote></li></ul><hr><h3 id="操作流程-逻辑-整合-简述"><a href="#操作流程-逻辑-整合-简述" class="headerlink" title="操作流程(逻辑)整合/简述"></a>操作流程(逻辑)整合/简述</h3><ol><li>查看网络配置</li><li>查看已有网卡</li><li>启动或重启网卡</li><li>设置配置文件(静态IP或动态IP)</li><li>配置网关</li><li>配置DNS</li><li>保存配置并重启网卡</li></ol><ul><li>任何网络与本地的流量与数据的传输都需要经过本地或无限的网卡</li><li>流量与数据的抓取也只是读取经由网卡的信息并进行输出</li><li>配置无线或有限网的前提是所处的物理环境已有网络支持</li><li>网卡用于联网的虚拟信息处理方式，网络离不开物理层面的支持</li><li>网卡被归纳为设备内</li></ul><hr><p><strong>参考资料:</strong></p><ul><li>Linux系统运维<a href="https://www.osyunwei.com/" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://www.osyunwei.com/</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-4</title>
    <url>/2020/02/22/LFS-4/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h2 id="LFS-4"><a href="#LFS-4" class="headerlink" title="LFS-4"></a>LFS-4</h2><h3 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h3><hr><p><strong>制作步骤设计:</strong></p><p><strong>分为三个阶段:</strong></p><ul><li>一阶段:1.创建目标系统目录，2.创建临时系统目录，3. 建立预工具链</li><li>二阶段: 4.建立临时系统，5. 建立目标工具链</li><li>三阶段: 6.建立目标系统，7.收尾工作</li></ul><hr><ol><li>创建目标系统目录</li></ol><ul><li>先建立一个空白的分区用于存放目标系统，并保证在制作完成后可以从这个分区启动已经制作完的系统</li><li>将这个分区格式化为主系统能够识别的文件系统，比如<code>EXT3</code>，并将该分区挂载到主系统中的某个目录，比如<code>/opt/mylinux</code>，这个目录将作为目标系统的制作目录</li><li>另外，还需要人为的将制作中所需要的软件包放在某个目录内，该目录需要在已经制作完成的系统的运行环境中能够访问到</li><li>可以存放在目标系统制作的目录中，如建立一个<code>/opt/mylinux/source</code>目录并存放于其中</li></ul><hr><ol start="2"><li>创建临时系统目录</li></ol><ul><li>本步骤是为了在主系统制作临时系统(详情可见阶段一与阶段二)和使用临时系统来制作目标系统(详情可见阶段三)能够用同样的目录来访问临时系统的目录和文件</li><li>阶段二和阶段三分别在不同根目录的运行环境中，但都使用到了临时系统，如果想让临时系统以最小的改动就可以使其中的命令既可以在主系统所在的运行环境中正常工作，也可以在目的相同所在的运行环境中工作正常</li><li>最好的解决方式就是让两个环境中调用临时系统的目录路径是完全一样的</li></ul><p><strong>执行步骤:</strong></p><ul><li><p>在目标系统所在目录中创建一个存放临时系统的目录，如<code>/opt/mylinux/tools</code></p></li><li><p>然后利用软链接文件的方式在主系统的根目录建立一个指向<code>/opt/mylinux/tools</code>的链接文件</p></li><li><p>该链接文件的文件名必须是<code>/tools</code></p></li><li><p>不去先建立<code>/tools</code>，然后再在<code>/opt/mylinux</code>目录下建立一个指向<code>/tools</code>的同名软链接的原因</p></li><li><p>原因就是目标系统目录是主系统的根目录下的某个目录，主系统根目录的运行环境都可以正常访问目标系统中目录</p></li><li><p>而目标系统在进入以所在目录为根目录的运行环境后就无法访问主系统的其它目录中的内容了</p></li><li><p>所以将真正的内容存放在目录系统的目录中将能够保证各个制作阶段均能访问临时系统中的内容，并且保证访问路径一致</p></li><li><p>采用链接方式在不同阶段的方式关系(链接我呢见在不同环境中的访问关系)</p></li></ul><p><strong>逻辑简述:</strong></p><p><strong>一阶段&amp;二阶段-&gt;三阶段</strong></p><blockquote><p><code>一阶段&amp;二阶段:[主系统(/tools)]&lt;-&gt;[目标系统所在目录(/opt/mylinux/tools)]</code><br><code>三阶段:{运行主系统环境[主系统(/tools)]}-可以访问-&gt;{运行目标系统环境[目标系统(/tools)]}</code><br>同时<br><code>三阶段:{运行目标系统环境[目标系统(/tools)]}-无法访问-&gt;{运行主系统环境[主系统(/tools)]}</code></p></blockquote><ul><li>箭头代表链接关系，箭头指向的是实际目录，另一方则为链接文件</li><li>在一阶段与二阶段中<code>/tools</code>和<code>/opt/mylinux/tools</code>无论谁是链接文件都不影响互相访问</li><li>而在第三阶段，只有<code>/tools</code>是链接文件时才能互相访问，<code>/opt/mylinux/tools</code>(在目标系统环境中变为<code>/tools</code>)是链接文件时无法访问<code>/tools</code>中的内容</li><li>同时还可以使用目录映射的方式使两个阶段都能够正常访问临时系统，即有两种方法:一种是软连接的方式，另一种是目录映射的方式</li><li>本篇文章仅介绍软链接的方式</li></ul><hr><ol start="3"><li>建立预工具链</li></ol><ul><li>预工具链的作用是生成临时工具链，临时工具链是独立于主系统中的工具链，根据工具链的制作原则需要有一个外部依赖的工具链作为过渡，该工具链就是预工具链</li></ul><p><strong>预工具链到临时工具链的制作过程与步骤</strong></p><ol><li>先完成预工具链的编译工具部分，此时预工具链是一个内部依赖的工具链，依赖主系统中的Glibc</li><li>然后使用编译工具完成临时系统中的Glibc，该Glibc存放在临时系统目录中，作为临时工具链和临时系统所依赖的Glibc</li><li>对预工具链进行调整，变为外部依赖的工具链，即可开始编译临时工具链中的编译工具，以此完成临时工具链</li><li>预工具链是临时工具链的过渡工具链，可以将其存放在临时系统的目录中，临时工具链的安装会覆盖掉预工具链，也可以存放在其它目录下，但需要在用完后手工删除掉</li></ol><p><strong>到此第一阶段的制作已经完成，即将开始第二阶段的制作过程</strong></p><hr><ol start="4"><li>建立临时系统</li></ol><ul><li><p>现在已经完成了临时工具链，但仅仅有一个工具链还不能顺利的编译各种软件包，需要有各种各样的辅助命令来共同完成</p></li><li><p>当前还处于主系统运行环境中，主系统所附带的各种辅助命令目前都可以用于编译</p></li><li><p>为了切换到目标系统运行环境后还能继续使用这些辅助命令，就必须将这些辅助命令存放在目标系统运行环境所能访问到的目录中</p></li><li><p>建立临时系统的原因就是为了承前启后，前即为主系统，后则为目标系统</p></li><li><p>临时系统是目标系统建立前用于支撑目标系统运行环境的基本框架，目标系统需要人为的进行从头建立</p></li><li><p>即为一开始什么都没有，此时临时系统承担了运行环境的运作，包括提供用户的交互功能，编译软件包以及常用命令</p></li><li><p>因此临时系统中必须加入工具链，辅助命令，常用命令和支撑运行环境的程序(如Bash)</p></li></ul><p><strong>逻辑简述(不同阶段切换过程中各个系统的内容)</strong></p><p><strong>一阶段开始-&gt;二阶段开始-&gt;三阶段开始-&gt;三阶段结束</strong></p><blockquote><p>一阶段:<code>{一阶段开始，主系统运行环境内(/&amp;/tools)[主系统(完整)/临时系统(无内容)]}-此时的目标系统内无内容</code><br>二阶段:<code>{二阶段开始，主系统运行环境内(/&amp;/tools)[主系统(完整)/临时系统(部分)]}-此时的目标系统内无内容</code><br>三阶段:<code>{三阶段开始，目标系统运行环境内(/&amp;/tools)[临时系统(完整)/目标系统(无内容)]}-{/[主系统(完整)]}</code><br>三阶段:<code>{三阶段结束，目标系统运行环境内(/&amp;/tools)[临时系统(完整)/目标系统(完整)]}-{/[主系统(完整)]}</code></p></blockquote><ul><li><p>第三阶段开始时，目标系统的根目录(<code>/</code>)没有任何内容，只能靠临时系统提供各种编译和运行的功能</p></li><li><p>第三阶段完成后，目标系统已经完整，就可以不需要临时系统而直接运行了</p></li><li><p>可以了解到临时洗头膏必须拥有相对完整的运行能力，并且要独立于主系统，无论临时工具链还是临时系统中其它辅助命令都必须依赖临时系统中的函数库</p></li><li><p>临时系统必须全部由临时工具链来链接生成</p></li><li><p>此时临时系统的制作内容就非常明确了，如Bash，常用命令(Coreuils等)和工具链环境(Awk，Sed等)</p></li></ul><hr><ol start="5"><li>建立目标工具链</li></ol><ul><li><p>制作完成了临时系统后就要进入第三阶段的制作过程，即为将运行环境正式切换到目标系统运行环境</p></li><li><p>需要明确的是:目标系统最终是需要通过人为方式去将内容进行保留，临时系统在完成目标系统后就会被删除掉</p></li><li><p>目标系统同样需要一个内部链接的工具链，这是为了实现今后目标系统脱离主系统后能成为一个独立的系统且能够继续编译安装软件包</p></li><li><p>目标的临时工具链也是内部依赖的工具链，根据制作原则可以知道从内部依赖的工具链生成另外一个内部依赖的工具链需要有一个外部依赖的工具链作为过渡</p></li><li><p>此时已经不再编译临时系统上的程序文件了，可以通过调整工具链的方法将临时工具链内部依赖变为内部依赖，过渡用的外部依赖工具链就用调整临时工具链的方法来实现，临时工具链由此开始作为过渡工具链</p></li><li><p>根据工具链的制作原则，调整之前需要先建立好目标系统中的Glibc，这个Glibc同样根据工具链制作原则存放在目标系统的目录中</p></li><li><p>然后调整临时工具链，再编译目标系统中的，形成内部依赖的工具链</p></li><li><p>目标工具链的形成意味着临时工具链的使命已经完成，虽然现在临时工具链经过了调整，但后续的制作过程中不会再使用到它了</p></li><li><p>此时不用在意它的存在，也不需要这时去删除它，在最后完成目标系统后再将它连同临时系统一并删除</p></li></ul><hr><ol start="6"><li>建立目标系统</li></ol><ul><li>临时工具链虽然已经不再需要了，但目前目标系统除了目标工具链还一无所有</li><li>还需要用到临时系统中的各种各种目录以及其它常用命令，交互环境程序也还在使用临时系统中的命令</li><li>如同制作临时系统的时候需要的命令安装到临时系统中一样，可以人为的将临时系统中出现的所有的软件包都重新用目标工具链再次编译并安装到目标系统目录中</li><li>最终将完全替代掉临时系统中的所有软件包和命令</li><li>目标系统和临时系统的要求是不一样的，临时系统只需要为制作目标系统编译环境和简单的运行环境的支撑能力即可</li><li>但目标系统除了要具备临时系统所具有的功能之外还需要有更高的要求</li><li>比如网络的支持，程序进程的管理，系统启动等，因此还需要安装许多Linux系统中常见的软件包</li><li>至于关于常见软件包，这里不过过多枚举</li></ul><hr><ol start="7"><li>收尾工作</li></ol><ul><li><p>完成了目标系统后，就可以展开收尾工作了</p></li><li><p>包括删除临时系统，临时系统所有文件都存放在了<code>/tools</code>目录中，只需要删除<code>/tools</code>就可以了</p></li><li><p>还有一些公共的配置文件需要进行设置，如主机名，网络地址等，这些内容将在后续章节内进行介绍，这里先不再赘述</p></li><li><p>对于编译出来的命令程序还有一个需要注意的地方，很多软件包编译生成的程序文件带有许多调试信息，会占据相当大的磁盘空间</p></li><li><p>有的程序文件所附带的调试信息可以使其增加数倍的大小，主体代码只有几百KB的程序可能会超过1MB，去掉这些调试信息显得非常重要</p></li><li><p>调试信息的删除可以使用strip命令来完成，具体参数不进行过多阐述，需要注意的一点就是某一些程序或软件的调试信息中会与其静态函数库发生关联，如果去掉则可能导致静态函数库无法使用</p></li></ul><hr><ol start="8"><li>启动目标系统</li></ol><ul><li>让这个目标系统正常的启动起来</li><li>如果以LiveCD的方式进行制作，同时所使用的本地计算机内没有任何影片盘的启动器时，可以使用GRUB的启动程序</li><li>关于GRUB的使用这里不做过多阐述</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-3</title>
    <url>/2020/02/22/LFS-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h2 id="LFS-3"><a href="#LFS-3" class="headerlink" title="LFS-3"></a>LFS-3</h2><ul><li>内容接LFS-2</li></ul><h3 id="制作过程中的相关技术"><a href="#制作过程中的相关技术" class="headerlink" title="制作过程中的相关技术"></a>制作过程中的相关技术</h3><ol><li>虚拟根目录</li></ol><ul><li>制作目标系统的最终且最基本点是让其称为一个可以独立运行的系统(不依赖主系统和临时系统的纯净系统)</li><li>根据Linux系统的特点它需要存放于根目录下，而第一阶段中的主系统也同样存放在根目录下</li><li>主系统在制作过程中是始终运行的，制作过程中要运行目标系统中的命令，从而形成了命令的执行矛盾</li><li>而在Linux系统中使用虚拟根目录可以解决这个矛盾</li><li>linux内核启动时建立的根目录被定义为真正的目录，虚拟根目录可以简单的理解为:一个运行的Linux系统中可以存在多个运行环境，而每个运行环境都有自己的根目录，这些运行环境的根目录就可以被定义为虚拟根目录，任何目录都可以被设置为某个运行环境中的根目录</li><li>在主系统中建立一个目录，其中存放系统的基本命令，即可将该目录作为虚拟根目录启动一个新的运行环境</li><li>如果将主系统环境称为环境A，把在A环境下建立的新的运行环境称为环境B，则可称环境B为环境A的子环境，而环境A被称为环境B的父环境</li></ul><p><strong>实现逻辑简述:</strong></p><ol><li>假设主系统中的根目录下存在若干文件目录</li><li>指定其中某一目录作为制作目标系统的基础目录(将此目录设置为新的运行环境的根目录)</li><li>此时将此目录称为X，而此目录下还可以存放若干文件目录，这里用X1，X2，X3表示</li><li>基于跟目录X创建一个运行环境，此时运行目录X下将只有X1，X2，X3目录</li></ol><ul><li>用于作为新运行环境中的根目录可以是父环境中的任何命令或者目录中的目录，同时也包括父环境中的根目录</li></ul><hr><ol start="2"><li>分区的挂载</li></ol><ul><li>目标系统的最终目的是独立于主系统而运行，此时需要将目标系统装在一个分区中，而不是主系统的某个目录下</li><li>Linux系统是通过挂载的方式使用分区，挂载就是将某个存储设备以某种文件系统链接到某个目录</li><li>用户查看到目录中的文件即为分区中的文件，对其中的文件进行操作与操作一般目录的文件相同</li><li>只要有一个空分区，将该分区格式化为主系统能识别的文件系统，并将其挂载到主系统的某个目录上就可以了</li><li>目标系统只需要存放到这个目录就等于存放在该分区，制作完成后就可以直接使用这个分区来启动系统，存放在目录下的第一级的文件和目录就是目标系统跟目录的内容</li></ul><p><strong>实现逻辑简述</strong></p><ol><li>挂载主系统的根目录下的某个目录，将此目录定义为磁盘分区A，此磁盘分区下拥有若干个目录</li><li>然后从磁盘分区A启动目标系统，启动之后的目标系统的根目录以及根目录下的文件即为主系统下被挂载的文件目录的中的文件，在这里还可将其称为磁盘分区A</li><li>从而使目标系统脱离主系统运行</li></ol><ul><li>可以看出子环境运行的方式和目标系统重新启动后的根目录相同</li><li>根据此原理，制作目标系统的过程中以挂载分区的目录作为虚拟根目录创建新的运行环境，在其中可以使用目标系统的命令</li><li>从而解决了主系统和目标系统都需要使用根目录的矛盾</li><li>目标系统制作完成后，目录系统就可以从分区单独启动以此来脱离主系统</li></ul><hr><ol start="3"><li>链接文件</li></ol><ul><li><p>在Linux系统中有一种用来引用其它文件的符号链接文件，这里将其简称为链接文件</p></li><li><p>其包含有一条绝对路径或者相对路径的形式用于指向其它文件或者目录的引用</p></li><li><p>其所链接的文件被称为目标文件，链接文件和目标文件的文件名可以相同也可以不同</p></li><li><p>相同文件名的情况下目标文件和链接文件不能存放于实质相同的目录下</p></li><li><p>链接文件可以分为软链接与硬链接两种</p><blockquote><p>软链接文件的读写就如同直接对目标文件进行操作，链接文件是一个独立文件，其存在并不依赖于目标文件<br>如果删除一个链接文件，它所指向的目标文件不受影响<br>如果删除了目标文件，其指向目标文件的链接文件依然存在</p></blockquote></li><li><p>硬链接与目标文件使用同一个文件索引节点，因此只能在同一个磁盘分区中使用硬链接，并且它不能离开关联文件而独立存在</p><blockquote><p>如果一个硬链接被移动，重命名或者删除时，其余关联到同一文件的硬链接不受影响<br>当最后一条指向该文件的硬链接被删除时，该文件内容会消失</p></blockquote></li><li><p>软链接可以跨磁盘分区来进行目标文件的指定，而硬链接只能使用同一个磁盘分区中的文件</p></li><li><p>建立软链接和硬链接的命令在Linux系统中是相同的，都是ln命令，使用不同的选项以建立不同的连接方式</p></li><li><p>ln命令的基本格式</p><blockquote><p><code>ln [options] 目标文件 链接文件</code></p></blockquote></li><li><p>参数<code>-s</code>表示建立软链接，没有设置的情况下默认建立硬链接</p></li><li><p>目标文件可以是相对路径或绝对路径</p></li><li><p>在制作过程中，均使用软链接文件，即符号链接文件</p></li></ul><hr><ol start="4"><li>文件系统</li></ol><ul><li>文件系统是一种存储和组织计算机文件和数据的方法，以更容易的去访问和查找数据</li><li>文件系统类型一览</li></ul><ol><li>磁盘文件系统:EXT2/3，XFS等等，可以直接应用在软硬盘存储设备上</li><li>网络文件系统:NFS，CIFS等等</li><li>事务文件系统:AUFS等等</li><li>内存文件系统:TmpFS等等，使用内存来模拟存储设备的文件系统，可以从内存中划出一块区域用于像磁盘文件系统那样来存放文件和目录</li><li>特殊文件系统:proc，sysfs等等，具有特殊功能的文件系统，如内核文件系统</li></ol><p><strong>文件系统的使用:</strong></p><ul><li>文件系统在Linux系统中以挂载的方式使用，挂载工具为mount<blockquote><p><code>mount [options] 设备名 目录名</code></p></blockquote></li><li>参数-t用于指定文件系统名称，一般mount会自动检测文件系统名称</li><li>如<code>mount /dev/sda3 /mnt</code><blockquote><p><code>/dev/sda3</code>是挂载分区，<code>/mnt</code>是被挂载的目录</p></blockquote></li></ul><hr><ol start="5"><li>目录映射</li></ol><ul><li>子环境的运行方式和从分区启动的方式中，虽然根目录是一致的，但就整个系统来说还是有很多差别的</li><li>比如有些目录，类似于/dev或/proc等等中的内容都是系统启动过程中创建的，并且会在运行过程中发生变化</li><li>这些目录中的内容有时会影响系统的制作，如果想让两种方式的效果最为接近，就需要让这些目录中存放的内容相似</li><li>这些目录的内容多与内核相关，但子环境的运行方式所使用的是主系统中的内核</li><li>因此目标系统和主系统的内核应当尽量保存兼容，以此利用主系统中相应目录的内容来补充目标系统中的这些目录中的内容</li><li>想让主系统和目标系统对应目录中的内容保存一致，最容易的办法无非是复制目录，但因为/proc的内容是反应内核当前的情况(动态目录)，复制过来的目录并不能随着系统的运行而发生变化，所以不能采用复制的方法</li><li>可以用建立软链接文件的方式来让两个目录的内容一致而又不采用复制目录的方法</li><li>访问链接文件就如同访问它所链接到的目录一样，但软链接文件的一个问题就是目标文件或目录必须存在且可以被当前的运行环境所访问</li></ul><p><strong>这里举一个例子:</strong></p><ul><li>在主系统中的根目录下存在/proc目录，现在系统在/opt/目录下创建一个proc_a链接文件并指向/proc</li><li>当前运行环境中访问/opt/proc_a中的内容就如同访问/proc中的内容</li><li>但如果将/opt作为虚拟根目录启动一个新的运行环境时，原先的/opt/proc_a将变成/proc_a(此时此分区的文件目录与原主机的文件目录相隔离)</li><li>所以它指向的/proc无法在这个运行环境中被访问到，则会导致链接文件失效，所以链接文件的方法也不能使用</li><li>所以这里就要引出目录映射的概念了</li></ul><p><strong>文件映射:</strong></p><ul><li><p>被映射的源目录和映射目录内容上保存一致，对它们中任何一方目录内的改动都将直接导致另一方同样的修改</p></li><li><p>与链接文件处理方式不同，源目录和映射目录都必须是实际目录，而非链接文件</p></li><li><p>目录映射并不依赖源目录的存在位置，即使在建立好目录映射后，改变源目录的名称或者位置都不会影响到映射目录中的内容</p></li><li><p>因此使用映射方式建立的目录一致性将在进入新的运行环境中继续产生作用</p></li><li><p>映射目录方法所建立起的文件关联会直接涉及于文件所在磁盘的物理地址，所以不会因为别名或修改文件状态的操作而发生失效或错误</p></li></ul><hr><ol start="6"><li>工具链调整</li></ol><p>*工具链从内部依赖转为外部依赖，不同外部依赖的转换，外部依赖转内部依赖，都属于调整依赖工具链<br>*调整工具链不存在内部依赖转内部依赖的情况</p><p><strong>这里举一个例子:</strong></p><ul><li>将工具链分为三个部分并用实际的软件包名称来表示:</li><li>工具链=Binutils+GCC+Glibc</li><li>调整工具链的实质就是用新的Glibc代替工具链原来的Glibc，两个Glibc存放在不同目录</li><li>调整工具链的原因是要让工具链中的编译工具改变链接的函数库位置，这个改变只需要改变两个地方:GCC的编译配置和Binutils中ld命令的函数库查询目录</li><li>GCC的编译默认配置被编译于GCC的相关文件中，GCC中的gcc命令有两种配置方式，一种是外部的配置文件，另一种是内部的默认配置</li><li>gcc命令优先使用外部配置的方式，则修改配置文件就可以实现目的</li><li>因为GCC的配置文件很复杂而不便于重新编写，所以可采用gcc命令将默认配置导出，然后修改相应的内容并保存到特定的文件中的方法来实现目的</li><li>gcc命令的默认导出配置方式的执行命令:<code>gcc -dumpspecs</code></li><li>该命令将默认配置显示在屏幕上，只需要人为的将其存放到gcc读取配置文件的目录中</li><li>gcc读取外部配置文件的目录可以使用此命令来获得:<code>dirname $(gcc -print-libgcc-file-name)</code></li><li>该命令返回读取配置文件的目录名，接下来只需要在这个目录中创建一个名为specs的文件，并将已经人为配置完的配置文件存放在该目录中就可以了</li><li>执行该命令:<code>gcc -dumpspecs &gt; $(dirname $(gcc -print-libgcc-file-name))/specs</code></li><li>此时配置文件已经准备好了，目前这个文件中的内容和GCC的默认配置完全一个，只需要人为的将文件中的内容进行修改就行</li><li>该文件以文本内容存放，所以可以使用一般的文本编辑器来进行修改，也可以使用文本编辑器的命令来进行修改，如sed命令</li><li>修改其寻址函数库的目录为新函数库的所在目录即可</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-2</title>
    <url>/2020/02/22/LFS-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h2 id="Linux-from-Scratch-LFS-2"><a href="#Linux-from-Scratch-LFS-2" class="headerlink" title="Linux from Scratch/LFS-2"></a>Linux from Scratch/LFS-2</h2><ul><li>名词解释</li><li>制作逻辑</li><li>相关技术 LSF-3</li><li>制作步骤 LSF-4</li><li>目的为创造一个崭新的，基于Linux内核的操作系统</li></ul><hr><p><strong>linux from scratch</strong></p><h3 id="涉及名称一览-解释"><a href="#涉及名称一览-解释" class="headerlink" title="涉及名称一览(解释)"></a>涉及名称一览(解释)</h3><p><strong>主系统</strong></p><ul><li>源系统，用于提供制作处新系统的基本环境</li><li>可以比喻成一架航母上的某一架飞机的基础机型</li></ul><p><strong>目标系统</strong></p><ul><li>基于主系统要仿制/制作的目标系统(最终目的)</li><li>可以比喻成要仿制基础机型进行制造的另一架飞机</li></ul><p><strong>临时系统</strong></p><ul><li>在制作目标系统的过程中需要的过渡系统，用于辅助目标系统的制作过程</li><li>可以比喻成要制造却还在规划中的飞机模型与飞机的基本结构</li></ul><hr><p><strong>编译工具</strong></p><ul><li>这里将汇编工具Binutils与编译器GCC合称为编译工具</li></ul><p><strong>工具链</strong></p><ul><li><p>汇编工具，编译器，与C标准库(Binutils，GCC，Glibc)合成为工具链</p></li><li><p>因为让工具链生成可执行文件通常都需要函数库(标准库)，所以这里这里将函数库包含于工具链内</p></li><li><p>因为在整个制作过程中，各个阶段都会产生工具链，所以这里将各个阶段的工具链名称进行以下定义和命名</p></li></ul><ol><li>原工具链</li></ol><ul><li>主系统的工具链</li></ul><ol start="2"><li>预工具链</li></ol><ul><li>用于生成临时工具链的工具链</li></ul><ol start="3"><li>临时工具链</li></ol><ul><li>用于生成临时系统的工具链</li></ul><ol start="4"><li>目标工具链</li></ol><ul><li>用于生成目标系统的工具链</li></ul><hr><p><strong>辅助命令</strong></p><ul><li>在编译软件包的过程中，处理工具链以外通常还需要一些命令的参与</li><li>类似于make之类的，这类工具这里将其合成为辅助命令</li></ul><p><strong>工具链环境</strong></p><ul><li>将工具链同辅助命令合称为工具链环境，因为不同的阶段会出现不同的组合，所以这里将各个阶段工具链环境的名称进行以下定义和命名</li></ul><ol><li>预工具链环境</li></ol><ul><li>预工具链+主系统中的辅助命令及基本函数库</li></ul><ol start="2"><li>预临时工具链环境</li></ol><ul><li>临时工具链+临时系统中的辅助命令及基本函数库</li></ul><ol start="3"><li>目标工具链</li></ol><ul><li>目标工具链+目标系统中的辅助命令及基本函数库</li></ul><hr><p><strong>运行环境</strong></p><ul><li>因为在一个运行的系统中可以存在多个不同的环境，这些环境中有各自的根目录及环境设置</li><li>这一类的环境被称为运行环境，因为在制作过程中各个阶段会处于不同的运行环境，所以这里将各个阶段的运行环境进行以下定义和命名</li></ul><ol><li>主系统运行环境</li></ol><ul><li>以主系统所在的运行环境</li></ul><ol start="2"><li>目标系统运行环境</li></ol><ul><li>目标系统所在目录为根目录的运行环境</li></ul><hr><p><strong>头文件</strong></p><ul><li>用于编译的一类文件，以存放函数的接口描述与结构体信息等程序设计的相关内容</li></ul><p><strong>纯净度</strong></p><ul><li>目标系统对于主系统依赖程度的评估</li><li>目标系统必须完全不依赖于主系统，才可称其为独立系统</li></ul><hr><p><strong>结构体系描述</strong></p><blockquote><p><code>系统=内核+各类函数库+交互环境+各种应用程序(常用命令的指令集)+各类配置文件(辅助文件)</code></p></blockquote><blockquote><p><code>[程序]-配置文件-&gt;[命令]-配置文件-&gt;[交互环境]-配置文件-&gt;[函数库]-&gt;{内核}</code></p></blockquote><hr><p><strong>启动过程描述</strong></p><blockquote><p><code>BIOS/UEFI-&gt;GRUB/LILO-&gt;KERNEL(Kernel)</code></p></blockquote><hr><p><strong>基本编译过程描述</strong></p><blockquote><p><code>[Make]-GCC/各种编译工具-[源代码]-&gt;[目标代码]</code><br>同时Binutils利用以生成的目标代码<br><code>[Make]-[Binutils]-&gt;[共享函数库(运行时需要)/静态函数库(编译进程序)]-[目标代码]-&gt;{可执行程序}</code></p></blockquote><hr><h3 id="制作逻辑描述"><a href="#制作逻辑描述" class="headerlink" title="制作逻辑描述"></a>制作逻辑描述</h3><ul><li>常用命令尽量使用GNU所提供的</li></ul><ol><li>主系统准备</li></ol><ul><li>主系统与目标系统相同或相兼容</li><li>拥有工具链与辅助命令，即为原工具链</li></ul><hr><ol start="2"><li>预工具链的生成</li></ol><ul><li>主系统准备好之后就可以建立预工具链了</li><li>建立预工具链的目的是建立临时工具链</li><li>预工具链由原工具链生成，即为原工具链(初始工具链)到临时工具链(目的工具链)的过渡工具链</li><li>预工具链建立之初是一个内部依赖方式的工具链，用它编译出来的程序文件将链接到主系统的Glibc(C标准库)上</li></ul><hr><ol start="3"><li>临时工具链的生成</li></ol><ul><li>临时工具链的目的是建立临时系统，临时系统需要脱离主系统的运行环境</li><li>临时工具链本身也是临时系统的重要组成部分，所以临时工具链也能够脱离主系统的运行环境</li><li>预工具链负责完成临时系统种的Glibc，当Glibc完成后对预工具链进行依赖方式的调整，使与工具链变为外部依赖的工具链</li><li>调整完成后生成临时编译工具，临时编译工具依赖于临时系统种的Glibc</li><li>临时编译工具与临时系统的Glibc一起组成临时工具链，预工具链的使命到此完成</li><li>临时工具链将代替预工具链完成临时系统的制作</li><li>临时工具链不依赖主系统下的函数库，临时工具链为内部依赖的形式</li></ul><p><strong>逻辑简述:</strong></p><blockquote><p><code>[主系统(源工具链/辅助命令/其它命令...)]-1-&gt;[预工具链]-2-&gt;[临时工具链]</code><br>同时<br><code>[辅助命令]-2-&gt;[临时工具链]</code></p></blockquote><hr><ol start="4"><li>临时系统的生成</li></ol><ul><li>编译一个软件往往除了编译器之外还需要其它程序的参与，仅仅靠临时工具链是无法完成目标系统的制作的</li><li>因此需要一个相对完整的工具链环境，临时系统将完成临时工具链环境的创建</li><li>临时工具链环境的创建过程需要主系统的辅助命令参与完成，在完成临时工具链环境的辅助命令后便完成了临时工具链</li><li>此时的临时工具链不再依赖主系统种的辅助命令编译软件了，为临时系统脱离主系统环境做好准备</li><li>临时工具链将继续完成临时系统的制作，临时系统的制作目的是为了给制作目标提供一个不依赖于主系统的编译环境</li><li>用临时工具链生成临时系统可保证其中各种工具环境所依赖的函数库也是临时系统种的函数库</li></ul><p><strong>逻辑简述:</strong></p><blockquote><p><code>[主系统(源工具链/辅助命令/其它命令...)]-1-&gt;[预工具链]-2-&gt;[临时系统(临时工具链)-3-&gt;(辅助命令)]</code><br>同时<br><code>[辅助命令]-3-&gt;[临时系统(辅助命令)]</code></p></blockquote><hr><ol start="5"><li>目标工具链</li></ol><ul><li>此时临时系统已经完成制作，接下来将要做的是让临时系统脱离主系统，即用临时系统去制作目标系统</li><li>同时为了能让目标系统称为自我扩展的系统，必须人为的为这个目标系统提供一个工具链</li><li>即用已经生成的临时系统来生成目标系统的Glibc，然后调整临时工具链使其编译出来的程序文件或库文件链接到目标系统的Glibc上</li><li>即内部依赖的临时工具链变成外部依赖方式，再编译目标系统上的Binuils和GCC</li><li>此时完成目标工具链的建立，下一步将再用目标工具链和生成目标工具链环境</li><li>此时临时工具链已经完成了使命，但临时工具链环境种的辅助命令还需要继续使用直到目标工具链中相应的辅助命令建立，从而形成目标工具链环境</li></ul><hr><ol start="6"><li>目标工具链环境的生成</li></ol><ul><li>为了让目标系统能够自给自足的进行扩展更新，目标系统需要带有最基本的编译环境</li><li>以上的操作已经将目标工具链生成，但使用的辅助命令还是临时系统中的命令</li><li>这个时候就需要人为的编译这些需要用到的辅助命令，并安装到目标系统中，以此成为目标工具链环境</li></ul><p><strong>逻辑简述:</strong></p><blockquote><p><code>[主系统(源工具链/辅助命令/其它命令...)]-1-&gt;[预工具链]-2-&gt;[临时系统(临时工具链)-3-&gt;(辅助命令)]</code><br>同时<br><code>[辅助命令]-3-&gt;[临时系统(辅助命令)]</code><br><strong>在以上步骤进行完成后</strong><br><code>[临时系统(临时工具链/辅助命令)]-4-&gt;[目标工具链]</code></p></blockquote><ul><li>按照生成临时系统的内容编译完各种辅助命令之后，就可以安装更多的辅助命令或其它程序了</li></ul><p><strong>在以上步骤进行完成后</strong></p><blockquote><p><code>[临时系统(临时工具链/辅助命令)]-4-&gt;[目标工具链环境(目标工具链)-5-&gt;(辅助命令)]</code><br>同时<br><code>[目标工具链环境(辅助命令)]&lt;-5-&gt;[临时系统(辅助命令)]</code></p></blockquote><hr><ol start="7"><li>目标系统的生成</li></ol><ul><li>在目标工具链环境生成之后将这个环境进一步完善，包括编辑工具，网络工具等，使之成为真正有用的目标系统</li><li>这部分内容的选择并没由什么限制与约束</li><li>在目标系统主体程序安装完毕后需要让这个系统能够正常而独立的运行起来，还需要人为的对启动过程进行处理</li></ul><p><strong>逻辑表示即为</strong></p><blockquote><p><code>[主系统]-预工具链-&gt;[临时系统]-&gt;[目标系统]</code></p></blockquote><p><strong>精准逻辑表示</strong></p><p><strong>区块一:</strong></p><blockquote><p><code>区块一(主系统-&gt;临时系统)</code><br><code>[主系统(源工具链/辅助命令/其它命令)]-1-&gt;预工具链-2-&gt;[临时系统(临时工具链-3-&gt;辅助命令)]</code><br>同时<br><code>[主系统(辅助命令)]-2-&gt;[临时系统(临时工具链-3-&gt;辅助命令)]</code><br>同时<br><code>[主系统(辅助命令)-3-&gt;[临时系统(辅助命令)]</code></p></blockquote><p><strong>区块二:</strong></p><blockquote><p><code>区块二(临时系统-&gt;目标系统)</code><br><code>[临时系统(临时工具链-3-&gt;辅助命令)]-4-&gt;[目标系统(目标系统工具链环境-5-&gt;辅助命令)-6-&gt;(其它命令...)]</code><br>同时<br><code>[临时系统(辅助命令)]-4-&gt;[目标系统(命令工具链)]</code><br><code>[临时系统(辅助命令)]&lt;-5-&gt;[目标系统(辅助命令)]</code></p></blockquote><hr><h3 id="执行逻辑一览-汇总"><a href="#执行逻辑一览-汇总" class="headerlink" title="执行逻辑一览(汇总)"></a>执行逻辑一览(汇总)</h3><ul><li><p>可以分为三个阶段，六个时间点(步骤点)</p></li><li><p>阶段一</p></li></ul><ol><li>利用主系统的工具链与辅助命令生成预工具链</li><li>利用主系统中的辅助命令与已经生成的预工具链生成临时系统中所需的临时工具链</li></ol><ul><li>阶段二</li></ul><ol start="3"><li>利用主系统中的辅助命令和临时系统中的临时工具链生成临时系统中的辅助命令</li><li>利用临时系统中的临时工具链和辅助命令生成目标系统中的目标工具链</li></ol><ul><li>阶段三</li></ul><ol start="5"><li>利用目标系统中的目标工具链生与临时系统中的辅助命令生成目标系统中的辅助命令，以此生成目标工具链环境(目标工具链+辅助命令)</li><li>利用目标系统中的目标工具链环境中的目标工具链和辅助命令生成其它命令</li></ol><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS-1</title>
    <url>/2020/02/22/LFS-1/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 18:46:51 GMT+0800 (中国标准时间) --><h2 id="Linux-from-Scratch-LFS-1"><a href="#Linux-from-Scratch-LFS-1" class="headerlink" title="Linux from Scratch/LFS-1"></a>Linux from Scratch/LFS-1</h2><hr><h3 id="资源整合目录"><a href="#资源整合目录" class="headerlink" title="资源整合目录"></a>资源整合目录</h3><p><strong>Linux from scratch</strong></p><ul><li>官方网站<a href="http://linuxfromscratch.org/" target="_blank" rel="noopener">跳转</a><blockquote><p><a href="http://linuxfromscratch.org/" target="_blank" rel="noopener">http://linuxfromscratch.org/</a></p></blockquote></li></ul><p><strong>LFS LiveCD</strong></p><ul><li><p>HTTP获取</p><blockquote><p><code>http://linuxfromscratch.org/livecd/download.html</code></p></blockquote></li><li><p>FTP获取</p><blockquote><p><code>http://ftp.osuosl.org/pub/lfs-livecd/lfslivecd-x86-6.3-r2145. iso</code></p></blockquote></li><li><p>LFS LiveCD说明<a href="http://linuxfromscratch.org/livecd/index.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://linuxfromscratch.org/livecd/index.html</code></p></blockquote></li><li><p>LFS wiki<a href="https://trac.clfs.org/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://trac.clfs.org/</code></p></blockquote></li><li><p>操作手册<a href="http://linuxfromscratch.org/lfs/downloads/9.1-rc1/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://linuxfromscratch.org/lfs/downloads/9.1-rc1/</code></p></blockquote></li><li><p>中文维基<a href="https://zh.wikipedia.org/wiki/Linux_From_Scratch" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Linux_From_Scratch</code></p></blockquote></li><li><p>从LFS官网下载的速度属实不言而喻(无论是FTP还是HTTP)</p></li><li><p>以下链接为永久有效</p></li><li><p>Version:<code>lfslivecd-x86-6.2-3</code></p></li><li><p>LFS LiveCD 百度网盘地址<a href="https://pan.baidu.com/s/1IROLau9-OxbN2f-BL3PJVA" target="_blank" rel="noopener">跳转</a></p><blockquote><p>URL:<code>https://pan.baidu.com/s/1IROLau9-OxbN2f-BL3PJVA</code><br>提取码:y0ss</p></blockquote></li><li><p>Version:<code>lfslivecd-x86-6.3-r2145</code></p><blockquote><p>链接<a href="https://pan.baidu.com/s/1ix83uytHKlvqaOUEa4Rq0w" target="_blank" rel="noopener">跳转</a><br>URL:<code>https://pan.baidu.com/s/1ix83uytHKlvqaOUEa4Rq0w</code><br>提取码:dlp4</p></blockquote></li><li><p>Version:<code>lfslivecd-x86_64-6.3-r2145</code></p><blockquote><p>链接<a href="https://pan.baidu.com/s/1R4T6j07yoR9JAO1U2EoClA" target="_blank" rel="noopener">跳转</a><br>URL:<code>https://pan.baidu.com/s/1R4T6j07yoR9JAO1U2EoClA</code><br>提取码:1atk</p></blockquote></li><li><p>linux公社仓库<a href="https://linux.linuxidc.com/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://linux.linuxidc.com/</code></p></blockquote></li></ul><hr><p><strong>GNU/Linux LFS Linux From Scratch</strong></p><ul><li><p>基础准备与Linux系统定制原理</p></li><li><p>LiveCD</p><blockquote><p>利用LFS的方法生成可以自行启动并安装了足够软件的CD<br>可以用来在空机器上安装LFS，或者直接在其上运行应用，已经停止维护</p></blockquote></li><li><p>Linux From Scratch简体中文版(version 9.0)<a href="https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://lctt.github.io/LFS-BOOK/lfs-sysv/LFS-BOOK.pdf</code></p></blockquote></li><li><p>Linux From Scratch简体中文版(全本版)<a href="https://lctt.github.io/LFS-BOOK/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://lctt.github.io/LFS-BOOK/</code></p></blockquote></li></ul><hr><p><strong>LFS官方教材所整理的步骤</strong></p><ul><li><p>在宿主操作系统上安装LFS，需要的步骤如下:</p></li><li><p>宿主机即为原主机，原主机可以是GNU/Linux任何发行版</p></li><li><p>对硬盘分区，添加用于安装LFS的用户和组(LFS教科书第2章)</p></li><li><p>下载所有需要的软件包源代码(LFS教科书第3章)</p></li><li><p>准备开发环境(LFS教科书第4章)</p></li><li><p>构造一个基本开发环境(称为工具链/LFS教科书第5章)</p></li><li><p>构造完整的目标系统(LFS教科书第6章)</p></li><li><p>配置系统启动脚本(LFS教科书第7章)</p></li><li><p>启动系统(LFS教科书第8章)</p></li><li><p>相关项目</p></li></ul><hr><h3 id="补充内容-1"><a href="#补充内容-1" class="headerlink" title="补充内容-1"></a>补充内容-1</h3><hr><ul><li><p>Building and Installing Software Packages for Linux<a href="http://www.tldp.org/HOWTO/Software-Building-HOWTO.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p>软件构建知识Software-Building-HOWTO<br><code>http://www.tldp.org/HOWTO/Software-Building-HOWTO.html</code></p></blockquote></li><li><p>Linux用户手册1<a href="http://www.linuxfromscratch.org/hints/downloads/files/essential_prereading.txt" target="_blank" rel="noopener">跳转</a></p><blockquote><p>The Linux Users’ Guide<br>The Essential Pre-Reading<br><code>http://www.linuxfromscratch.org/hints/downloads/files/essential_prereading.txt</code></p></blockquote></li><li><p>Linux用户手册2<a href="http://www.linuxhq.com/guides/LUG/guide.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>The Linux Users&#39; Guide http://www.linuxhq.com/guides/LUG/guide.html</code></p></blockquote></li><li><p>Linuxsir<a href="http://www.linuxsir.org/index.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxsir.org/index.html</code></p></blockquote></li><li><p>LFS-内容参考资料</p></li><li><p>作者:孙海勇(冲天飞豹)</p></li><li><p>书籍名称:手把手教你如何建立自己的Linux系统第一版以及第二版</p><blockquote><p>2008/2010</p></blockquote></li><li><p>网络有很多的URL和仓库都已经失效或废除了</p></li><li><p>以我目前拥有的水平与能力，似乎已经找不到更多的参考和资料了</p></li><li><p>即便找到也毫无意义，因为都是搜索引擎已经爬取过的数据了……</p></li></ul><hr><h3 id="FLS-1-补充内容-2"><a href="#FLS-1-补充内容-2" class="headerlink" title="FLS-1 补充内容-2"></a>FLS-1 补充内容-2</h3><p><strong>LFS目录简述与参考:</strong></p><ul><li>一阶段<blockquote><p>第0至1章节-序章与介绍<br>第2至4章节-准备工作</p></blockquote></li><li>二阶段<blockquote><p>第5章节-临时系统</p></blockquote></li><li>三阶段<blockquote><p>第6章节-目标系统</p></blockquote></li><li>四阶段<blockquote><p>第7章节-系统配置<br>第8章节-系统可导<br>第9章节-系统启动(完全抛离)<br>第10章节-最后的清理与附录(尾声)</p></blockquote></li></ul><hr><h3 id="相关内容URL整合目录补充内容"><a href="#相关内容URL整合目录补充内容" class="headerlink" title="相关内容URL整合目录补充内容"></a>相关内容URL整合目录补充内容</h3><ul><li><p>CN-Chroot<a href="https://zh.wikipedia.org/wiki/Chroot" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Chroot</code></p></blockquote></li><li><p>CN-Linux内核功能<a href="https://zh.wikipedia.org/wiki/Category:Linux%E5%86%85%E6%A0%B8%E5%8A%9F%E8%83%BD" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Category:Linux%E5%86%85%E6%A0%B8%E5%8A%9F%E8%83%BD</code></p></blockquote></li><li><p>CN-金步国的<code>Linux-4.4-x86_64</code>内核配置选项简介<a href="http://www.jinbuguo.com/kernel/longterm-linux-kernel-options.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.jinbuguo.com/kernel/longterm-linux-kernel-options.html</code></p></blockquote></li><li><p>CN-Unix实用程序列表<a href="https://zh.wikipedia.org/wiki/Unix%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Unix%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8</code></p></blockquote></li><li><p>EN-Linux From Scratch(Version 9.1-systemd-rc1)<a href="http://www.linuxfromscratch.org/lfs/downloads/9.1-systemd-rc1/LFS-BOOK-9.1-rc1-NOCHUNKS.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p>Published February 14th, 2020<br><code>http://www.linuxfromscratch.org/lfs/downloads/9.1-systemd-rc1/LFS-BOOK-9.1-rc1-NOCHUNKS.html</code></p></blockquote></li></ul><hr><ul><li><p>EN-Index of /lfs/downloads/9.1-systemd-rc1<a href="http://www.linuxfromscratch.org/lfs/downloads/9.1-systemd-rc1/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/downloads/9.1-systemd-rc1/</code></p></blockquote></li><li><p>EN-Download the Linux From Scratch Book<a href="http://www.linuxfromscratch.org/lfs/download.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/lfs/download.html</code></p></blockquote></li><li><p>CN-LFS(v9.0)<a href="https://lctt.github.io/LFS-BOOK/lfs-systemd/LFS-SYSD-BOOK.pdf" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://lctt.github.io/LFS-BOOK/lfs-systemd/LFS-SYSD-BOOK.pdf</code></p></blockquote></li><li><p>EN-The Linux From Scratch Counter<a href="http://www.linuxfromscratch.org/cgi-bin/lfscounter.php" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/cgi-bin/lfscounter.php</code></p></blockquote></li><li><p>EN-Linux Sea<a href="http://swift.siphos.be/linux_sea/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://swift.siphos.be/linux_sea/</code></p></blockquote></li><li><p>EN-其它发行版<a href="http://www.gentoo.org/" target="_blank" rel="noopener">Gentoo</a><a href="https://www.funtoo.org/Welcome" target="_blank" rel="noopener">Funtoo</a></p><blockquote><p>Gentoo: <code>http://www.gentoo.org/</code><br>Funtoo: <code>https://www.funtoo.org/Welcome</code></p></blockquote></li></ul><hr><h3 id="LFS补充内容"><a href="#LFS补充内容" class="headerlink" title="LFS补充内容"></a>LFS补充内容</h3><ul><li><p>相关书籍列表</p></li><li><p>《Linux From Scratch》（LFS）</p></li></ul><hr><ul><li>《Beyond Linux From Scratch》（BLFS）</li><li>提供了在LFS的基础上，进一步完善Linux基本系统的指引</li><li>在BLFS中，为系统增加网络、X桌面、声音、打印机和扫描仪支持<blockquote><p>标准LFS仅仅安装了足够让系统启动的基本软件，以及使新系统能够编译新软件包的开发工具<br>BLFS包括了更多的软件包，且都有相应指导<br>从5.0版开始，BLFS开始与LFS的版本号保持同步</p></blockquote></li></ul><hr><ul><li><p>《Cross Linux from Scratch》（CLFS）</p></li><li><p>用于描述交叉编译</p></li><li><p>为需要进行交叉编译(即在一个平台上编译另一个平台的代码)的用户提供指导，正式版本为1.0，另有两个变种</p><blockquote><p>《CLFS Sysroot》 采用Sysroot的方法来进行编译，好处是软件包的编译次数可以减少，坏处是不能支持在编译后对软件进行测试，必须要启动到目标平台上才能测试<br>《CLFS Embedded》 一般用于极小系统以及嵌入式系统<br>为此，它使用uclibc而不是一般LFS使用的glibc<br>该项目已停止维护，其官网已无法访问</p></blockquote></li><li><p>《Hardened Linux From Scratch》（HLFS）</p></li><li><p>此书专注于Linux系统的安全</p><blockquote><p>这个子项目致力于打造在安全性上无懈可击的Linux系统</p></blockquote></li></ul><hr><ul><li>《Automated Linux From Scratch》（ALFS）</li><li>标准的LFS只是一本书，用户需要根据书上的指引下载软件包并手动输入指令进行编译<blockquote><p>ALFS子项目提供了把这一切自动化的脚本</p></blockquote></li></ul><hr><ul><li>Hints<blockquote><p>收集一些解释性、增强性的文档，以协助用户</p></blockquote></li></ul><hr><ul><li>LiveCD<blockquote><p>利用LFS的方法生成可以自行启动并安装了足够软件的CD<br>可以用来在空机器上安装LFS，或者直接在其上运行应用<br>已经停止维护</p></blockquote></li></ul><hr><ul><li>Patches<blockquote><p>由于软件之间的依赖关系，在升级软件包之后可能会导致LFS的过程出现故障<br>Patch项目致力于研究最新版本的软件之间的互动，并提供一些补丁修复这些故障</p></blockquote></li></ul><hr><ul><li>《Community Driven BLFS》(CBLFS)<blockquote><p>该项目实际是一个Wiki网站<br>依靠网友的自发贡献来提交各种软件包的安装方式</p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ul><li><p>CN-中文维基<a href="https://zh.wikipedia.org/wiki/Linux_From_Scratch" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/Linux_From_Scratch</code></p></blockquote></li><li><p>LFS官方网站<a href="http://www.linuxfromscratch.org/lfs/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.linuxfromscratch.org/</code><br><code>http://www.linuxfromscratch.org/lfs/</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Zsh-1</title>
    <url>/2020/02/21/Zsh-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h2 id="Shell-Zsh"><a href="#Shell-Zsh" class="headerlink" title="Shell-Zsh"></a>Shell-Zsh</h2><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h3><ul><li>配置过程</li></ul><p><strong>相关指令:</strong></p><ul><li>查看系统当前使用的shell<blockquote><p><code>$ echo $SHELL</code></p></blockquote></li></ul><hr><ul><li>查看系统支持Shell列表<blockquote><p><code>$ cat /etc/shells</code></p></blockquote></li></ul><hr><ul><li>安装zsh<blockquote><p><code>apt-get -y install zsh</code></p></blockquote></li></ul><hr><ul><li>切换shell为zsh<blockquote><p><code>$ chsh -s /bin/zsh</code></p></blockquote></li></ul><hr><ul><li>修改主题<blockquote><p><code>$ vim ~/.zshrc</code></p></blockquote></li></ul><hr><ul><li>这里将<code>ZSH_THEME</code>改成ys<blockquote><p><code>ZSH_THEME=&quot;ys&quot;</code></p></blockquote></li></ul><p>–</p><ul><li>更新配置<blockquote><p><code>$ source ~/.zshrc</code></p></blockquote></li></ul><hr><p><strong>补全插件配置:</strong></p><ul><li><p>incr.zsh补全插件下载</p><blockquote><p><code>$ wget http://mimosa-pudica.net/src/incr-0.2.zsh</code></p></blockquote></li><li><p>将此插件放到oh-my-zsh目录的插件库下:</p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">$cd ~/.oh-my-zsh/plugins/<span class="keyword">incr</span></span><br><span class="line">$mkdir <span class="keyword">incr</span></span><br><span class="line"><span class="comment"># root @ debian in ~/.oh-my-zsh/plugins/incr on git:master x [15:05:07] </span></span><br><span class="line">$ ls</span><br><span class="line"><span class="keyword">incr</span><span class="number">-0.2</span>.zsh</span><br></pre></td></tr></table></figure></li><li><p>在~/.zshrc文件末尾加上</p><blockquote><p><code>emacs ~/.zshrc</code><br><code>source ~/.oh-my-zsh/plugins/incr/incr*.zsh</code></p></blockquote></li><li><p>更新配置:</p><blockquote><p><code>$ source ~/.zshrc</code></p></blockquote></li></ul><hr><p><strong>与vim的提示冲突的解决方法:</strong></p><ul><li>使用自动补全插件可能会与vim的提示功能相冲突，如会报以下错误:</li></ul><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">vim</span> t</span><br><span class="line">_argument<span class="variable">s:451</span>: _vim_file<span class="variable">s:</span> <span class="function"><span class="keyword">function</span> <span class="title">definition</span> <span class="title">file</span> <span class="title">not</span> <span class="title">found</span></span></span><br></pre></td></tr></table></figure><hr><ul><li>解决方法：将<code>~/.zcompdump*</code>删除即可<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf ~/.zcompdump*</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span> zsh</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>获取方式(Git/Curl/Wget):</strong></p><ul><li><p>Git拉取并安装</p><blockquote><p><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></p></blockquote></li><li><p>Curl</p><blockquote><p><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p></blockquote></li><li><p>Wget</p><blockquote><p><code>sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></p></blockquote></li><li><p>Git源码地址<a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/ohmyzsh/ohmyzsh</code></p></blockquote></li><li><p>Zsh主题乐园<a href="http://blog.ysmood.org/my-ys-terminal-theme/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://blog.ysmood.org/my-ys-terminal-theme/</code></p></blockquote></li></ul><hr><p><strong>参考资料(技术博客):</strong></p><ul><li><p>修改Linux的shell从默认的bash切换为zsh<a href="http://www.findme.wang/blog/detail/id/282.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.findme.wang/blog/detail/id/282.html</code></p></blockquote></li><li><p>oh-my-zsh,让你的终端从未这么爽过<a href="https://www.jianshu.com/p/d194d29e488c" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.jianshu.com/p/d194d29e488c</code></p></blockquote></li><li><p>写给 Pythonist 的 Spacemacs 入门指北<a href="https://www.jianshu.com/p/c5cc672aae63" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.jianshu.com/p/c5cc672aae63</code></p></blockquote></li><li><p>oh-my-zsh,最好用的shell,没有之一<a href="https://www.itshutong.com/articles/281/oh-my-zsh-the-best-shell-none" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.itshutong.com/articles/281/oh-my-zsh-the-best-shell-none</code></p></blockquote></li></ul><hr><p><strong>其它内容:</strong></p><ul><li><p>Shell<a href="">跳转</a></p><blockquote><p>本篇<br><code>oh my zsh</code></p></blockquote></li><li><p>编辑器<a href="http://unit-serow.com/2020/02/21/Emacs-1/#more" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>spacemacs</code></p></blockquote></li><li><p>X window<a href="http://unit-serow.com/2020/02/20/Window-1/#more" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>X.org/GNOME</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔-2020-2-2-21</title>
    <url>/2020/02/21/%E9%9A%8F%E7%AC%94-2020-2-2-21/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 22:18:00 GMT+0800 (中国标准时间) --><h3 id="编程语言知识体系概述与整合-1"><a href="#编程语言知识体系概述与整合-1" class="headerlink" title="编程语言知识体系概述与整合-1"></a>编程语言知识体系概述与整合-1</h3><ul><li>C/C++</li></ul><h2 id="编程语言初级知识体系整合"><a href="#编程语言初级知识体系整合" class="headerlink" title="编程语言初级知识体系整合"></a>编程语言初级知识体系整合</h2><p><strong>类型汇总:</strong></p><ul><li>面向过程OO Procedure Oriented</li><li>面向对象OOP</li><li>面向数据</li><li>脚本语言</li><li>汇编语言</li></ul><hr><p><strong>语言类型:</strong></p><ul><li><p>架构描述语言</p></li><li><p>硬件描述语言</p></li><li><p>置标语言</p></li><li><p>建模语言</p></li><li><p>编程语言</p></li><li><p>查询语言</p></li><li><p>规约语言</p></li><li><p>样式表语言</p></li><li><p>模板语言</p></li><li><p>转换语言</p></li><li><p>中文维基<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80</code></p></blockquote></li></ul><hr><p><strong>通用概念整合:</strong></p><ol><li>程序结构(独有)</li><li>基本语法(独有)</li><li>数据类型(通用)</li><li>变量(通用)</li><li>常量(通用)</li><li>运算符(通用)</li><li>函数/回调函数/方法(通用)</li><li>判断(通用)</li><li>循环(通用)</li><li>作用域(通用)</li><li>数组(通用)</li><li>枚举(通用)</li><li>字符串(通用)</li><li>输入&amp;输出/I&amp;O(通用)</li><li>文件读写(通用)</li><li>别名/typedef(通用)</li><li>强制类型转换(通用)</li><li>错误/异常处理(通用)</li><li>递归(通用)</li><li>算法(通用)</li><li>命令行参数(通用)</li><li>标准库(通用)</li><li>修饰符(通用)</li><li>引用(通用)</li><li>日期/时间(通用)</li><li>数据结构(通用)</li><li>多线程(通用)</li><li>类(通用)</li><li>命名空间(通用)</li></ol><hr><p><strong>C/C++:</strong></p><ol><li>预处理器</li><li>头文件</li><li>指针/指针函数</li><li>存储类</li><li>结构体</li><li>共用体</li><li>位域</li><li>内存管理</li><li>可变参数</li><li>面向过程</li><li>面向对象</li></ol><hr><p><strong>通用概念:</strong></p><ul><li>程序结构(独有)</li><li>基本语法(独有)</li><li>数据类型(通用)</li><li>运算符(通用)</li><li>修饰符(通用)</li><li>标准库(通用)</li><li>强制类型转换(通用)</li></ul><hr><p><strong>纯粹概念:</strong></p><ul><li>算法(通用)</li><li>类(通用)</li><li>多线程(通用)</li><li>数据结构(通用)</li><li>递归(通用)</li><li>字符串(通用)</li><li>循环(通用)</li><li>判断(通用)</li></ul><hr><p><strong>方法概念:</strong></p><ul><li>引用(通用)</li><li>错误/异常处理(通用)</li><li>别名/typedef(通用)</li><li>文件读写(通用)</li><li>输入&amp;输出/I&amp;O(通用)</li><li>枚举(通用)</li><li>数组(通用)</li><li>作用域(通用)</li><li>函数/回调函数/方法(通用)</li><li>变量(通用)</li><li>常量(通用)</li><li>包括头文件或预处理器等独有概念</li></ul><hr><ul><li><p>存储概念与通用概念只需要初步认识，方法概念和小部分通用概念需要多次实践</p></li><li><p>大概率会有遗漏，学习过程中对其进行补充</p></li></ul><hr><h3 id="其它-饼"><a href="#其它-饼" class="headerlink" title="其它(饼)"></a>其它(饼)</h3><p><strong>应用操作系统:</strong></p><ul><li>Debian(10.02/Buster)</li></ul><hr><p><strong>应用文本编辑器:</strong></p><ul><li>Spacemacs</li><li>Emacs</li><li>Vim</li></ul><hr><p><strong>语言路线:</strong></p><ol><li>C</li><li>PHP</li><li>Lisp</li><li>C++</li><li>Python</li><li>Ruby</li><li>Perl</li><li>C#</li><li>JavaScript</li><li>Java</li></ol><ul><li>其它框架汇总(框架)</li><li>其它拓展与插件(扩展)</li></ul><hr><p><strong>补充内容</strong></p><ul><li>对于语言的学习还包括一些工具独有的语言<blockquote><p>类似于Node.js</p></blockquote></li></ul><hr><p><strong>目标Linux发行版</strong></p><ul><li><p>基本要求一览</p></li><li><p>基本系统工具与程序</p></li><li><p>其它辅助工具与程序</p></li><li><p>命令提示符 bash/zsh</p></li><li><p>包管理器 Portage/npm</p></li><li><p>图形化 x window</p></li><li><p>编辑器 vim/emacs-spacemacs</p></li><li><p>网络支持 networkmanager</p></li><li><p>其它服务 docker</p></li><li><p>其它硬件设备接口支持</p></li></ul><hr><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Emacs-1</title>
    <url>/2020/02/21/Emacs-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Emacs-1"><a href="#Emacs-1" class="headerlink" title="Emacs-1"></a>Emacs-1</h3><h3 id="Emacs快捷键快速参考-参考资料整理"><a href="#Emacs快捷键快速参考-参考资料整理" class="headerlink" title="Emacs快捷键快速参考(参考资料整理)"></a>Emacs快捷键快速参考(参考资料整理)</h3><p><strong>基本快捷键(常用且泛用):</strong></p><ul><li>C/M/De说明:<blockquote><p>C(Control/Ctrl)<br>M(Meta/Alt|Esc)<br>De(Backspace)</p></blockquote></li></ul><table><thead><tr><th align="left">指令</th><th align="left">作用</th><th align="left">摘要</th></tr></thead><tbody><tr><td align="left">C-x C-s</td><td align="left">保存文件</td><td align="left">保存</td></tr><tr><td align="left">C-x C-w</td><td align="left">使用其他文件名另存为文件</td><td align="left">另存为</td></tr><tr><td align="left">C-x C-f</td><td align="left">“find”文件, 即在缓冲区打开/新建一个文件</td><td align="left">新建</td></tr><tr><td align="left">C-z</td><td align="left">挂起emacs</td><td align="left">挂起</td></tr><tr><td align="left">C-x C-c</td><td align="left">关闭emacs</td><td align="left">关闭</td></tr><tr><td align="left">C-x i</td><td align="left">在当前光标处插入文件</td><td align="left">插入</td></tr><tr><td align="left">C-x C-v</td><td align="left">关闭当前缓冲区文件并打开新文件</td><td align="left">关闭缓冲区</td></tr><tr><td align="left">C-x b</td><td align="left">新建/切换缓冲区</td><td align="left">新建缓冲区</td></tr><tr><td align="left">C-x C-b</td><td align="left">显示缓冲区列表</td><td align="left">缓冲区信息</td></tr><tr><td align="left">C-x k</td><td align="left">关闭当前缓冲区</td><td align="left">关闭缓冲区</td></tr><tr><td align="left">M-n</td><td align="left">重复执行后一个命令n次</td><td align="left">宏</td></tr><tr><td align="left">C-d</td><td align="left">删除(delete)后一个字符</td><td align="left">删除字符</td></tr><tr><td align="left">M-d</td><td align="left">删除后一个单词</td><td align="left">删除字符串</td></tr><tr><td align="left">C-k</td><td align="left">移除(kill)一行</td><td align="left">删除行</td></tr><tr><td align="left">C-g</td><td align="left">停止当前运行/输入的命令</td><td align="left">停止</td></tr><tr><td align="left">C-x u</td><td align="left">撤销前一个命令</td><td align="left">撤销</td></tr><tr><td align="left">C-s</td><td align="left">向后搜索</td><td align="left">搜索</td></tr><tr><td align="left">C-r</td><td align="left">向前搜索</td><td align="left">搜索</td></tr><tr><td align="left">M-x shell</td><td align="left">打开shell模式</td><td align="left">shell</td></tr></tbody></table><hr><p><strong>帮助指令:</strong></p><table><thead><tr><th align="left">指令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">C-h c</td><td align="left">显示快捷键绑定的命令</td></tr><tr><td align="left">C-h k</td><td align="left">显示快捷键绑定的命令和它的作用</td></tr><tr><td align="left">C-h l</td><td align="left">显示最后100个键入的内容</td></tr><tr><td align="left">C-h w</td><td align="left">显示命令被绑定到哪些快捷键上</td></tr><tr><td align="left">C-h f</td><td align="left">显示函数的功能</td></tr><tr><td align="left">C-h v</td><td align="left">显示变量的含义和值</td></tr><tr><td align="left">C-h b</td><td align="left">显示当前缓冲区所有可用的快捷键</td></tr><tr><td align="left">C-h t</td><td align="left">打开emacs教程</td></tr><tr><td align="left">C-h i</td><td align="left">打开info阅读器</td></tr><tr><td align="left">C-h C-f</td><td align="left">显示emacs FAQ</td></tr><tr><td align="left">C-h p</td><td align="left">显示本机Elisp包的信息</td></tr></tbody></table><hr><h3 id="其它"><a href="#其它" class="headerlink" title="其它:"></a>其它:</h3><p><strong>指令集类型一共可以分为七种类型(具体可参考参考资料):</strong></p><ol><li>基本快捷键(Basic)</li><li>光标移动基本快捷键(Basic Movement)</li><li>编辑(Editint)</li><li>重要快捷键(Important)</li><li>在线帮助(Online-Help)</li><li>搜索/替换(Seach/Replace)</li><li>使用正则表达式(Regular expression)搜索/替换</li><li>窗口命令(Window Commands)</li><li>书签命令(Bookmark commands)</li><li>Text</li><li>Telnet</li><li>DIRectory EDitor (dired)</li><li>Shell</li><li>宏命令(Macro-commands)</li><li>编程(Programming)</li><li>GDB(调试器)</li><li>版本控制(Version Control)</li></ol><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ul><li><p>官方网站<a href="https://www.gnu.org/software/emacs/emacs.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.gnu.org/software/emacs/emacs.html</code></p></blockquote></li><li><p>官方手册<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.gnu.org/software/emacs/manual/html_mono/emacs.html</code></p></blockquote></li><li><p>Emacs Lisp<a href="https://www.gnu.org/software/emacs/manual/html_mono/elisp.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.gnu.org/software/emacs/manual/html_mono/elisp.html</code></p></blockquote></li><li><p>获取地址:<a href="https://www.gnu.org/software/emacs/download.html#gnu-linux" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.gnu.org/software/emacs/download.html#gnu-linux</code></p></blockquote></li><li><p>国内社区<a href="https://emacs-china.org/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://emacs-china.org/</code></p></blockquote></li><li><p>apt-get获取</p><blockquote><p><code>apt-get -y install emacs</code><br>插件和拓展的配置与安装本章节不会多做赘述</p></blockquote></li><li><p>spacemacs仓库/获取地址<a href="https://github.com/syl20bnr/spacemacs" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/syl20bnr/spacemacs</code></p></blockquote></li><li><p>spacemacs获取方式</p><blockquote><p><code>git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d</code></p></blockquote></li></ul><hr><p><strong>其它指令参考网站:</strong></p><ul><li><p>CN-2015-Emacs常用基本快捷键<a href="https://gist.github.com/shijinkui/2048195" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://gist.github.com/shijinkui/2048195</code></p></blockquote></li><li><p>CN-2008-Emacs快捷键列表<a href="https://aifreedom.com/technology/112" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://aifreedom.com/technology/112</code><br>这个相当详细</p></blockquote></li><li><p>CN-2019-Emacs常用快捷键一览<a href="https://qiutedyuan.github.io/blog/2019/06/12/Emacs%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://qiutedyuan.github.io/blog/2019/06/12/Emacs%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88/</code></p></blockquote></li></ul><hr><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></p><p><a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a></p><hr><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><ul><li>2020-02-21<blockquote><p>20.46</p></blockquote></li></ul><hr><h3 id="Spacemacs"><a href="#Spacemacs" class="headerlink" title="Spacemacs"></a>Spacemacs</h3><p><strong>spacemacs参考资料</strong></p><ul><li><p>其它功能拓展与插件</p></li><li><p>代码补全</p><blockquote><p>自动补全 (company mode)</p></blockquote></li><li><p>语法高亮</p><blockquote><p>语法高亮 (Org-mode)</p></blockquote></li><li><p>其它工具</p><blockquote><p>major mode<br>minor mode</p></blockquote></li><li><p>编程/编译环境</p></li></ul><hr><p><strong>参考文献:</strong></p><ul><li><p>中文社区<a href="https://emacs-china.org/c/spacemacs" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://emacs-china.org/c/spacemacs</code></p></blockquote></li><li><p>EN-文档<a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org</code></p></blockquote></li><li><p>代码仓库<a href="https://github.com/syl20bnr/spacemacs" target="_blank" rel="noopener">跳转</a></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/syl20bnr/</span>spacemacs</span><br><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/syl20bnr/</span>spacemacs.git</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>EN-Wiki<a href="https://en.wikipedia.org/wiki/Spacemacs" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://en.wikipedia.org/wiki/Spacemacs</code></p></blockquote></li><li><p>技术博客子龙山人</p><blockquote><p><code>https://zilongshanren.com/</code></p></blockquote></li><li><p>CSND某博客<a href="https://blog.csdn.net/csfreebird/article/details/52744771" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://blog.csdn.net/csfreebird/article/details/52744771</code></p></blockquote></li></ul><hr><h3 id="相关工具整理"><a href="#相关工具整理" class="headerlink" title="相关工具整理:"></a>相关工具整理:</h3><ul><li><p>zsh</p><blockquote><p>Z shell(Zsh)是一款可用作交互式登录的shell及脚本编写的命令解释器<br>Zsh对Bourne shell做出了大量改进，同时加入了Bash、ksh及tcsh的某些功能<br>实现工具: <code>oh-my-zsh</code></p></blockquote></li><li><p>参考网站:<a href="https://www.jianshu.com/p/d194d29e488c" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.jianshu.com/p/d194d29e488c</code></p></blockquote></li><li><p>Python管理工具</p><blockquote><p>pyenv<br>pyenv virtualenv</p></blockquote></li><li><p>其它工具</p><blockquote><p>nvm<br>npm</p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔-2020-02-21</title>
    <url>/2020/02/21/%E9%9A%8F%E7%AC%94-2020-02-21/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="87deb0e124594934904c8a13f10a571ed44fc2afe3b91a81e6582244a838806e">0267ec72f19b8c198697a4f72870a3a82638093160e2b2cc12e4971a299433a85dd13c409b2aae5651484d0d3c6e8e0902b987088f15325ec7c717d0d75de1e789749f671156adfab38a5f8b1a3636b6a048b13c56a591946f7f7aeade85a17729a767c755d2b8c62dabb909ac327124eb89ee1ce64bd28b4ea5dd1cffe39326db8731969accf15d33050d1ee5869ba205f0ec7d6629ffde58bb6da95b948dbeae74b0d0cfde2a9d21aa1a27540fd122fedb7931e1a586e976836e2df3a1c0c2a20a89c283f3cd80967a2e285122deabe948c404140d956d2a5dc4b0bbb8ebe743144619096f9920b49aadd4ce00cfde035b1f2ffd08aa545faac0e38cc65b6b6886eea5681151c2ef27788d700fe6433a7492099c38693ae2ecc3a8707b8697b40b60967574be9b1914b60612dd3c6549e4349a6426e05099beab99898d629cdc6db46d1700343f8a4f84f066005c4330dcb29176605f1157efecd983f360f94e2865e41eb497f25d129b76ee3e8f922c4b1c4a2f208d4b446e42bd185e78f7d86f005d25788e8fa2ce7492199549f6d412d6dc36aed89e01c0b3a5c3b60447bd2e13b5a0917c12976755d54e1f70bc3a4d1b691f37f0309e292680bee5d0dd85ad67791bf068908db95390c826c9e3c7e12f21930a159181139106e0365514eff59f9f0f47a9d17dd2c2d9fdd0697a5db138021c9d81b5e9584cbae3932719af9694c7e3e93d06eefba02b660850a81c0de4dd73f75a0e44d4d6b4ece032a35937db2602967e140a5cdc611095ab0348d710f14038dfc21980c912420f0075fcb6149dfd61260e8e7d81c4c6a7364976c12b57abffa1c31dafd47c2d58fc2b0a5720e9316d9ae3e5f493852ae260d1783886e63a5f8bf4196a668f21c970bbbcc80f8fc60ef7a6806af6de65ceaad0ed3917b4bcb52c3a5cbf2b43d434fc421b38217666de3043a43e8b43905e191c</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>X Window-1</title>
    <url>/2020/02/20/Window-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="X-Window-System"><a href="#X-Window-System" class="headerlink" title="X Window System"></a>X Window System</h3><p><strong>概述:</strong></p><ul><li>X 窗口系统，别称/X11/X</li><li>X以位图方式显示的软件窗口系统</li><li>X能为GUI环境提供基本的框架</li><li>X只是工具包及架构规范，本身并无实际参与运作的实体，所以必须有人依据此标准进行开发撰写<blockquote><p>X只是一个协议(protocal)，这个协议定义一个系统成品所必需具备的功能<br>任何系统能满足此协议及符合Ｘ协会其他的规范，便可称为X</p></blockquote></li><li>标准实现体:X.Org(显示服务器)，XFree86(显示服务器)</li><li>GNOME(显示管理器)和KDE(显示管理器)是以X11窗口系统为基础建构成的</li><li>X的标准实现是X.Org的参考实现</li><li>基于MIT许可证授权</li></ul><hr><ul><li>最初是1984年麻省理工学院的研究，之后变成UNIX、类UNIX、以及OpenVMS等操作系统所一致适用的标准化软件工具包及显示架构的运作协议</li><li>最新的参考实现(参考性、示范性的实现体)版本则是X11 Release 7.7(简称：X11R7.7)，时间为2012年6月6日</li></ul><hr><p><strong>X的C/S模型</strong></p><ul><li>X采用C/S的架构模型(Client/Server)<blockquote><p>X的一大特点:网络透明性<br>应用程序(“客户端”应用程序)所运行的机器，不一定是用户本地的机器(显示的”服务器”)<br>X中所提及的”客户端”和”服务器”等字眼用词也经常与人们一般想定的相反<br>“服务器”反而是在用户本地端的自有机器上运行，而非是在远程的另一部机器上运行</p></blockquote></li></ul><hr><p><strong>网络透明性</strong></p><ul><li>服务器和客户端之间的通信协议的运作对计算机网络是透明的<blockquote><p>客户端和服务器可以在同一台计算机上，也可以不是，或许其架构和操作系统也不同，但都能运行<br>客户机和服务器还能够使用安全连接在互联网上安全地通讯</p></blockquote></li></ul><hr><p><strong>X Terminal</strong></p><ul><li>X Terminal(X 终端机)</li><li>作为仅运行X服务器的<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>瘦客户端(Thin Client)的作用硬件</li><li>该架构广泛用于为了使多人同时使用同一个大型服务器而构造终端</li><li>X终端搜索网络，使用XDMCP产生允许其运行客户机的主机列表</li><li>初始主机需要运行X显示管理器</li><li>专用的X终端机硬件已经于上个世纪被淘汰了</li><li>在1990年初期也被称为”穷人的UNIX工作站”</li></ul><hr><h3 id="安装显示服务器-显示管理器-X-org-XFree86-GNOME-Xface"><a href="#安装显示服务器-显示管理器-X-org-XFree86-GNOME-Xface" class="headerlink" title="安装显示服务器/显示管理器(X.org/XFree86-GNOME/Xface)"></a>安装显示服务器/显示管理器(X.org/XFree86-GNOME/Xface)</h3><ul><li>X11</li><li>apt源推荐(非必要)<blockquote><p><code>$emacs /etc/apt/sources.list</code><br><code>deb http://mirrors.geekbone.org/debian/ sid main contrib non-free</code><br><code>deb-src http://mirrors.geekbone.org/debian/ sid main contrib non-free</code></p></blockquote></li></ul><hr><blockquote><p><code>deb http://debian.cn99.com/debian/ sid main contrib non-free</code><br><code>deb-src http://debian.cn99.com/debian/ sid main contrib non-free</code><br><code>deb http://debian.okey.net/debian-uo/ sid java marillat rareware misc</code></p></blockquote><hr><ul><li><p>安装依赖项以及<code>X.org/GNOME</code></p><blockquote><p><code>apt-get -y install xbase-clients</code><br><code>apt-get -y install x-window-system-core</code><br><code>apt-get -y install xfonts-base (xfs为字体服务器)</code><br><code>apt-get -y install xserver-xorg*</code><br><code>apt-get -y install fvwm2</code><br><code>apt-get -y install menu</code><br><code>apt-get -y install gnome-core (gnome安装，以gnome为窗口管理器)</code><br><code>apt-get -y install gdm*</code><br><code>apt-get -y install xscreensaver-gnome</code>或<code>apt-get -y install xscreensaver*</code><br><code>&#39;*&#39;</code>为UNIX内标准通配符之一</p></blockquote></li><li><p>其它(XFCE4/XFREE86)</p><blockquote><p><code>apt-get -y install xfce4</code><br><code>apt-get -y install xserver-xfree86</code><br><code>dpkg-reconfigure xserver-xfree86 (重新配置)</code><br><code>apt-get -y install mozilla-firefox (浏览器安装)</code></p></blockquote></li><li><p>参数<code>-y</code>假定对所有的询问选是，不提示</p></li><li><p>可以选择是否添加(安装)中文补丁(一般安装系统的时候就会选择)</p></li><li><p>启动执行startx命令</p></li><li><p>便捷安装:</p><blockquote><p><code>apt-get -y install X Windows System*</code><br><code>apt-get -y install GNOME*</code></p></blockquote></li><li><p>音量错误解决方法</p><blockquote><p><code>apt-get install alsa-base</code><br><code>apt-get install alsa-utils</code></p></blockquote></li></ul><hr><h3 id="其它概念"><a href="#其它概念" class="headerlink" title="其它概念:"></a>其它概念:</h3><ul><li>X Window所关系的概念非常庞大，以至于包含整个UNIX体系的图形化界面的历史与技术</li></ul><p><strong>包含于:</strong></p><blockquote><p>X Window 架构<br>X Window 拓展<br>X Window 显示服务器<br>X Window 显示管理器<br>X Window 会话管理器<br>X Window 窗口管理器(合成/平铺/堆叠)<br>X Window 标准<br>X Window 应用程序<br>X Window 桌面环境</p></blockquote><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ul><li><p>X.org官方网站<a href="https://www.x.org/wiki/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.x.org/wiki/</code></p></blockquote></li><li><p>X.org官方文档<a href="https://www.x.org/wiki/Documentation/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.x.org/wiki/Documentation/</code></p></blockquote></li><li><p>X.org镜像源<a href="https://www.x.org/wiki/Releases/Download/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.x.org/wiki/Releases/Download/</code></p></blockquote></li><li><p>X.org获取地址<a href="https://www.x.org/releases/individual/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.x.org/releases/individual/</code></p></blockquote></li></ul><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">指的是在客户端-服务器网络体系中的一个基本无需应用程序的计算哑终端</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>X Window</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔-2020-02-19</title>
    <url>/2020/02/19/%E9%9A%8F%E7%AC%94-2020-02-19/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9721f753e493855af1aadcb78aa06c51bd716eed66290e85c76993c46bd4f7b6"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-3</title>
    <url>/2020/02/19/SQL-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="SQL-1-SQL2-补充内容"><a href="#SQL-1-SQL2-补充内容" class="headerlink" title="SQL-1/SQL2 补充内容"></a>SQL-1/SQL2 补充内容</h3><p><strong>增/删/改/查(SQL涉及概念补充):</strong></p><ul><li><p>增/改</p><blockquote><p>序列(AUTO INCREMENT)<br>插入(INSERT INTO)<br>更新(UPDATE)<br>创建(CREATE)<br>修改与创建(ALTER)</p></blockquote></li><li><p>查</p><blockquote><p>唯一值(DISTINCT)<br>条件(逻辑)语句(WHERE/LIKE/AND&amp;OR/IN/BETWEEN)<br>排序(ORDER BY)<br>限制返回数量(TOP,LIMIT,ROWNUM)</p></blockquote></li><li><p>删</p><blockquote><p>DELETE<br>DROP</p></blockquote></li></ul><hr><p><strong>通用概念总览:</strong></p><ul><li>通配符</li><li>通用数据类型</li><li>DB 数据类型</li><li>别名(AS)</li><li>视图(VIEW)</li><li>日期(DATES)</li><li>索引(INDEX)</li><li>合并(UNION)</li><li>NULL(NULL值，NULL函数，NULL约束)</li><li>复制(SELECT INTO/INSERT INTO SELECT)</li><li>连接(JOIN/(INNER,LEFT,RIGHT,OUTER,FULL))</li><li>约束(Constraints(NOT NULL/UNIQUE/PRIMARY KEY/FOREIGN KEY/CHECK/DEFAULT))</li><li>函数(聚合函数/其它函数)</li></ul><hr><p><strong>JDBC</strong></p><ul><li>JDBC API允许用户访问任何形式的表格数据，尤其是存储在关系数据库中的数据</li><li>执行流程:</li></ul><ol><li>连接数据源，如：数据库</li><li>为数据库传递查询和更新指令</li><li>处理数据库响应并返回的结果</li></ol><hr><p><strong>ODBC</strong></p><ul><li>开放数据库互连(Open DataBase Connectivity)</li><li>是微软公司开放服务结构(WOSA，Windows Open Services Architecture)中有关数据库的一个组成部分</li><li>它建立了一组规范，并提供了一组对数据库访问的标准API(应用程序编程接口)</li><li>这些API利用SQL来完成其大部分任务</li><li>ODBC本身也提供了对SQL语言的支持，用户可以直接将SQL语句送给ODBC</li></ul><hr><p><strong>PowerBuilder/PB</strong></p><ul><li>是美国Sybase公司研制的一种新型，快速开发工具，结构为C/S(客户机/服务器结构)</li><li>是基于Windows3.x、Windows95和WindowsNT的一个集成化开发工具</li><li>它包含一个直观的图形界面和可扩展的面向对象的编程语言PowerScript，提供与当前流行的大型数据库的接口，并通过ODBC与单机数据库相连</li></ul><hr><p><strong>PL/SQL</strong></p><ul><li>ORACLE客户端连接器</li></ul><p><strong>CYNOSDB</strong></p><ul><li>云数据库(Cynosdb)</li></ul><hr><h3 id="Oracle-PL-SQL"><a href="#Oracle-PL-SQL" class="headerlink" title="Oracle-PL/SQL"></a>Oracle-PL/SQL</h3><ul><li>客户端与连接工具</li></ul><p><strong>解释:</strong></p><ul><li>Oracle Database Software Express Edition 精简版</li><li>Oracle Database Software Enterprise Edition 企业版</li></ul><hr><p><strong>参考资料:</strong></p><p><strong>客户端(Client):</strong></p><ul><li><p>安装指南<a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/xeinl/lot.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.oracle.com/en/database/oracle/oracle-database/18/xeinl/lot.html</code></p></blockquote></li><li><p>文档/手册<a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/index.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/" target="_blank" rel="noopener">https://docs.oracle.com/en/database/oracle/oracle-database/</a><br><code>https://docs.oracle.com/en/database/oracle/oracle-database/18/index.html</code></p></blockquote></li><li><p>EN-文献资料<a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.oracle.com/en/</code></p></blockquote></li><li><p>获取地址<a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c</code></p></blockquote></li><li><p>官方网站<a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.oracle.com/index.html</code></p></blockquote></li><li><p>CN-文档<a href="https://www.oracle.com/technetwork/cn/indexes/documentation/index.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.oracle.com/technetwork/cn/indexes/documentation/index.html</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite-3</title>
    <url>/2020/02/19/SQLite-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="SQLite-3"><a href="#SQLite-3" class="headerlink" title="SQLite-3"></a>SQLite-3</h3><p><strong>概述:</strong></p><ul><li>是遵守ACID的RDBMS(关系数据库管理系统)<blockquote><p>因为SQLite遵守了ACID，所以实现了大多数SQL标准<br>ACID(原子性,一致性,隔离性和持久性)</p></blockquote></li><li>它使用动态的、弱类型的SQL语法</li><li>它作为嵌入式数据库，是应用程序，如网页浏览器，在本地/客户端存储数据的常见选择</li><li>与其它DBMS(数据库管理系统)不同的特点<blockquote><p>SQLite不是一个C/S(客户端/服务器结构)的数据库引擎，而是被集成在用户程序中<br>它有许多程序设计语言的语言绑定</p></blockquote></li><li>虽然遵守了ACID，但还有以下未解决的问题<blockquote><p>仅部分支持触发器<br>ALTER TABLE功能有所限制，不能修改或删除列，只能通过重新创建表的方式迂回进行<br>参考局限性内容</p></blockquote></li></ul><hr><ul><li>sqlite3的独立程序用来查询和管理SQLite数据库文件<blockquote><p>SQLite的用户可以把这个程序当作如何写SQLite应用程序的示例</p></blockquote></li><li>支持且拥有多种语言接口(C/C++,Tcl,PHP,Java等等)</li><li>SQLite通常小于600KB</li></ul><hr><h3 id="SQLite特点"><a href="#SQLite特点" class="headerlink" title="SQLite特点"></a>SQLite特点</h3><ul><li>完全不需要一个单独的服务器进程或操作的系统(无服务器的)</li><li>SQLite 不需要配置，即不需要安装或管理</li><li>一套完整的SQLite数据库是存储在一个单一的跨平台的磁盘文件</li><li>SQLite非常小的，是轻量级的，完全配置时小于400KiB，省略可选功能配置时小于250KiB</li><li>SQLite能够自给自足的，即不需要任何外部的依赖</li><li>SQLite事务完全兼容 ACID，允许从多个进程或线程安全访问</li><li>SQLite支持SQL92(SQL2)标准的大多数查询语言的功能</li><li>SQLite使用ANSI-C 编写，并提供了大量简单和易于使用的 API</li><li>SQLite兼容于UNIX，UNIX-Like(Linux, Mac OS-X, Android, iOS)和Windows(Win32, WinCE, WinRT)</li><li>SQLite拥有一套完整的与Shell交互的指令集</li></ul><hr><h3 id="SQLite安装"><a href="#SQLite安装" class="headerlink" title="SQLite安装"></a>SQLite安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.sqlite.org/download.html/sqlite-autoconf-3310100.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xvzf sqlite-autoconf-3310100.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sqlite-autoconf-3310100</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/usr/<span class="built_in">local</span>(安装目录所在路径，/usr/<span class="built_in">local</span>为用户环境变量)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make install</span></span><br></pre></td></tr></table></figure><hr><h3 id="第三方GUI类插件"><a href="#第三方GUI类插件" class="headerlink" title="第三方GUI类插件"></a>第三方GUI类插件</h3><ul><li>SQLite拥有多种管理客户端，用以为SQLite提供GUI</li><li>Navicat for SQLite是一套专为SQLite设计的强大数据库管理及开发工具<blockquote><p>它可以用于任何版本2或3的SQLite数据库，并支持大部分SQLite的功能，包括触发器，索引，查看等</p></blockquote></li><li>SQLiteMan，使用Qt开发的一个SQLite客户端，支持多语言、跨平台</li><li>Firefox，可以通过添加部分扩展获得SQLite客户端，包括<code>SQLite Manager</code>,<code>SQLite Reader</code>.<code>SQLite Manager</code>(另一个同名的WebExtensions扩展)</li><li>SQLite Database Browser，一款连接SQLite数据库的图形客户端</li><li>SQLite Expert Personal，Windows上的一款连接SQLite数据库的免费客户端</li></ul><hr><h3 id="SQLite-局限性"><a href="#SQLite-局限性" class="headerlink" title="SQLite 局限性"></a>SQLite 局限性</h3><p><strong>在SQLite中，SQL92不支持的特性:</strong></p><table><thead><tr><th align="left">特性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">RIGHT OUTER JOIN</td><td align="left">只实现了 LEFT OUTER JOIN</td></tr><tr><td align="left">FULL OUTER JOIN</td><td align="left">只实现了 LEFT OUTER JOIN</td></tr><tr><td align="left">ALTER TABLE</td><td align="left">支持 RENAME TABLE 和 ALTER TABLE 的 ADD COLUMN variants 命令，不支持 DROP COLUMN，ALTER COLUMN，ADD CONSTRAINT</td></tr><tr><td align="left">Trigger支持</td><td align="left">支持 FOR EACH ROW 触发器，但不支持 FOR EACH STATEMENT 触发器</td></tr><tr><td align="left">VIEWS</td><td align="left">在SQLite中，视图是只读的，即不可以在视图上执行 DELETE，INSERT 或 UPDATE 语句</td></tr><tr><td align="left">GRANT 和 REVOKE</td><td align="left">可以应用的唯一的访问权限是底层操作系统的正常文件访问权限</td></tr></tbody></table><hr><h3 id="其它概念"><a href="#其它概念" class="headerlink" title="其它概念"></a>其它概念</h3><ul><li>DDL-数据定义语言</li></ul><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">CREATE</td><td align="left">创建表，视图，数据库与其它对象</td></tr><tr><td align="left">ALTER</td><td align="left">修改数据库中的某个已有的数据库对象</td></tr><tr><td align="left">DROP</td><td align="left">用于删除表，视图，数据库与其它对象</td></tr></tbody></table><hr><ul><li>DML-数据操作语言</li></ul><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">INSERT</td><td align="left">插入记录</td></tr><tr><td align="left">UPDATE</td><td align="left">修改记录</td></tr><tr><td align="left">DELETE</td><td align="left">删除记录</td></tr></tbody></table><hr><ul><li>DQL-数据查询语言</li></ul><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">SELECT</td><td align="left">检索/查询</td></tr></tbody></table><hr><h3 id="常用函数-聚合函数-参考"><a href="#常用函数-聚合函数-参考" class="headerlink" title="常用函数(聚合函数)参考:"></a>常用函数(聚合函数)参考:</h3><table><thead><tr><th align="left">函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">MAX</td><td align="left">返回最大值</td></tr><tr><td align="left">MIN</td><td align="left">返回最小值</td></tr><tr><td align="left">COUNT</td><td align="left">计算并返回行数</td></tr><tr><td align="left">AVG</td><td align="left">返回平均值</td></tr><tr><td align="left">SUM</td><td align="left">返回数值总和</td></tr><tr><td align="left">RANDOM</td><td align="left">用于伪随机数生成</td></tr><tr><td align="left">ABS</td><td align="left">返回参数绝对值</td></tr><tr><td align="left">UPPER</td><td align="left">将字符串转换为大写字母</td></tr><tr><td align="left">LOWER</td><td align="left">将字符串转化为小写字母</td></tr><tr><td align="left">LENGTH</td><td align="left">返回字符串长度</td></tr><tr><td align="left"><code>sqlite_version</code></td><td align="left">返回SQLite库的版本</td></tr></tbody></table><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ul><li><p>官方网站:<a href="http://www.sqlite.org/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.sqlite.org/</code></p></blockquote></li><li><p>源码地址:<a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.sqlite.org/download.html</code></p></blockquote></li><li><p>SQLite(PHP-API)文档:<a href="http://www.php.net/manual/en/book.sqlite3.php" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.php.net/manual/en/book.sqlite3.php</code></p></blockquote></li><li><p>获取方式:</p><blockquote><p><code>wget https://www.sqlite.org/download.html/sqlite-autoconf-3310100.tar.gz</code></p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite-2</title>
    <url>/2020/02/19/SQLite-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="SQLite-2"><a href="#SQLite-2" class="headerlink" title="SQLite-2"></a>SQLite-2</h3><hr><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ID, A, B, C, D, TIME</span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-19</span>/<span class="number">1999</span>/NOW()</span><br><span class="line"><span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-19</span>/<span class="number">1999</span>/NOW()</span><br><span class="line"><span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-19</span>/<span class="number">1999</span>/NOW()</span><br><span class="line"><span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-19</span>/<span class="number">1999</span>/NOW()</span><br><span class="line"><span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-19</span>/<span class="number">1999</span>/NOW()</span><br><span class="line"><span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-19</span>/<span class="number">1999</span>/NOW()</span><br><span class="line"><span class="number">7</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-19</span>/<span class="number">1999</span>/NOW()</span><br><span class="line"><span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-18</span>/<span class="number">2000</span></span><br><span class="line"><span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-02</span><span class="number">-18</span>/<span class="number">2000</span></span><br></pre></td></tr></table></figure><hr><p><strong>表TABLES1</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES1(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">A <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">D <span class="built_in">REAL</span>, </span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>);</span><br></pre></td></tr></table></figure><p><code>CREATE TABLE TABLES1(ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,A TEXT NOT NULL,B INT NOT NULL,C CHAR(3),D REAL, TIME DATE);</code></p><hr><p><strong>列ID-TIME</strong></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">INSERT INTO TABLES1 VALUES (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br><span class="line">INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>debian:/home/sqlite/file# sqlite3 TEST1</span><br><span class="line">SQLite version <span class="number">3.31</span><span class="number">.1</span> <span class="number">2020</span><span class="number">-01</span><span class="number">-27</span> <span class="number">19</span>:<span class="number">55</span>:<span class="number">54</span></span><br><span class="line">Enter <span class="string">".help"</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">sqlite&gt; .databases</span><br><span class="line">main: /home/sqlite/file/TEST1</span><br><span class="line">sqlite&gt; CREATE TABLE TABLES1(ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,A TEXT NOT NULL,B INT NOT NULL,C CHAR(<span class="number">3</span>),D REAL, TIME DATE);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br></pre></td></tr></table></figure><p><code>SELECT * FROM TABLES1;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES1;</span><br><span class="line"><span class="number">1</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">2</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">3</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">4</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">5</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">6</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">7</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">8</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br><span class="line"><span class="number">9</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br></pre></td></tr></table></figure><hr><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><ul><li>基于ID进行降序查询并输出表TABLES1内A等于1且TIME等于2000/2020-02-18的数据(行)<blockquote><p><code>SELECT * FROM TABLES1 WHERE A = 1 AND TIME = 2000 ORDER BY ID DESC;</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES1 WHERE A = <span class="number">1</span> AND TIME = <span class="number">2000</span> ORDER BY ID DESC;</span><br><span class="line"><span class="number">9</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br><span class="line"><span class="number">8</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br></pre></td></tr></table></figure><hr><ul><li>查询并输出表TABLES1内TIME列以0结尾的数据<blockquote><p><code>SELECT * FROM TABLES1 WHERE TIME LIKE &#39;%0&#39;;</code></p></blockquote></li></ul><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES1 WHERE TIME LIKE '%<span class="number">0</span>'; </span><br><span class="line"><span class="number">8</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br><span class="line"><span class="number">9</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br></pre></td></tr></table></figure><hr><ul><li>查询并输出表TABLES1内TIME列中以2开头的数据<blockquote><p><code>SELECT * FROM TABLES1 WHERE TIME GLOB &#39;2*&#39;;</code></p></blockquote></li></ul><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES1 WHERE TIME GLOB '<span class="number">2</span>*';</span><br><span class="line"><span class="number">8</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br><span class="line"><span class="number">9</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br></pre></td></tr></table></figure><hr><ul><li>查询基于ID按降序输出表TABLES1内A等于6或TIME等于2000的数据并且只输出三条<br><code>SELECT * FROM TABLES1 WHERE A = 6 OR TIME = 2000 ORDER BY ID DESC LIMIT 3;</code></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES1 WHERE A = <span class="number">6</span> OR TIME = <span class="number">2000</span> ORDER BY ID DESC LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="number">9</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br><span class="line"><span class="number">8</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br><span class="line"><span class="number">7</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9.0</span>|<span class="number">1999</span></span><br></pre></td></tr></table></figure><hr><ul><li>在TABLES1内基于A列对B列进行数值分组并按降序输出<blockquote><p><code>SELECT A , SUM(B) FROM TABLES1 GROUP BY A ORDER BY A DESC;</code></p></blockquote></li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT A , SUM(B) <span class="keyword">FROM</span> TABLES1<span class="built_in"> GROUP </span>BY A ORDER BY A DESC;</span><br><span class="line">6|21</span><br><span class="line">1|12</span><br></pre></td></tr></table></figure><hr><ul><li>对表TABLES1内的A列中所有记录大于2的数据进行分组<blockquote><p><code>SELECT * FROM TABLES1 GROUP BY A HAVING count(A) &gt; 2;</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES1 GROUP BY A HAVING count(A) &gt; <span class="number">2</span>;</span><br><span class="line"><span class="number">1</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">4</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9.0</span>|<span class="number">1999</span></span><br></pre></td></tr></table></figure><hr><ul><li>查询并输出消除TABLES1内列A的重复记录<blockquote><p><code>SELECT DISTINCT A FROM TABLES1 WHERE TIME = 1999;</code></p></blockquote></li></ul><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> A <span class="keyword">FROM</span> TABLES1 <span class="keyword">WHERE</span> TIME = <span class="number">1999</span>;</span><br><span class="line">1</span><br><span class="line">6</span><br></pre></td></tr></table></figure><hr><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念:"></a>相关概念:</h3><ul><li>NULL</li><li>WHERE</li><li>AND/OR</li><li>LIKE(<code>%</code>&amp;<code>_</code>)</li><li>GLOB(<code>*</code>&amp;<code>?</code>)<blockquote><p>SQLite特有性质<br>通配符遵循UNIX语法<br>搜索表达式<br>模式表达式<br>大小写敏感</p></blockquote></li><li>OR(or)</li><li>通配符</li><li>正则表达式</li><li>PRAGMA</li><li>Vacuum</li><li>触发器</li><li>别名</li><li>SQLite 注入</li><li>常用函数</li><li>视图(VIEW)</li><li>ALTER</li></ul><hr><ul><li>约束(NOT NULL/DEFAULT/UNIQUE/PRIMARY Key/CHECK)</li><li>交叉连接/内连接/外连接(CROSS/INNER/OUTER JOIN)</li><li>子查询(嵌套查询/<code>SELECT ... WHERE ... (SELECT ... WHERE ... (SELECT ... WHERE ...(...)))...</code>)</li></ul><hr><ul><li>索引查询(Indexed By)<blockquote><p>必须将索引命名才能从以前的表中查找值</p></blockquote></li></ul><hr><ul><li>Explain(解释)<blockquote><p>在 SQLite 语句之前<br>可以使用”EXPLAIN”关键字或”EXPLAIN QUERY PLAN”短语，用于描述表的细节<br>如果省略了EXPLAIN关键字或短语，任何的修改都会引起SQLite语句的查询行为<br>并返回有关SQLite语句如何操作的信息</p></blockquote></li></ul><hr><ul><li>合并(UNION)<blockquote><p>不会返回任何重复的行<br>为了使用 UNION，每个 SELECT 被选择的列数必须是相同的<br>相同数目的列表达式，相同的数据类型，并确保它们有相同的顺序<br>但不必具有相同的长度</p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite-1</title>
    <url>/2020/02/19/SQLite-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="SQLite-1"><a href="#SQLite-1" class="headerlink" title="SQLite-1"></a>SQLite-1</h3><hr><ul><li>创建数据库同时返回命令提示符<blockquote><p><code>$sqlite3 TESTDB.db</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>debian:/home/sqlite/file# sqlite3 TESTDB.db</span><br><span class="line">SQLite version <span class="number">3.31</span><span class="number">.1</span> <span class="number">2020</span><span class="number">-01</span><span class="number">-27</span> <span class="number">19</span>:<span class="number">55</span>:<span class="number">54</span></span><br><span class="line">Enter <span class="string">".help"</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure><p>查看所有数据库</p><blockquote><p><code>.databases</code></p></blockquote><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .databases</span><br><span class="line"><span class="symbol">main:</span> <span class="meta-keyword">/home/</span>sqlite<span class="meta-keyword">/file/</span>TESTDB.db</span><br></pre></td></tr></table></figure><ul><li>创建TABLES2<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES2(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">A <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">D <span class="built_in">REAL</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES2(</span><br><span class="line">ID <span class="type">INTEGER</span> <span class="keyword">PRIMARY KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">A <span class="type">TEXT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">B <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">C <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">D <span class="type">REAL</span>);</span><br></pre></td></tr></table></figure><ul><li>设置表查询输出的格式<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">.width <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span></span><br><span class="line">SELECT * FROM TABLES2;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .width <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span></span><br><span class="line">sqlite&gt; SELECT * FROM TABLES2;</span><br></pre></td></tr></table></figure><ul><li>查看表信息<blockquote><p><code>.table</code></p></blockquote></li></ul><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .<span class="keyword">table</span></span><br><span class="line">TABLES2</span><br></pre></td></tr></table></figure><ul><li>查看表配置<blockquote><p><code>.schema</code></p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .<span class="keyword">schema</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES2(</span><br><span class="line">ID <span class="type">INTEGER</span> <span class="keyword">PRIMARY KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">A <span class="type">TEXT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">B <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">C <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">D <span class="type">REAL</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sqlite_sequence(<span class="type">name</span>,seq);</span><br></pre></td></tr></table></figure><hr><ul><li>TABLES2修改为TABLES1<blockquote><p><code>ALTER TABLE TABLES2 RENAME TO TABLES1;</code></p></blockquote></li></ul><blockquote><p><code>sqlite&gt; ALTER TABLE TABLES2 RENAME TO TABLES1;</code></p></blockquote><ul><li>添加新列TIME<blockquote><p><code>ALTER TABLE TABLES1 ADD COLUMN TIME DATE;</code></p></blockquote></li></ul><blockquote><p><code>sqlite&gt; ALTER TABLE TABLES1 ADD COLUMN TIME DATE;</code></p></blockquote><ul><li>查看表信息<blockquote><p><code>.table</code></p></blockquote></li></ul><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .<span class="keyword">table</span></span><br><span class="line">TABLES1</span><br></pre></td></tr></table></figure><ul><li>查看表配置<blockquote><p><code>.schema</code></p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .<span class="keyword">schema</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> "TABLES1"(</span><br><span class="line">ID <span class="type">INTEGER</span> <span class="keyword">PRIMARY KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">A <span class="type">TEXT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">B <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">C <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">D <span class="type">REAL</span>, <span class="type">TIME</span> <span class="type">DATE</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sqlite_sequence(<span class="type">name</span>,seq);</span><br></pre></td></tr></table></figure><hr><ul><li><p><code>BEGIN;</code></p><blockquote><p><code>sqlite&gt; BEGIN;</code></p></blockquote></li><li><p>插入数据</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>条] INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, NOW())/(<span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">[<span class="number">1</span>条] INSERT INTO TABLES1 VALUES (<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, NOW())/(<span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">[<span class="number">1</span>条] INSERT INTO TABLES1  VALUES (<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br><span class="line">[<span class="number">1</span>条] INSERT INTO TABLES1  VALUES (<span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">`INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);`</span><br><span class="line">`INSERT INTO TABLES1  VALUES (<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);`</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1 (A,B,C,D,TIME) VALUES (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1  VALUES (<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-19</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1  VALUES (<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br><span class="line">sqlite&gt; INSERT INTO TABLES1  VALUES (<span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2020</span><span class="number">-2</span><span class="number">-18</span>);</span><br></pre></td></tr></table></figure><ul><li><p>快照一</p><blockquote><p><code>COMMIT;</code><br><code>sqlite&gt; COMMIT;</code></p></blockquote></li><li><p><code>BEGIN;</code></p><blockquote><p><code>sqlite&gt; BEGIN;</code></p></blockquote></li><li><p>删除ID等于6的行</p><blockquote><p><code>DELETE FROM TABLES1 WHERE ID = 6;</code><br><code>sqlite&gt; DELETE FROM TABLES1 WHERE ID = 6;</code></p></blockquote></li><li><p>更新TABLES1内C,D列的数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> TABLES1</span><br><span class="line"><span class="keyword">SET</span> C = <span class="number">3</span>, D = <span class="number">4</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">4</span>;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">sqlite&gt; UPDATE TABLES1</span><br><span class="line">   ...&gt; <span class="keyword">SET</span> C <span class="comment">= 3, D = 4</span></span><br><span class="line">   ...&gt; WHERE <span class="comment">ID = 4</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>SELECT * FROM TABLES1;</code></p></blockquote><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES1;</span><br><span class="line"><span class="number">1</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">2</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">3</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">4</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">5</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br></pre></td></tr></table></figure><ul><li>结束<blockquote><p><code>COMMIT</code><br><code>sqlite&gt; COMMIT;</code></p></blockquote></li></ul><hr><ul><li><p>创建表TABLES2并将TABLES1内数据复制到其中</p></li><li><p>查看表配置</p><blockquote><p><code>.schema</code></p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; .<span class="keyword">schema</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> "TABLES1"(</span><br><span class="line">ID <span class="type">INTEGER</span> <span class="keyword">PRIMARY KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">A <span class="type">TEXT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">B <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">C <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">D <span class="type">REAL</span>, <span class="type">TIME</span> <span class="type">DATE</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sqlite_sequence(<span class="type">name</span>,seq);</span><br></pre></td></tr></table></figure><ul><li>复制配置信息，将TABLES1改为TABLES2<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES2(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">A <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">D <span class="built_in">REAL</span>, <span class="built_in">TIME</span> <span class="built_in">DATE</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">sqlite&gt; CREATE TABLE TABLES2(</span><br><span class="line">   <span class="params">...</span>&gt; ID <span class="built_in">INTEGER</span> PRIMARY KEY AUTOINCREMENT <span class="literal">NOT</span> <span class="built_in">NULL</span>,</span><br><span class="line">   <span class="params">...</span>&gt; A TEXT <span class="literal">NOT</span> <span class="built_in">NULL</span>,</span><br><span class="line">   <span class="params">...</span>&gt; B INT <span class="literal">NOT</span> <span class="built_in">NULL</span>,</span><br><span class="line">   <span class="params">...</span>&gt; C CHAR(<span class="number">3</span>),</span><br><span class="line">   <span class="params">...</span>&gt; D REAL, TIME <span class="built_in">DATE</span>);</span><br></pre></td></tr></table></figure><ul><li>复制TABLES1信息到TABLES2<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2 (A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">SELECT</span> A,B,C,D,<span class="built_in">TIME</span></span><br><span class="line"><span class="keyword">FROM</span> TABLES1;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2 (A,B,C,D,TIME)</span><br><span class="line">   ...&gt; <span class="keyword">SELECT</span> A,B,C,D,TIME</span><br><span class="line">   ...&gt; <span class="keyword">FROM</span> TABLES1;</span><br></pre></td></tr></table></figure><p><code>SELECT * FROM TABLES2;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT * FROM TABLES2;</span><br><span class="line"><span class="number">1</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">2</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">3</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">4</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">1999</span></span><br><span class="line"><span class="number">5</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4.0</span>|<span class="number">2000</span></span><br></pre></td></tr></table></figure><hr><ul><li>为TABLES1的A列与B列添加组合索引<blockquote><p><code>CREATE INDEX INDEX1 ON TABLES1 (A,B);</code></p></blockquote></li></ul><blockquote><p><code>sqlite&gt; CREATE INDEX INDEX1 ON TABLES1 (A,B);</code></p></blockquote><ul><li>列出表TABLES1内所有可用索引<blockquote><p><code>.indices/.indexes TABLES1</code></p></blockquote></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sqlite</span>&gt; <span class="selector-class">.indexes</span> <span class="selector-tag">TABLES1</span></span><br><span class="line"><span class="selector-tag">INDEX1</span></span><br></pre></td></tr></table></figure><hr><ul><li>删除索引(索引最好不要使用在较小或频繁且大批量更新的表与列上，且最好不要有太多的NULL值)<blockquote><p><code>DROP INDEX INDEX1;</code><br><code>sqlite&gt; DROP INDEX INDEX1;</code></p></blockquote></li></ul><blockquote><p><code>.exit</code></p></blockquote><ul><li>将TESTDB数据库导以<code>.sql</code>后缀导出到当前文件夹<blockquote><p>$sqlite3 TESTDB.db .dump &gt; testDB.sql;</p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>debian:/home/sqlite/file# ls -l</span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">20480</span> <span class="number">2</span>月  <span class="number">19</span> <span class="number">17</span>:<span class="number">15</span> TESTDB.db</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root     <span class="number">0</span> <span class="number">2</span>月  <span class="number">19</span> <span class="number">17</span>:<span class="number">02</span> testDB.sql</span><br></pre></td></tr></table></figure><blockquote><p><code>$sqlite3 TEST1</code></p></blockquote><ul><li>删除表TABLES1与TABLES2内所有内容<blockquote><p><code>DELETE FROM TABLES1;</code><br><code>DELETE FROM TABLES2;</code></p></blockquote></li></ul><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; <span class="keyword">DELETE</span> <span class="keyword">FROM</span> TABLES1;</span><br><span class="line">sqlite&gt; <span class="keyword">DELETE</span> <span class="keyword">FROM</span> TABLES2;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">sqlite&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TABLES1;</span><br><span class="line">sqlite&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TABLES2;</span><br></pre></td></tr></table></figure><ul><li>删除表TABLES1与TABLES2<blockquote><p><code>DROP TABLE TESTDB.TABLES1;</code>或<code>DROP TABLE TABLES1;</code><br><code>DROP TABLE TESTDB.TABLES2;</code>或<code>DROP TABLE TABLES2;</code></p></blockquote></li></ul><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">sqlite&gt; DROP <span class="keyword">TABLE</span> TABLES1;</span><br><span class="line">sqlite&gt; DROP <span class="keyword">TABLE</span> TABLES2;</span><br></pre></td></tr></table></figure><blockquote><p><code>.tables</code><br><code>sqlite&gt; .tables</code></p></blockquote><hr><p><strong>其它:</strong></p><ul><li>SQLite命令提示符内命令不需要分号，而语句需要分号(“;”)</li><li>大多数命令和语句不区分大小写(GLOB和glob对大小写敏感)</li><li>命令多以点符号<code>&#39;.&#39;</code>开头</li><li><code>.help</code>输出帮助指令</li><li>键入<code>sqlite指令</code>进入命令提示符界面</li></ul><hr><p><strong>附加&amp;分离</strong></p><ul><li><p>附加UNITDB数据库</p></li><li><p>基本语法:</p><blockquote><p><code>ATTACH DATABASE file_name AS database_name;</code></p></blockquote></li><li><p>将UNITDB附加到已有数据库TESTDB.db上</p><blockquote><p><code>ATTACH DATABASE &#39;TESTDB.db&#39; as &#39;UNITDB&#39;;</code></p></blockquote></li><li><p>分离UNITDB数据库</p></li><li><p>基本语法:</p><blockquote><p><code>DETACH DATABASE &#39;Alias-Name&#39;;</code><br>把’UNITDB’从testDB.db中分离出来<br><code>DETACH DATABASE &#39;UNITDB&#39;;</code></p></blockquote></li><li><p>输出结果:</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlite&gt; <span class="string">.database</span></span><br><span class="line">seq  name               file</span><br><span class="line"><span class="params">---</span>  <span class="params">---------------</span>  <span class="params">----------------------</span></span><br><span class="line">0    main                 <span class="string">/home/sqlite/testDB.db</span></span><br><span class="line">2    test                   <span class="string">/home/sqlite/testDB.db</span></span><br></pre></td></tr></table></figure></li><li><p>说明:</p><blockquote><p>数据库名称 main 和 temp 被保留用于主数据库和存储临时表及其他临时数据对象的数据库<br>这两个数据库名称可用于每个数据库连接</p></blockquote></li></ul><hr><h3 id="其它概念"><a href="#其它概念" class="headerlink" title="其它概念:"></a>其它概念:</h3><ul><li>基本语法</li><li>数据类型</li><li>运算符</li><li>导入与导出</li><li>数据库:分离(游离)</li><li>数据库:附加</li><li>表达式</li><li>NULL</li><li>序列</li><li>触发器</li><li>索引</li><li>ALTER(限制)</li><li>别名</li><li>Truncate(无)</li><li>SQLite注入</li><li>VACUUM(Vacuum)</li><li>Explain(解释)</li><li>日期&amp;时间</li><li>函数</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>RDBMS-KEY-1</title>
    <url>/2020/02/19/RDBMS-KEY-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="RDBMS-KEY-1-关系键"><a href="#RDBMS-KEY-1-关系键" class="headerlink" title="RDBMS-KEY-1(关系键)"></a>RDBMS-KEY-1(关系键)</h3><ul><li>关系键是关系数据库(关系模型)的重要组成部分</li><li>关系键是一个表中的一个或几个属性，用来标识该表的每一行或与另一个表产生联系</li></ul><hr><p><strong>可大致分为六类</strong></p><ul><li>主键</li><li>超键</li><li>候选键</li><li>外键</li><li>代理键</li><li>自然键</li><li>公共键</li></ul><hr><ol><li>主键</li></ol><ul><li>主键，又称主码/主关键字(primary key或unique key)</li><li>数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合</li><li>一个数据表只能有一个主键，且主键的取值不能缺失，即不能为空值(Null)</li><li>作表的行的唯一标识的候选关键字</li><li>一个表只能有一个主键</li><li>主键可以由一个字段，也可以由多个字段组成，分别称为单字段主键或多字段主键<blockquote><p>并且它可以唯一确定表中的一行数据，或者可以唯一确定一个实体</p></blockquote></li></ul><p><strong>primary key和unique key的区别</strong></p><ol><li>作为primary key的域<code>／</code>域组不能为Null，而unique key可以</li><li>一个表只能有一个primary key，但可有多个unique key</li><li>更大的区别在逻辑设计<blockquote><p>primary key一般在逻辑设计中用作记录标识，这也是设置primary key的本意<br>而unique key只是为了保证域／域组的唯一性</p></blockquote></li></ol><p><strong>作用:</strong></p><ol><li>保证实体的完整性</li><li>加快数据库的操作速度</li><li>在表中添加新记录时，ACCESS会自动检查新记录的主键值，不允许该值与其他记录的主键值重复</li><li>ACCESS自动按主键值的顺序显示表中的记录，如果没有定义主键，则按输入记录的顺序显示表中的记录</li></ol><hr><ol start="2"><li>超键</li></ol><ul><li>超键，又称超码(superkey)</li><li>是在数据库关系模式设计中能够唯一标示多元组(即”行”)的属性集</li><li>包含所有属性的集叫做明显(平凡)超键</li></ul><hr><ol start="3"><li>候选键</li></ol><ul><li><p>候选键，又称候选码(candidate key)</p></li><li><p>是某个关系变量的一组属性所组成的集合</p></li><li><p>它需要同时满足下列两个条件：</p><blockquote><ol><li>这个属性集合始终能够确保在关系中能唯一标识元组</li><li>在这个属性集合中找不出真子集能够满足条件(1)</li></ol></blockquote></li><li><p>满足第一个条件的属性集合称为超键</p><blockquote><p>因此也可以把候选键定义为”最小超键”，也就是不含有多余属性的超键</p></blockquote></li><li><p>候选键的重要性是它们能够在关系中唯一标识出不同的元组，因此超键也是在设计数据库模式时需要指定的最重要的约束之一</p></li><li><p>由于在关系模型中，每个关系都是一个集合(没有重复的元素)，所以每个关系都至少有一个候选键(因为所有属性组合必然是个超键)</p></li><li><p>但是在某些关系型数据库中表也能代表多重集，所以在每个关系中都显式地定义至少一个候选键是一条很重要的设计原则</p><blockquote><p>数据库管理系统通常都需要将每个关系中的某个候选键定义为主键<br>亦即这个候选键是区分不同元组时首选的识别方式<br>例如外键通常就是引用主键而非其他候选键</p></blockquote></li></ul><hr><ol start="4"><li>外键</li></ol><ul><li><p>外键，又称外部键/外来键(foreign key)</p></li><li><p>在关系数据库中，每个数据表都是由关系来连系彼此的关系</p><blockquote><p>父数据表(Parent Entity)的主键(primary key)会放在另一个数据表，当做属性以创建彼此的关系<br>而这个属性就是外键</p></blockquote></li><li><p>比如，学生跟老师之间是教学的关系，学生数据表会有个属性叫指导老师(FK)，而这个值就是对应到老师数据表的老师代号(PK)，学生的指导老师就是外键</p></li><li><p>如果公共键在一个关系中是主关键字，那么这个公共键被称为另一个关系的外键</p><blockquote><p>由此可见，外键表示了两个关系之间的相关联系<br>以另一个关系的外键作主键的表被称为主表，具有此外键的表被称为主表的从表<br>外键又称作外关键字</p></blockquote></li></ul><p><strong>作用:</strong></p><ul><li>保持数据一致性，完整性，主要目的是控制存储在外键表中的数据</li><li>使两张表形成关联，外键只能引用外表中的列的值或使用空值</li></ul><hr><ol start="5"><li>代理键</li></ol><ul><li><p>代理键(surrogate key)</p></li><li><p>是在当数据表中的候选键都不适合当主键时，例如数据太长，或是意义层面太多，就会请一个无意义的但唯一的字段来代为作主键</p></li><li><p>代理键是(引用描述):</p></li><li><p>1.<code>Surrogate (1) – Hall, Owlett and Codd (1976)</code></p><blockquote><p>一个代理键值确定了外部世界的一个实体，代理键值是数据库生成的，从来不显示给用户或应用程序看</p></blockquote></li><li><ol start="2"><li><code>Surrogate (2) – Wieringa and De Jonge (1991)</code><blockquote><p>一个代理键值确定了数据库中的一个对象，代理键值是数据库生成的，用户或应用程序看不到它</p></blockquote></li></ol></li><li><p>在实践中，代理键值通常是个自动递增的数字</p></li><li><p>例如:</p></li><li><p>PostgreSQL用serial</p></li><li><p>Oracle用SEQUENCE</p></li><li><p>在MySQL用标记有<code>AUTO_INCREMENT</code>的字段</p></li></ul><hr><ol start="6"><li>自然键</li></ol><ul><li>自然键(natural key)</li><li>与代理键相反，是在自然(真实)生活中唯一确定一个事物的标识</li><li>身份证号(理论上，假设没有因技术原因造成的重复)就是一个自然键，用于准确且绝对的确定一个人</li></ul><hr><ol start="7"><li>公共键</li></ol><ul><li>公共键，又可称为公共关键字(Common Key)</li><li>在关系数据库中，关系之间的联系是通过相容或相同的属性或属性组来表示的<blockquote><p>如果两个关系中具有相容或相同的属性或属性组，那么这个属性或属性组被称为这两个关系的公共键</p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>LBA/CHS/RAID-1</title>
    <url>/2020/02/19/LBA-CHS-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="LBA-CHS-RAID-1"><a href="#LBA-CHS-RAID-1" class="headerlink" title="LBA/CHS/RAID-1"></a>LBA/CHS/RAID-1</h2><ul><li>LBA(寻址模式)-1</li><li>CHS(寻址模式)-1</li><li>RAID(磁盘阵列)-1</li></ul><h3 id="LBA-寻址模式"><a href="#LBA-寻址模式" class="headerlink" title="LBA-寻址模式"></a>LBA-寻址模式</h3><p><strong>简述:</strong></p><ul><li>LBA寻址模式</li><li>逻辑区块地址(Logical Block Address, LBA)</li><li>是描述电脑存储设备上数据所在区块的通用机制，一般用在像硬盘这样的辅助记忆设备</li><li>LBA可以意指某个数据区块的地址或是某个地址所指向的数据区块<blockquote><p>现今电脑上所谓一个逻辑区块通常是512或1024位组<br>ISO-9660格式的标准CD则以2048位组为一个逻辑区块大小</p></blockquote></li></ul><hr><p><strong>LBA定址机制:</strong></p><ul><li>LBA是非常单纯的一种定址模式:从0开始编号来定位区块，第一区块LBA=0，第二区块LBA=1，依此类推</li><li>这种定址模式取代了原先操作系统必须面对存储设备硬件构造的方式<blockquote><p>最具代表性的首推CHS(cylinders-heads-sectors，磁柱-磁头-扇区)定址模式<br>区块必须以硬盘上某个磁柱、磁头、扇区的硬件位置所合成的地址来指定<br>CHS模式对硬盘以外的设备来说没什么作用(例如磁带或是网络存储设备)，所以通常也不会用在这些地方<br>过去MFM(Modified Frequency Modulation, 改良调频式)和RLL(Run Length Limited)存储设备都曾使用CHS模式<br>ATA-1设备更将延伸CHS(Extended Cylinders-Heads-Sectors, ECHS)也派上了用场</p></blockquote></li><li>SCSI采用LBA抽象定址</li></ul><hr><p><strong>LBA所对应的/与逻辑器件虚拟化</strong></p><blockquote><p>当逻辑器件是经由虚拟化或是集合所构成的<br>像是RAID(磁盘阵列)和SANs(Storage Area Network)这种复杂的情况<br>就得把应用程序根据其观点中的磁盘来指定的LBA转换成每个实体存储设备上的LBA</p></blockquote><ul><li><p>在复杂的分布式存储结构下，从发出要求的应用程序到实体甚至是远程设备之间，会有太多这样的LBA转换</p></li><li><p>CHS与LBA之间可以相互转换</p></li></ul><hr><p><strong>转换公式:</strong></p><ul><li><p>CHS地址转LBA公式</p><blockquote><p><code>#lba=(#c*H+#h)*S+#s-1</code></p></blockquote></li><li><p>说明:</p><blockquote><p><code>#c</code>,<code>#h</code>,<code>#s</code>分别是磁柱、磁头、扇区的编号<br><code>#lba</code>是逻辑区块编号<br>H=heads per cylinder，每个磁柱的磁头数<br>S=sectors per track，每磁道的扇区数</p></blockquote></li></ul><hr><ul><li><p>LBA地址转CHS公式:</p><blockquote><p>#c=#lba/(S*H)<br>#h=(#lba/S)%H<br>#s=(#lba%S)+1</p></blockquote></li><li><p>说明:</p><blockquote><p><code>/</code>是整数除法<br><code>%</code>是取整数除法中的余数<br>需要注意的一点是当今的磁盘使用ZBR(Zone Bit Recording, 等密度记录)方式，实际的每轨扇区数得根据它是哪一轨<br>不过磁盘还是会提供这个参数来符合公式，内部再自动调整</p></blockquote></li></ul><hr><ul><li><p>其它公式:</p><blockquote><p><code>#lba/S=q 余 r</code><br><code>#s=1+r</code><br><code>q/H=#c 余 #h</code></p></blockquote></li><li><p>例如:</p><blockquote><p><code>CHS总数=[600, 10, 84]</code>，求<code>#lba=1234</code>所对应的CHS编号:<br><code>1234/84=14 余 58</code><br><code>#s=1+58=59</code><br><code>14/10=1 余 4</code><br><code>#c=1</code><br><code>#h=4</code><br><code>#chs=(1, 4, 59)</code><br>验算:<code>(1*10+4)*84+59-1=14*84+58=1234</code></p></blockquote></li></ul><hr><h3 id="CHS寻址模式"><a href="#CHS寻址模式" class="headerlink" title="CHS寻址模式"></a>CHS寻址模式</h3><p><strong>概述:</strong></p><ul><li>CHS寻址模式</li><li>柱面-磁头-扇区(Cylinder-head-sector，简称为CHS)</li><li>CHS寻址模式将硬盘划分为磁头(Heads)，柱面(Cylinder)，扇区(Sector)</li><li>是早期对硬盘驱动器的每一个物理数据块进行编址的一种方法<blockquote><p>就软盘驱动器而言，可对同一磁盘介质进行低级格式化而得到不同的容量</p></blockquote></li></ul><hr><ul><li>磁头(Heads):每张磁片的正反两面各有一个磁头，一个磁头对应一张磁片的一个面<blockquote><p>因此，用第几磁头就可以表示数据在哪个磁面</p></blockquote></li><li>柱面(Cylinder):所有磁片中半径相同的同心磁道构成”柱面”，意思是这一系列的磁道垂直叠在一起，就形成一个柱面的形状<blockquote><p>简单地理解:柱面数=磁道数<br>扇区(Sector)：将磁道划分为若干个小的区段，就是扇区<br>虽然很小，但实际是一个扇子的形状，故称为扇区，每个扇区的容量为512字节</p></blockquote></li></ul><hr><ul><li>知道了磁头数、柱面数、扇区数，就可以很容易地确定数据保存在硬盘的哪个位置</li><li>确定硬盘的容量计算公式:<blockquote><p>硬盘容量=磁头数×柱面数×扇区数×512字节</p></blockquote></li></ul><hr><ul><li>LARGE寻址模式把柱面数除以整数倍、磁头数乘以整数倍而得到的逻辑磁头/柱面/扇区参数进行寻址</li><li>所以表示的已不是硬盘中的物理位置，而是逻辑位置</li></ul><hr><ul><li>LBA寻址模式是直接以扇区为单位进行寻址的，不再用磁头/柱面/扇区三种单位来进行寻址<blockquote><p>但为了保持与CHS模式的兼容，通过逻辑变换算法，可以转换为磁头/柱面/扇区三种参数来表示<br>但表示的也和LARGE寻址模式一样，并不是硬盘中的物理位置，而是逻辑位置</p></blockquote></li></ul><hr><h3 id="RAID-磁盘阵列"><a href="#RAID-磁盘阵列" class="headerlink" title="RAID-磁盘阵列"></a>RAID-磁盘阵列</h3><ul><li>独立硬盘冗余阵列(RAID, Redundant Array of Independent Disks)</li><li>旧称廉价磁盘冗余阵列(Redundant Array of Inexpensive Disks)</li><li>利用虚拟化存储技术把多个硬盘组合起来，成为一个或多个硬盘阵列组，目的为提升性能或数据冗余，或是两者同时提升</li></ul><hr><ul><li><p>根据实现模式，分为软件和硬件两种：</p><blockquote><p>软件磁盘阵列(Software RAID)<br>硬件磁盘阵列(Hardware RAID)</p></blockquote></li><li><p>目前水平有限，文章只对RAID进行简单概述</p></li></ul><hr><h3 id="其它概念"><a href="#其它概念" class="headerlink" title="其它概念:"></a>其它概念:</h3><ul><li>FDISK(分区)</li><li>BOOT</li><li>ACPI</li><li>UEFI</li><li>BIOS</li><li>CHS</li><li>LBA</li><li>SMBIOS</li><li>Aptio</li><li>硬盘固件/固件</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Disk</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>EFI/UEFI-1</title>
    <url>/2020/02/19/UEFI-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="EFI-UEFI-1"><a href="#EFI-UEFI-1" class="headerlink" title="EFI/UEFI-1"></a>EFI/UEFI-1</h3><p><strong>概述:</strong></p><ul><li>统一可扩展固件接口(Unified Extensible Firmware Interface)</li><li>作为BIOS的替代方案被用来定义操作系统与系统固件之间的软件界面</li><li>可扩展固件接口负责加电自检(POST)，联系操作系统以及提供连接操作系统与硬件的接口</li><li>UEFI的前身是Intel在1998年开始开发的Intel Boot Initiative，后来被重命名为可扩展固件接口(Extensible Firmware Interface，缩写EFI)</li><li>Intel在2005年将其交由统一可扩展固件接口论坛(Unified EFI Forum)来推广与发展，为了凸显这一点，EFI也更名为UEFI(Unified EFI)</li><li>位置说明:操作系统&lt;-&gt;可拓展接口(UEFI/BIOS)&lt;-&gt;系统固件&lt;-系统硬件</li><li>在EFI规范中，一种突破传统MBR磁盘分区结构限制的GUID磁盘分区系统(GPT)被引入</li></ul><hr><h3 id="UEFI与BIOS"><a href="#UEFI与BIOS" class="headerlink" title="UEFI与BIOS"></a>UEFI与BIOS</h3><p><strong>UEFI</strong></p><ul><li>UEFI用模块化，C语言风格的参数堆栈传递方式，动态链接的形式构建的系统</li><li>较BIOS而言更易于实现，容错和纠错特性更强，缩短了系统研发的时间</li><li>它可以运行于x86-64、IA32、IA64等架构上（在个人电脑上通常是x86-64平台），突破传统16位代码的寻址能力，达到处理器的最大寻址</li><li>它利用加载EFI驱动程序的形式，识别及操作硬件，不同于BIOS利用挂载实模式中断的方式增加硬件功能</li><li>另外UEFI在概念上非常类似于一个低阶的操作系统，并且具有操控所有硬件资源的能力<blockquote><p>但EFI的缔造者们在第一版规范出台时就将EFI的能力限制于不足以威胁操作系统的统治地位</p></blockquote></li></ul><hr><ul><li>UEFI系统下的驱动程序可以由EFI Byte Code(EBC)编写而成<blockquote><p>EFI Byte Code是一组专用于EFI驱动程序的虚拟机器语言，必须在EFI驱动程序运行环境(Driver Execution Environment，或DXE)下被解释运行<br>采用EBC编写的EFI驱动程序拥有向下兼容性，以便在安装不同处理内不需要重新编写EFI驱动，所以UEFI无需对系统升级带来的兼容性因素作考虑</p></blockquote></li><li>基于EFI的驱动模型可以使UEFI系统接触到所有的硬件功能<blockquote><p>比如在操作系统运行以前浏览万维网站，实现图形化、多语言的BIOS设置界面，或者无需运行操作系统即可在线更新BIOS</p></blockquote></li></ul><hr><ul><li>UEFI固件区分架构，在UEFI引导模式下，通常只能运行特定架构的UEFI操作系统和特定架构的EFI应用程序(EBC程序除外)<blockquote><p>比如，采用64位UEFI固件的PC，在UEFI引导模式下只能运行64位操作系统引导程序<br>而在Legacy引导模式(即BIOS兼容引导模式)下，通常不区分操作系统的比特数，既可以运行16位的操作系统(如DOS)<br>也可以运行32位或64位的操作系统，和BIOS一样</p></blockquote></li></ul><hr><ul><li>在众多的分区类型中，EFI系统分区可以被UEFI固件访问，可用于存放操作系统的引导程序、EFI应用程序和EFI驱动程序</li><li>EFI系统分区采用FAT文件系统，容量较小，在Windows操作系统下，默认是隐藏的</li><li>UEFI固件通过运行EFI系统分区中的引导程序引导操作系统</li></ul><p><strong>BIOS</strong></p><ul><li>BIOS必须将一段类似于驱动程序的16位代码(如RAID卡的Option ROM)放置在固定的<code>0x000C0000</code>至<code>0x000DFFFF</code>之间存储区中<blockquote><p>运行这段代码的初始化部分，它将挂载实模式下约定的中断向量向其他程序提供服务<br>由于这段存储空间有限(128KB)，BIOS对于所需放置的驱动程序代码大小超过空间大小的情况无能为力</p></blockquote></li><li>BIOS的硬件服务程序都以16位代码的形式存在，这就给运行于增强模式的操作系统访问其服务造成了困难<blockquote><p>因此BIOS提供的服务在现实中只能提供给操作系统引导程序或MS-DOS类操作系统使用</p></blockquote></li><li>部分采用EFI技术的BIOS并不支持EFI引导</li></ul><hr><h3 id="统一可扩展固件接口-UEFI-的构成"><a href="#统一可扩展固件接口-UEFI-的构成" class="headerlink" title="统一可扩展固件接口(UEFI)的构成"></a>统一可扩展固件接口(UEFI)的构成</h3><ul><li>一般认为UEFI由以下几个部分构成:</li><li>Pre-EFI初始化模块</li><li>EFI驱动程序执行环境</li><li>EFI驱动程序</li><li>兼容性支持模块(CSM)</li><li>EFI高层应用</li><li>GUID磁盘分区表</li></ul><hr><p><strong>实现逻辑:</strong></p><ul><li>在实现中，统一可扩展固件接口(UEFI)初始化模块和驱动执行环境通常被集成在一个只读存储器中</li><li>Pre-EFI初始化程序在系统开机的时候最先得到执行，它负责最初的CPU，芯片组及存储器的初始化工作，紧接着加载EFI的驱动程序执行环境(DXE)</li><li>当DXE被加载运行时，系统便具有了枚举并加载其他EFI驱动程序的能力</li><li>在基于PCI架构的系统中，各PCI桥及PCI适配器的EFI驱动程序会被相继加载及初始化</li><li>同时，系统进而枚举并加载各桥接器及适配器后面的各种总线及设备的EFI驱动程序，以此周而复始，直到最后一个设备的EFI驱动程序被成功加载<blockquote><p>正因如此，EFI驱动程序可以放置于系统的任何位置，只要能保证它可以按顺序被正确枚举</p></blockquote></li></ul><p><strong>例如:</strong></p><ol><li>有一个具PCI-E总线接口的RAID存储适配器，其EFI驱动程序一般会放置在这个设备的符合PCI规范的扩展只读存储器(PCI Expansion ROM)中</li><li>当PCI总线驱动程序被加载完毕，并开始枚举其子设备时，这个存储适配器旋即被正确识别并加载它的EFI驱动程序</li><li>部分EFI驱动程序还可以放置在某个磁盘的EFI系统分区(ESP)中，只要这些驱动程序不是用于加载这个磁盘的驱动的必要部件</li></ol><hr><p><strong>CSM</strong></p><ul><li>CSM是在x86平台UEFI系统中的一个特殊的模块</li><li>它将为不具备UEFI引导能力的操作系统(如Windows XP)以及16位的传统Option ROM(即非EFI的Option ROM)提供类似于传统BIOS的系统服务</li><li>Secure Boot和CSM不兼容，因此在UEFI固件设置中打开CSM前，需要在UEFI固件设置中关闭Secure Boot</li></ul><hr><p><strong>采用UEFI固件的x86/x64系统类别</strong></p><ul><li>类别0，这类系统使用x86 BIOS固件，只支持传统操作系统</li><li>类别1，这类系统采用支持UEFI和Pi规范的固件，激活CSM层功能，只支持传统操作系统</li><li>类别2，这类系统采用支持UEFI和Pi规范的固件，激活CSM层功能，同时支持传统和UEFI引导的操作系统</li><li>类别3，这类系统采用支持UEFI和Pi规范的固件，不再提供或完全关闭CSM层功能，只支持由UEFI引导的操作系统</li><li>类别3+，在类别3的系统基础上提供并激活Secure Boot功能</li></ul><hr><h3 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史:"></a>版本历史:</h3><ul><li><p>1.1版本于2002年12月发布(EFI)</p></li><li><p>2.1版本于2007年1月7日发布(UEFI)</p><blockquote><p>增加与改进了加密编码(cryptography)<br>网络认证(network authentication)<br>用户接口架构(User Interface Architecture)</p></blockquote></li><li><p>2.3版本于2009年5月9日发布</p></li><li><p>最新为2.7版本</p></li><li><p>Linux内核自2000年开始，已经支持EFI引导</p><blockquote><p>早期使用ELILO作为EFI下的引导程序<br>现在，GRUB的EFI版本已代替ELILO，大多数Linux发行版已使用GRUB作为UEFI下的引导程序</p></blockquote></li><li><p>VMware Workstation支持对UEFI的模拟</p><blockquote><p>但是在VMware Workstation 11以前，VMware Workstation并未正式支持UEFI，需要手动编辑虚拟机的.vmx文件以打开虚拟机的UEFI</p></blockquote></li></ul><hr><h3 id="Secure-Boot相关"><a href="#Secure-Boot相关" class="headerlink" title="Secure Boot相关"></a>Secure Boot相关</h3><ul><li><p>在UEFI 2.3.1 Errata C规范中定义了一项名为”Secure Boot”的协议</p></li><li><p>Secure Boot只允许加载有适当数字签名的EFI驱动程序和EFI引导程序，以此Secure Boot可让引导过程更安全</p></li><li><p>自由软件基金会(FSF)的Josh Gay对UEFI的”Secure Boot”实现提出忧虑，并发表公开声明及连署说：</p><blockquote><p>我们—连署者—敦促所有实现了UEFI中称为”Secure Boot”的电脑制造商立即允许自由的操作系统可以被安装<br>基于尊重用户的自由权以及确切保护用户安全，制造商必须允许电脑拥有者停用引导限制，或是提供一个确切可能的方法让他们安装并运行自由的操作系统<br>我们承诺我们将不会购买、也不会推荐剥夺用户重要自由的电脑<br>并且，我们将积极地敦促社会大众避免如此禁锢用户的系统</p></blockquote></li><li><p>2012年1月，微软发布一份关于OEM硬件认证的文件</p><blockquote><p>指出所有的x86和x86-64设备应该将UEFI Secure Boot引导<br>不过可以改用一个可让用户增加数字签名的自定义secure boot模式</p></blockquote></li><li><p>RHEL(从RHEL 7开始)，CentOS(从CentOS 7开始)，Debian(从Debian 10开始)等Linux发行版已经支持SecureBoot</p></li></ul><hr><p><strong>其他概念:</strong></p><ul><li>EFI</li><li>UEFI</li><li>BIOS</li><li>RAID</li><li>Option ROM</li><li>CSM</li><li>SecureBoot</li><li>x86-64(AMD64和Intel 64)</li><li>SMBIOS</li><li>ACPI</li></ul><hr><p><strong>外部链接:</strong></p><ul><li><p>EN-统一可扩展固件接口论坛<a href="https://uefi.org/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://uefi.org/</code></p></blockquote></li><li><p>EN-FSF对于SecureBoot的评价<a href="https://www.fsf.org/campaigns/secure-boot-vs-restricted-boot" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.fsf.org/campaigns/secure-boot-vs-restricted-boot</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Firmware</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>BIOS-1</title>
    <url>/2020/02/18/BIOS-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="BIOS-Basic-Input-Output-System"><a href="#BIOS-Basic-Input-Output-System" class="headerlink" title="BIOS(Basic Input/Output System)"></a>BIOS(Basic Input/Output System)</h3><p><strong>概述:</strong></p><ul><li>基本输入输出系统</li><li>亦称为ROM BIOS、System BIOS、PC BIOS</li><li>是在通电引导阶段运行硬件初始化，以及为操作系统和程序提供运行时服务的固件</li><li>BIOS最早随着CP/M操作系统的推出在1975年出现</li><li>BIOS预安装在个人电脑的主板上，是个人电脑启动时加载的第一个软件</li><li>BIOS用于初始化和测试系统的硬件组件，以及从大容量存储设备(如硬盘)加载引导程序，并由引导程序加载操作系统</li><li>可以理解为是一组固化到计算机内主板上一个ROM芯片上的程序，用于保存计算的基本输入输出的程序以及开机后自检程序和系统自启动程序</li><li>从CMOS中读写系统设置的具体信息</li><li>其主要功能是为计算机提供最底层的、最直接的硬件设置和控制</li></ul><p><strong>相关:</strong></p><ul><li>许多BIOS程序都只能在特定电脑型号或特定主板型号上运行</li><li>早年的BIOS存储于ROM芯片上</li><li>而现在的BIOS多存储于闪存芯片上，以方便BIOS更新</li><li>许多较新的操作系统在引导后不再通过BIOS访问硬件</li><li>系统硬件的变化是由BIOS隐藏，程序使用BIOS功能而不是直接控制硬件</li><li>现代操作系统会忽略BIOS提供的抽象层并直接控制硬件组件</li></ul><hr><ul><li>大约从80386 PC开始，个人电脑的BIOS ROM集成了设置程序(Setup)</li><li>主板的CMOS芯片用于存储BIOS设置值及硬件侦测值</li><li>主板上的钮扣电池用于让CMOS存储BIOS设置值，以及电脑在断电时依然可以让系统时钟运作</li></ul><hr><ul><li>BIOS还为DOS操作系统提供键盘、显示及其他I/O设备的硬件抽象层<blockquote><p>BIOS可通过BIOS中断调用为MS-DOS操作系统及MS-DOS程序提供磁盘、键盘、显示等标准服务<br>通过BIOS中断调用访问视频硬件非常缓慢，因此，有些DOS程序(尤其是游戏)通过直接访问视频硬件提高效率</p></blockquote></li><li>现代操作系统仅在操作系统引导时通过BIOS中断调用访问硬件</li><li>现代的BIOS可以让用户选择由哪个引导设备引导电脑，如光盘驱动器、硬盘、软盘、U盘等等</li><li>旧式的BIOS多半已被UEFI所取代</li></ul><hr><ul><li>自P6微架构开始，Intel处理器支持可重新编程的微码</li><li>BIOS可能包含处理器微代码更新</li><li>一些BIOS支持超频</li></ul><hr><ul><li>BIOS以16位实模式运行<blockquote><p>现代操作系统以保护模式或长模式运行，访问BIOS的16位实模式服务(如BIOS中断调用)是低效的<br>现代操作系统仅在引导时使用BIOS中断调用服务<br>后来的BIOS加入了APM、即插即用规范(PnP)，ACPI等功能</p></blockquote></li></ul><hr><h3 id="运行流程-系统引导"><a href="#运行流程-系统引导" class="headerlink" title="运行流程(系统引导)"></a>运行流程(系统引导)</h3><ol><li>当计算机通电之后，BIOS就会从主板上的ROM芯片运行</li><li>运行加电自检(POST)</li><li>测试和初始化CPU，RAM，直接存储器访问控制器，芯片组，键盘，软盘，硬盘等设备</li><li>当所有的Option ROM被加载后，BIOS就试图从引导设备(如硬盘、软盘、光盘)加载引导程序，由引导程序加载操作系统</li></ol><ul><li>BIOS也可从网卡等设备引导</li></ul><hr><h3 id="BIOS固件"><a href="#BIOS固件" class="headerlink" title="BIOS固件"></a>BIOS固件</h3><ul><li><p>由于BIOS与硬件系统集成在一起(将BIOS程序指令刻录在IC中)，所以有时候也被称为固件</p></li><li><p>在大约1990年BIOS是保存在ROM(只读存储器)中而无法被修改</p></li><li><p>因为BIOS的大小和复杂程度随时间不断增加，而且硬件的更新速度加快，令BIOS也必须不断更新以支持新硬件</p><blockquote><p>于是BIOS就改为存储在EEPROM或者闪存中，让用户可以轻易更新BIOS</p></blockquote></li><li><p>不适当的运行或是终止BIOS更新可能导致电脑无法使用</p><blockquote><p>为了避免BIOS损坏，有些主板有备份的BIOS(“双BIOS”主板)<br>现在的BIOS有”引导区块”(Boot Block)，属于BIOS ROM的一部分，一引导就会被运行<br>这个程序会在运行BIOS前，验证BIOS其他部分是否正确无误(经由检查码，凑杂码等等)<br>如果引导区块侦测到主要的BIOS已损坏，则可自动读取U盘/光盘中的特定BIOS文件并更新BIOS<br>主板厂商/OEM经常发出BIOS升级来更新他们的产品和修正已知的问题</p></blockquote></li></ul><hr><h3 id="CMOS与BIOS"><a href="#CMOS与BIOS" class="headerlink" title="CMOS与BIOS"></a>CMOS与BIOS</h3><ul><li>CMOS是计算机上另一个重要的存储器</li><li>BIOS程序的设置值，硬件参数侦测值被保存在CMOS之中<blockquote><p>而且在BIOS程序引导计算机时，需要加载CMOS中的设置值</p></blockquote></li><li>CMOS通常被集成在南桥芯片组中</li><li>UEFI系统则多用NVRAM存储设置</li></ul><p><strong>BIOS与CMOS的区别</strong></p><ul><li>BIOS是存储在唯读记忆体(EEPROM)</li><li>CMOS为随机存储器(RAM)</li><li>BIOS中存储的是程序，而CMOS中存储的是普通信息</li><li>CMOS的内容在断电会消失<blockquote><p>所以把主板的电池拆出便可重置其内容，同时拆出电池也会重置时间</p></blockquote></li></ul><hr><h3 id="扩展程序（Option-ROM）"><a href="#扩展程序（Option-ROM）" class="headerlink" title="扩展程序（Option ROM）"></a>扩展程序（Option ROM）</h3><ul><li>扩展卡如硬盘控制器、显卡、网卡可能包含BIOS扩展程序(即Option ROM)以为BIOS提供附加的功能</li><li>在BIOS引导操作系统前，Option ROM被BIOS运行</li><li>部分内置于主板的设备(如板载RAID)，其Option ROM可能包含在主板BIOS中</li><li>Option ROM通过BIOS引导规范扩展BIOS的引导功能</li></ul><p><strong>系统初始化</strong></p><ul><li>系统在加电自检(POST)阶段，查找并运行Option ROM</li><li>Option ROM通过BIOS中断调用对硬件进行测试，初始化，并显示诊断信息或显示设置画面</li></ul><hr><h3 id="UEFI简述"><a href="#UEFI简述" class="headerlink" title="UEFI简述:"></a>UEFI简述:</h3><ul><li>因特尔于2000年开发出可扩展固件接口(Extensible Firmware Interface)</li><li>随后，由业界多家著名公司共同成立统一可扩展固件接口论坛(UEFI Forum)</li><li>EFI被更名为UEFI，且由UEFI论坛制定新的UEFI规范</li><li>现时UEFI已经取代传统BIOS，且Intel将于2020年弃用传统BIOS接口</li><li>届时Intel产品不再支持基于16位实模式的UEFI CSM(UEFI兼容性支持模块)</li></ul><hr><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念:"></a>相关概念:</h3><ul><li>BIOS</li><li>SMBIOS</li><li>UEFI</li><li>CMOS</li><li>Option ROM</li><li>固件</li><li>ACPI<blockquote><p>高级配置与电源接口(Advanced Configuration and Power Interface)</p></blockquote></li><li>VEB<blockquote><p>VESA BIOS Extensions是VESA制定的标准</p></blockquote></li><li>Aptio<blockquote><p>AMI基于UEFI规范的下一代BIOS固件<br>将被应用于未来固件可移植性和可扩展性的发展</p></blockquote></li><li>El Torito<blockquote><p>可引导光盘规格</p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Firmware</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GPT/GUID-1</title>
    <url>/2020/02/18/GPT-1/</url>
    <content><![CDATA[<!-- build time:Sun Mar 01 2020 09:34:00 GMT+0800 (中国标准时间) --><h2 id="硬盘结构-主引导扇区-2-GPT-1"><a href="#硬盘结构-主引导扇区-2-GPT-1" class="headerlink" title="硬盘结构-主引导扇区-2/GPT-1"></a>硬盘结构-主引导扇区-2/GPT-1</h2><ul><li>GPT/GUID对应于MBR</li><li>基于UEFI标准</li></ul><h3 id="MBR-GPT-GPT-GUID"><a href="#MBR-GPT-GPT-GUID" class="headerlink" title="MBR/GPT-GPT/GUID"></a>MBR/GPT-GPT/GUID</h3><ul><li>GPT-全局唯一标识分区表(GUID Partition Table）</li><li>实体硬盘的分区表的结构布局的标准</li><li>是<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>可扩展固件接口(UEFI)标准的一部分</li><li>被用于替代BIOS系统中的一32bits来存储逻辑块地址和大小信息的主引导记录(MBR)分区表</li></ul><hr><ul><li>全局唯一标识符(Globally Unique Identifier,GUID)是一种由算法生成的唯一标识</li><li>通常表示成32个16进制数字(0－9，A－F)组成的字符串<blockquote><p>如:<code>{21EC2020-3AEA-1069-A2DD-08002B30309D}</code>它实质上是一个128位长的二进制整数</p></blockquote></li><li>GUID一词有时也专指微软对UUID标准的实现</li><li>GUID的主要目的是产生完全唯一的数字<blockquote><p>在理想情况下，任何计算机和计算机集群都不会生成两个相同的GUID</p></blockquote></li><li>GUID的总数也足够大，达到了<code>2^128(3.4*10^38)</code>个，所以随机生成两个相同GUID的可能性是非常小的，但并不为0<blockquote><p>所以，用于生成GUID的算法通常都加入了非随机的参数(如时间)，以保证这种重复的情况不会发生</p></blockquote></li></ul><hr><h3 id="GPT-特点"><a href="#GPT-特点" class="headerlink" title="GPT-特点:"></a>GPT-特点:</h3><ul><li>在MBR硬盘中，分区信息直接存储于主引导记录(MBR)中(主引导记录中还存储着系统的引导程序)</li><li>在GPT硬盘中，分区表的位置信息储存在GPT头中</li><li>但由于出于兼容性问题，硬盘的第一个扇区仍然用作MBR，之后才是GPT头</li><li>与现代的MBR一样，GPT也使用逻辑区块地址(LBA)取代了早期的CHS寻址方式</li><li>传统MBR信息存储于LBA 0，GPT头存储于LBA 1，接下来才是分区表本身</li><li>为了减少分区表损坏的风险，GPT在硬盘最后保存了一份分区表的副本</li></ul><hr><h3 id="扇区简述"><a href="#扇区简述" class="headerlink" title="扇区简述"></a>扇区简述</h3><p><strong>第一扇区(LBA 0):</strong></p><ul><li>传统MBR(LBA 0)<blockquote><p>在GPT分区表的最开头，出于兼容性考虑仍然存储了一份传统的MBR<br>它用于防止不支持GPT的硬盘管理工具错误识别并破坏硬盘中的数据<br>这个MBR也可称之为保护MBR<br>不能识别GPT硬盘的操作系统通常会识别出一个未知类型的分区，并且拒绝对硬盘进行操作<br>可以完全避免用户特别要求删除其分区的危险<br>另外，能够识别GPT分区表的操作系统会检查保护MBR中的分区表<br>如果分区类型不是0xEE或者MBR分区表中有多个项，也会拒绝对硬盘进行操作</p></blockquote></li><li>在支持从GPT启动的操作系统中，这里也用于存储第一阶段的启动代码</li><li>在保护MBR中，只有一个标识为0xEE的分区，以此来表示这块硬盘使用GPT分区表</li><li>在使用MBR/GPT混合分区表的硬盘中，这部分存储了GPT分区表的一部分分区(通常是前四个分区)<blockquote><p>可以使不支持从GPT启动的操作系统从这个MBR启动，启动后只能操作MBR分区表中的分区</p></blockquote></li></ul><hr><p><strong>第二分区(LBA 1):</strong></p><ul><li>分区表头(LBA 1)<blockquote><p>分区表头定义了硬盘的可用空间以及组成分区表的项的大小和数量<br>EFI标准要求分区表最小要有16,384字节，即128个分区项的大小</p></blockquote></li><li>分区表头还记录了这块硬盘的GUID<blockquote><p>记录了分区表头本身的位置和大小(位置总是在LBA 1)以及备份分区表头和分区表的位置和大小(在硬盘的最后)<br>它还储存着它本身和分区表的CRC32校验</p></blockquote></li><li>固件，引导程序和操作系统在启动时可以根据这个校验值来判断分区表是否出错<blockquote><p>如果出错了，可以使用软件从硬盘最后的备份GPT中恢复整个分区表<br>如果备份GPT也校验错误，硬盘将不可使用</p></blockquote></li><li>所以GPT硬盘的分区表不可以直接使用16进制编辑器修改</li><li>主分区表和备份分区表的头分别位于硬盘的第二个扇区(LBA 1)以及硬盘的最后一个扇区</li><li>备份分区表头中的信息是关于备份分区表的</li></ul><hr><p><strong>其他扇区(分区表本身):</strong></p><ul><li><p>GPT的分区表使用简单而直接的方式表示分区</p></li><li><p>一个分区表项的前16字节是分区类型GUID</p></li><li><p>例如</p><blockquote><p>EFI系统分区的GUID类型是<code>{C12A7328-F81F-11D2-BA4B-00A0C93EC93B}</code><br>接下来的16字节是该分区唯一的GUID(这个GUID指的是该分区本身，而之前的GUID指的是该分区的类型)<br>再接下来是分区起始和末尾的64位LBA编号，以及分区的名字和属性</p></blockquote></li></ul><p><strong>GPT分区表项的格式:</strong></p><table><thead><tr><th align="right">起始字节</th><th align="center">长度</th><th align="left">内容</th></tr></thead><tbody><tr><td align="right">0</td><td align="center">16字节</td><td align="left">分区类型GUID</td></tr><tr><td align="right">16</td><td align="center">16字节</td><td align="left">分区GUID</td></tr><tr><td align="right">32</td><td align="center">8字节</td><td align="left">起始LBA(小端序)</td></tr><tr><td align="right">40</td><td align="center">8字节</td><td align="left">末尾LBA</td></tr><tr><td align="right">48</td><td align="center">8字节</td><td align="left">属性标签(如:60表示”只读”)</td></tr><tr><td align="right">56</td><td align="center">72字节</td><td align="left">分区名(可以包括36个UTF-16(小端序)字符)</td></tr></tbody></table><hr><ul><li>MBR与GPT之间提供了互相转换的机制</li><li>对于不同内核的操作系统有不同的GUID分区类型支持</li></ul><hr><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>GPT/GUID</li><li>MBR</li><li>LBA(逻辑区块地址)</li><li>CHS(早期寻址方式)</li><li>UEFI</li><li>BIOS</li><li>磁道(Track)</li><li>柱面(Cylinder)</li><li>扇区(Sector)</li><li>磁头(Heads)</li><li>盘片(Platters)</li><li>磁盘的物理结构</li><li>磁盘的逻辑结构</li></ul><hr><p><strong>补充内容:</strong></p><p><strong>分区表头的格式:</strong></p><table><thead><tr><th align="right">起始字节</th><th align="center">长度</th><th align="left">内容</th></tr></thead><tbody><tr><td align="right">0</td><td align="center">8字节</td><td align="left">签名(“EFI PART”, 45 46 49 20 50 41 52 54)</td></tr><tr><td align="right">8</td><td align="center">4字节</td><td align="left">修订(在1.0版中，值是00 00 01 00)</td></tr><tr><td align="right">12</td><td align="center">4字节</td><td align="left">分区表头的大小(单位是字节，通常是92字节，即5C 00 00 00)</td></tr><tr><td align="right">16</td><td align="center">4字节</td><td align="left">分区表头(第0－91字节)的CRC32校验，在计算时，把这个字段作为0处理，需要计算出分区序列的CRC32校验后再计算本字段</td></tr><tr><td align="right">20</td><td align="center">4字节</td><td align="left">保留，必须是0</td></tr><tr><td align="right">24</td><td align="center">8字节</td><td align="left">当前LBA(这个分区表头的位置)</td></tr><tr><td align="right">32</td><td align="center">8字节</td><td align="left">备份LBA(另一个分区表头的位置)</td></tr><tr><td align="right">40</td><td align="center">8字节</td><td align="left">第一个可用于分区的LBA(主分区表的最后一个LBA＋1)</td></tr><tr><td align="right">48</td><td align="center">8字节</td><td align="left">最后一个可用于分区的LBA(备份分区表的第一个LBA-1)</td></tr><tr><td align="right">56</td><td align="center">16字节</td><td align="left">硬盘GUID(在类UNIX系统中也叫UUID)</td></tr><tr><td align="right">72</td><td align="center">8字节</td><td align="left">分区表项的起始LBA(在主分区表中是2)</td></tr><tr><td align="right">80</td><td align="center">4字节</td><td align="left">分区表项的数量</td></tr><tr><td align="right">84</td><td align="center">4字节</td><td align="left">一个分区表项的大小(通常是128)</td></tr><tr><td align="right">88</td><td align="center">4字节</td><td align="left">分区序列的CRC32校验</td></tr><tr><td align="right">92</td><td align="center"><code>*</code></td><td align="left">保留，剩余的字节必须是0(对于512字节LBA的硬盘即是420个字节)</td></tr></tbody></table><hr><h3 id="图解补充"><a href="#图解补充" class="headerlink" title="图解补充"></a>图解补充</h3><ul><li>GPT/GUID结构图例说明:</li></ul><img src="/images/disk-images/GPT分区表结构图示.png" width="40%" height="40%"><ul><li>此例中，每个逻辑块(LBA)为512字节，每个分区的记录为128字节</li><li>负数的LBA地址表示从最后的块开始倒数，-1表示最后一个块</li><li>图片来源于: <a href="https://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8</a></li></ul><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">被Intel用于替代个人计算机的BIOS</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Disk</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>MBR-1</title>
    <url>/2020/02/18/MBR-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h2 id="硬盘结构-主引导扇区-1-MBR-1"><a href="#硬盘结构-主引导扇区-1-MBR-1" class="headerlink" title="硬盘结构-主引导扇区-1/MBR-1"></a>硬盘结构-主引导扇区-1/MBR-1</h2><ul><li>以下内容中的MBR特指主引导记录，而不泛指主引导扇区</li><li>主引导扇区泛指以下的所有内容</li><li>磁盘-机械硬盘概念</li></ul><h3 id="MBR主引导记录-master-boot-record"><a href="#MBR主引导记录-master-boot-record" class="headerlink" title="MBR主引导记录(master boot record)"></a>MBR主引导记录(master boot record)</h3><ul><li><p>计算机访问硬盘时所必须读取的首个分区</p></li><li><p>用于记录本身的相关信息与硬盘各个分区的大小及位置信息</p></li><li><p>还包含了基本数据结构的信息</p></li><li><p>硬盘上的三维地址(柱面，磁头，扇区)=(0,0,1)</p></li><li><p>开头的446字节内容</p><blockquote><p>后4个16个字节为磁盘分区表(DPT)<br>结束标志字:2字节结束标准(55AA)</p></blockquote></li><li><p>对于硬盘而言，一个扇区可能的字节数为128×2n(n=0,1,2,3)</p><blockquote><p>大多情况下，取n=2，即一个扇区(sector)的大小为512字节</p></blockquote></li></ul><p><strong>MBR主引导记录构成:</strong></p><ul><li>启动代码<blockquote><p>主引导记录最开头的第一阶段是引导代码<br>其中的硬盘引导程序的主要作用是检查分区表是否正确<br>同时在系统硬件完成自检后将控制权交给硬盘上的引导程序(如GNU GRUB)<br>此阶段不依赖任何操作系统<br>启动代码可以改变，以用于实现多系统引导</p></blockquote></li></ul><hr><h3 id="磁盘分区表-DPT"><a href="#磁盘分区表-DPT" class="headerlink" title="磁盘分区表(DPT)"></a>磁盘分区表(DPT)</h3><ul><li><p>磁盘分区表占据主引导扇区的64个字节(偏移01BEH–偏移01FDE)</p></li><li><p>可对四个分区的信息进行描述，其中每个分区的信息占据16个字节</p></li><li><p>字节定义:参考硬盘分区结构信息</p></li><li><p>示例:</p></li><li><p>假设某一分区在硬盘分区表的信息:</p><blockquote><p><code>80 01 01 00 0B FE BF FC 3F 00 00 00 7E 86 BB 00</code></p></blockquote></li><li><p>说明:</p><blockquote><p>最前面的”80”是一个分区的激活标志，表示系统可引导<br>“01 01 00”表示分区开始的磁头号为1，开始的扇区号为1，开始的柱面号为0<br>“0B”表示分区的系统类型是FAT32，其他比较常用的有04(FAT16)，07(NTFS)<br>“FE BF FC”表示分区结束的磁头号为254，分区结束的扇区号为63、分区结束的柱面号为764<br>“3F 00 00 00”表示首扇区的相对扇区号为63(小端序)<br>“7E 86 BB 00”表示总扇区数为12289662(小端序)</p></blockquote></li><li><p>对于大于8.4G的现代硬盘，CHS已经无法表示, BIOS使用LBA模式</p><blockquote><p>对于超出的部分，CHS值通常设为0xFEFFFF，并加以忽略<br>直接使用Offset 0x08-0x0c的4字节相对值，再进行内部转换</p></blockquote></li><li><p>结束标志字55，AA(偏移1FEH－偏移1FFH)</p><blockquote><p>最后两个字节是检验主引导记录是否有效的标志</p></blockquote></li></ul><hr><h3 id="主引导扇区读取逻辑-流程"><a href="#主引导扇区读取逻辑-流程" class="headerlink" title="主引导扇区读取逻辑(流程):"></a>主引导扇区读取逻辑(流程):</h3><ol><li>BIOS加电/引导自检(Power On Self Test – POST)<blockquote><p>BIOS执行内存地址为FFFF:0000H处的跳转指令，跳转到固化在ROM中的自检程序处，对系统硬件(包括内存)进行检查</p></blockquote></li><li>读取主引导记录(MBR)<blockquote><p>当BIOS检查到硬件正常并与CMOS中的设置相符后，按照CMOS中对启动设备的设置顺序检测可用的启动设备<br>BIOS将相应启动设备的第一个扇区(也就是MBR扇区)读入内存地址为0000:7C00H处</p></blockquote></li><li>检查0000:7DFEH-0000:7DFFH(MBR的结束标志位)是否等于55AAH，若不等于则转去尝试其他启动设备<blockquote><p>如果没有启动设备满足要求则显示”NO ROM BASIC”然后死机</p></blockquote></li><li>检测到有启动设备满足要求后，BIOS将控制权交给相应启动设备<blockquote><p>启动设备的MBR将自己复制到0000:0600H处，然后继续执行</p></blockquote></li><li>根据MBR中的引导代码启动引导程序(如GNU GRUB)</li></ol><ul><li>BIOS不仅检查0000:7DFEH-0000:7DFFH（MBR的结束标志位）是否等于55AAH，往往还对磁盘是否有写保护、主引导扇区中是否存在活动分区等进行检查</li><li>如果发现磁盘有写保护，则显示磁盘写保护出错信息</li><li>如果发现磁盘中不存在活动分区，则显示类似如下的信息“Remove disk or other media Press any key to restart”</li></ul><hr><h3 id="硬盘分区简述"><a href="#硬盘分区简述" class="headerlink" title="硬盘分区简述:"></a>硬盘分区简述:</h3><ul><li><p>MBR(主引导记录)只包含了64个字节的DPT(磁盘分区表)</p><blockquote><p>因为每个分区需要占有16个字节，所以对于MBR型分区结构的硬盘，最多只能识别4个主要分区(Primary partition)<br>如果此时想要得到4个以上的主要分区，就需要引出拓展分区了<br>拓展分区被归类为主分区(是主分区的一种)<br>但与主分区在理论上不同的是拓展分区可以被划分为无数个逻辑分区</p></blockquote></li><li><p>拓展分区</p><blockquote><p>拓展分区中的逻辑驱动器的引导记录是链式的<br>每个逻辑分区都有一个扩展引导记录(EBR/结构类似于MBR)<br>其中表的第一项指向逻辑分区本身的引导扇区<br>第二项指向下一个逻辑驱动器的EBR，分区表的第三，第四项没有用到</p></blockquote></li><li><p>windows操作系统在一般情况下，只会划分一个主分区用于存储操作系统，其余全部划入拓展分区</p></li><li><p><code>[1-主分区]-[3-逻辑分区-&gt;N-逻辑分区]</code></p></li></ul><hr><p><strong>MBR分区表与GPT分区表</strong></p><ul><li><p>MBR分区表</p><blockquote><p>MBR磁盘分区样式支持的最大卷为2TB(Terabytes)，并且最多四个主分区(或3个主分区，1个扩展分区和无限制的逻辑驱动器)</p></blockquote></li><li><p>GPT分区表</p><blockquote><p>GPT磁盘分区样式在理论上最大支持128个分隔，一个分割最大18 EB(Exabytes)<br>GPT分区磁盘有备份分区表，用以提高分区数据结构的完整性<br>如果硬盘太大则必须改用GPT</p></blockquote></li><li><p>操作系统限制问题</p><blockquote><p>分区表本身需要占有一定空间，规划硬盘时留给分区表的空间决定了最多可以有多少个分区<br>IA-64版Windows限制最多有128个分区，同时这也是EFI规定的分区表最小尺寸<br>GPT与MBR在分区的磁盘不同点是GPT将至关重要的平台操作系统位于分区，而非位于非分区或隐藏分区<br>在UEFI系统上，通常是通过ESP分区中的EFI应用程序文件来引导GPT硬盘上的操作系统，而不是活动主分区上的引导程序</p></blockquote></li><li><p>系统分区可以设为活动主分区，但不是必须的，需要根据引导程序而定</p></li><li><p>一个硬盘的分区个数还要受到分区大小的限制，因为硬盘是按照柱面分区的：一个分区至少要占一个柱面</p></li><li><p>现在的硬盘结构已经和老式硬盘有了很大区别，其寻址结构也不再是CHS寻址，所以这里的柱面大小不同于相关软件显示的柱面大小</p></li><li><p>对于物理结构上有n个面的硬盘，其分区空间的最小值为:<code>n*扇区/磁道*512字节</code></p></li><li><p>根据16字节分区表的结构:当前分区的扇区数用4个字节表示，前面各分区扇区数的总和也是4个字节，而<code>232*512 ＝ 2 199 023 255 552 Byte</code></p></li></ul><hr><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念:"></a>相关概念:</h3><ul><li>BIOS</li><li>UEFI</li><li>MBR</li><li>GPT-GUID/GPT<blockquote><p>GUID磁碟分割表<br>全局唯一标识分区表<br>是一个实体硬盘的分区表的结构布局的标准</p></blockquote></li><li>主分区/拓展分区/逻辑分区</li><li>磁盘/操作系统文件系统<blockquote><p>FAT/exFAT/NTFS</p></blockquote></li><li>RAM</li><li>ROM</li><li>BOOT</li><li>GURB</li><li>CHS<blockquote><p>柱面-磁头-扇区(Cylinder-head-sector)<br>是早期对硬盘驱动器的每一个物理数据块进行编址的一种方法<br>就软盘驱动器而言，可对同一磁盘介质进行低级格式化而得到不同的容量</p></blockquote></li><li>LBA</li><li>EFI<blockquote><p>可扩展固件接口标准</p></blockquote></li><li>Buffer<blockquote><p>硬盘缓存</p></blockquote></li><li>硬盘数据接口<blockquote><p>ATA/SATA/SCSI/SAS/FC/电源接口</p></blockquote></li><li>逻辑结构(机械硬盘)</li><li>物理结构(机械硬盘)</li><li>机械/固态/混合/硬盘/软盘</li></ul><hr><h3 id="相关内容补充"><a href="#相关内容补充" class="headerlink" title="相关内容补充:"></a>相关内容补充:</h3><p><strong>硬盘分区结构信息</strong></p><table><thead><tr><th align="left">偏移</th><th align="left">长度(字节)</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">00H</td><td align="left">1</td><td align="left">分区状态:00–&gt;非活动分区；80–&gt;活动分区(其它数值没有意义)</td></tr><tr><td align="left">01H</td><td align="left">1</td><td align="left">分区起始磁头号(HEAD)，用到全部8位</td></tr><tr><td align="left">02H</td><td align="left">2</td><td align="left">分区起始扇区号(SECTOR)，占据02H的位0－5；该分区的起始磁柱号(CYLINDER)，占据02H的位6－7和03H的全部8位</td></tr><tr><td align="left">04H</td><td align="left">1</td><td align="left">文件系统标志位</td></tr><tr><td align="left">05H</td><td align="left">1</td><td align="left">分区结束磁头号(HEAD)，用到全部8位</td></tr><tr><td align="left">06H</td><td align="left">2</td><td align="left">分区结束扇区号(SECTOR)，占据06H的位0－5；该分区的结束磁柱号(CYLINDER)，占据06H的位6－7和07H的全部8位</td></tr><tr><td align="left">08H</td><td align="left">4</td><td align="left">分区起始相对扇区号</td></tr><tr><td align="left">0CH</td><td align="left">4</td><td align="left">分区总的扇区数</td></tr></tbody></table><hr><p><strong>标准MBR结构</strong></p><p><strong>准确地址长度与描述:</strong></p><table><thead><tr><th align="center">Hex</th><th align="center">Oct</th><th align="center">Dec</th><th align="center">描述</th><th align="center">长度(字节)</th></tr></thead><tbody><tr><td align="center">0000</td><td align="center">0000</td><td align="center">0</td><td align="center">代码区</td><td align="center">440(最大446)</td></tr><tr><td align="center">01B8</td><td align="center">0670</td><td align="center">440</td><td align="center">选用磁盘标志</td><td align="center">4</td></tr><tr><td align="center">01BC</td><td align="center">0674</td><td align="center">444</td><td align="center">一般为空值; 0x0000</td><td align="center">2</td></tr><tr><td align="center">01BE</td><td align="center">0676</td><td align="center">446</td><td align="center">标准MBR分区表规划(四个16 byte的主分区表入口)</td><td align="center">64</td></tr><tr><td align="center">01FE</td><td align="center">0776</td><td align="center">510</td><td align="center">55h-(MBR有效标志:0x55AA)</td><td align="center">1</td></tr><tr><td align="center">01FF</td><td align="center">0777</td><td align="center">511</td><td align="center">AAh-(MBR有效标志:0x55AA)</td><td align="center">1</td></tr></tbody></table><ul><li>MBR总大小:446字节+64字节+2字节=512字节(长度)</li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ul><li><p>CN-Linux引导程序<a href="https://www.ibm.com/developerworks/cn/linux/l-linuxboot/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.ibm.com/developerworks/cn/linux/l-linuxboot/</code></p></blockquote></li><li><p>CN-FAT详解-1<a href="https://web.archive.org/web/20090725091233/http://www.raid-recovery.org/Article/sjhfdoc/200404/1.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://web.archive.org/web/20090725091233/http://www.raid-recovery.org/Article/sjhfdoc/200404/1.html</code></p></blockquote></li></ul><hr><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><p><strong>引导扇区:</strong></p><ul><li><p>引导扇区是硬盘、软盘或类似的数据存储设备的一个扇区</p><blockquote><p>内含负责引导(booting)”存放在碟片(disk)的其他部分的程序(通常，但不必然是操作系统)”的机器代码</p></blockquote></li><li><p>引导扇区有两种:</p></li><li><p>Volume Boot Record</p><blockquote><p>是磁盘未被分割的第一个扇区，或已分割的分区的第一个扇区，包含了加载与唤起操作系统(放在这个分区之内或放在这个磁盘上)的码</p></blockquote></li><li><p>Master Boot Record</p><blockquote><p>是磁盘已被分割的第一个扇区，它包含定位活动分区与唤起它的VBR的码</p></blockquote></li><li><p>IBM PC兼容机上，BIOS不在意VBR与MBR的不同，甚至分区</p></li><li><p>固件只是加载并运行磁盘的第一个扇区(sector)，在MBR里的码，才知道磁盘分割消息，且是负责加载引导活动分区的VBR<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的地方</p></li></ul><hr><h3 id="LVM-逻辑卷管理器"><a href="#LVM-逻辑卷管理器" class="headerlink" title="LVM(逻辑卷管理器)"></a>LVM(逻辑卷管理器)</h3><p><strong>概述:</strong></p><ul><li>LVM(Logical Volume Manager)</li><li>又译为逻辑卷宗管理器、逻辑扇区管理器、逻辑磁盘管理器</li><li>是Linux核心所提供的逻辑卷管理(Logical volume management)功能</li><li>它在硬盘的硬盘分区之上，又创建一个逻辑层，以方便系统管理硬盘分割系统</li><li>最先由IBM开发，在AIX系统上实现</li></ul><p><strong>LVM基本术语:</strong></p><ul><li><p>PV</p><blockquote><p>物理卷，PV处于LVM系统最低层，它可以是整个硬盘，或者与磁盘分区具有相同功能的设备(如RAID)<br>但和基本的物理存储介质相比较，多了与LVM相关管理参数</p></blockquote></li><li><p>VG</p><blockquote><p>卷组，创建在PV之上，由一个或多个PV组成，可以在VG上创建一个或多个”LVM分区”(逻辑卷)<br>功能类似非LVM系统的物理硬盘</p></blockquote></li><li><p>LV</p><blockquote><p>逻辑卷，从VG中分割出的一块空间，创建之后其大小可以伸缩，在LV上可以创建文件系统(如/var,/home)</p></blockquote></li><li><p>PE</p><blockquote><p>物理区域，每一个PV被划分为基本单元(也被称为PE)，具有唯一编号的PE是可以被LVM寻址的最小存储单元<br>默认为4MB</p></blockquote></li></ul><hr><p><strong>相关概念:</strong></p><ul><li>Linux file system(Linux文件系统)</li><li>Linux内核支持文件系统</li><li>Unix文件系统</li><li>扩展文件属性</li><li>逻辑卷轴管理</li><li>引导扇区</li><li>磁盘分区</li><li>分区表</li></ul><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">可变码率VBR(Variable bitrate)VBR和该词相对应的词是固定码率CBR(constant bit rate)/(内容有关数据压缩算法)</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Disk</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian GNU/Linux-1</title>
    <url>/2020/02/18/Debian-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Debian-GNU-Linux-1"><a href="#Debian-GNU-Linux-1" class="headerlink" title="Debian GNU/Linux-1"></a>Debian GNU/Linux-1</h3><ul><li>通用软件包管理与操作的解决方案</li><li>一:<code>apt-get</code>一条龙的全自动化解决</li><li>二:<code>wget/curl</code>获取-&gt;<code>dpkg/autoconf</code>安装-&gt;设置环境变量-&gt;设置别名</li><li><code>apt-get/dpkg/wget/curl</code>都可用户依赖解决</li></ul><hr><ul><li>目录:</li></ul><ol><li>apt-get</li><li>curl</li><li>wget</li><li>dpkg</li><li>autoconf-configure/make</li><li>env/export</li><li>set/declare</li><li>alias</li></ol><hr><h3 id="Debian内软件获取与卸载方法简述"><a href="#Debian内软件获取与卸载方法简述" class="headerlink" title="Debian内软件获取与卸载方法简述"></a>Debian内软件获取与卸载方法简述</h3><p><strong>APT-GET包管理器参数简述</strong></p><ul><li><p>从镜像源仓库拉取软件包并于本地自动配置</p><blockquote><p><code>$apt-get install package_name</code></p></blockquote></li><li><p>联网解决或清理依赖关系</p><blockquote><p><code>$apt-get install -f</code></p></blockquote></li><li><p>刷新本地镜像源仓库索引</p><blockquote><p><code>$apt-get updata</code></p></blockquote></li><li><p>更新本地镜像源仓库与所有可更新软件包</p><blockquote><p><code>$apt-get upgrade</code></p></blockquote></li><li><p>查看软件包依赖</p><blockquote><p><code>$apt-get show</code><br><code>$apt-cache show depends package_name</code></p></blockquote></li><li><p>查看仓库内软件包列表</p><blockquote><p><code>$apt-get search</code><br><code>$apt-cache search package_name</code></p></blockquote></li><li><p>卸载软件包及其配置文件</p><blockquote><p><code>$apt purge/apt remove</code><br><code>$apt-get -purge remove package_name</code></p></blockquote></li><li><p>删除软件包备份</p><blockquote><p><code>$apt-get clean</code></p></blockquote></li><li><p>镜像源目录:</p><blockquote><p><code>/etc/apt/sources.list</code></p></blockquote></li><li><p>还有很多用于包管理与镜像管理的软件与程序</p><blockquote><p>conda,npm等等…</p></blockquote></li><li><p>CentOS体系</p><blockquote><p>yum/rpm</p></blockquote></li></ul><hr><h3 id="URL拉取工具"><a href="#URL拉取工具" class="headerlink" title="URL拉取工具"></a>URL拉取工具</h3><ul><li>拉取所选网页内所有资源，多用于直接从远端仓库拉源码至本地</li></ul><p><strong>CURL</strong></p><blockquote><p><code>$curl [URL(选项)] [参数(options)]</code></p></blockquote><p><strong>WGET</strong></p><blockquote><p><code>$wget [URL(选项)] [参数(options)]</code></p></blockquote><ul><li>参数简述:<blockquote><p><code>-r</code>下载整个网站<br><code>-c</code>断点续传<br><code>-i</code>批量下载<br><code>--help/man</code></p></blockquote></li></ul><hr><h3 id="Dpkg"><a href="#Dpkg" class="headerlink" title="Dpkg"></a>Dpkg</h3><ul><li><p>用于管理Debian包的工具</p></li><li><p>安装已有包</p><blockquote><p><code>$dpkg -i package_name.deb</code></p></blockquote></li><li><p>安装目录下的所有包</p><blockquote><p><code>$dpkg -R /文件目录</code></p></blockquote></li><li><p>查看软件包安装位置</p><blockquote><p><code>$dpkg -L 软件包</code></p></blockquote></li><li><p>卸载一个包及其配置信息</p><blockquote><p><code>$dpkg -P package_name</code></p></blockquote></li></ul><blockquote><p><code>--help/man</code></p></blockquote><hr><h3 id="源码包安装与管理"><a href="#源码包安装与管理" class="headerlink" title="源码包安装与管理"></a>源码包安装与管理</h3><p><strong>autotools</strong></p><ul><li><p>保证下载来的源码包已经有makefile和由autoconf生存的configure脚本</p></li><li><p>根据makefile运行configure脚本并选择安装路径</p><blockquote><p><code>$./configure --prefix=/安装目录</code></p></blockquote></li><li><p>用make进行源码编译</p><blockquote><p><code>$make</code></p></blockquote></li><li><p>使用make安装</p><blockquote><p><code>$make install</code></p></blockquote></li><li><p>还有很多参数<code>--help</code>或<code>man</code></p></li><li><p>在source内执行make uninstall卸载软件包</p></li><li><p>正常情况下source内的makefile都能写uninstall</p></li><li><p>没有makefile的话看makefile的安装项，挨个删除</p></li><li><p>如果连source被删了的话，那没法了</p></li></ul><hr><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><ul><li><p>tar -zxvf xxx.tar</p></li><li><p>zip xxx.zip</p></li><li><p>gzip xxx.gzip</p></li><li><p>解压没什么好说的</p></li></ul><hr><h3 id="环境变量与自定义变量"><a href="#环境变量与自定义变量" class="headerlink" title="环境变量与自定义变量"></a>环境变量与自定义变量</h3><p><strong>配置环境变量与自定义变量(PATH变量/Shell变量)</strong></p><ul><li>系统变量/用户变量</li></ul><p><strong>PATH变量</strong></p><ul><li><p>查看PATH变量列表(内容)</p><blockquote><p><code>$echo $PATH</code></p></blockquote></li><li><p>PATH变量的默认优先于用户的可执行程序</p></li><li><p>用export工具向PATH内添加内容</p><blockquote><p><code>export PATH=$PATH:/可执行文件所在目录/</code></p></blockquote></li><li><p>此时添加的是永久变量</p></li><li><p>export命令基本格式</p><blockquote><p><code>export [-fnp][变量名称]=[变量设置值]</code></p></blockquote></li><li><p>可执行文件目录说明:</p><blockquote><p>可执行文件多存于<code>/usr/local/bin</code>与<code>/usr/bin</code>内<br><code>/usr/local/bin</code>优先于<code>/usr/bin</code><br><code>/usr/bin</code>目录用于存放系统预装的可执行程序文件<br><code>/usr/local/bin</code>目录用于存放用户的可执行的文件，系统升级会覆盖此目录</p></blockquote></li></ul><hr><ul><li><p>用set工具添加环境变量与自定义变量</p></li><li><p>set用于添加session(会话)级别环境变量</p></li><li><p>语句形式</p><blockquote><p><code>set PATH=/usr/local/xxx/bin</code></p></blockquote></li><li><p>或用declare定义新变量:</p><blockquote><p><code>declare 变量名=&#39;变量值&#39;</code></p></blockquote></li></ul><hr><p><strong>env/export/set/declare简述</strong></p><ul><li><p>env 和 export 显示环境变量</p><blockquote><p>env 显示系统级别的环境变量，不显示自定义<br>export 功能与env相同，只不过会根据变量名进行排序</p></blockquote></li><li><p>set 和 declare 显示环境变量和自定义变量</p><blockquote><p>set 显示用户级别的环境变量，显示自定义<br>declare 显示所有级别的变量</p></blockquote></li><li><p>export用于管理env，set用于管理declare</p></li><li><p>set 用来显示本地变量</p></li><li><p>env 用来显示环境变量</p></li><li><p>export 用来显示和设置环境变量</p></li><li><p>set 显示当前shell的变量，包括当前用户的变量</p></li><li><p>env 显示当前用户的变量</p></li><li><p>export 显示当前导出成用户变量的shell变量</p></li></ul><hr><ul><li>清除用户级别环境变量<blockquote><p><code>unset 变量名</code></p></blockquote></li></ul><p><strong>变量所在目录</strong></p><ul><li><p>普通用户</p><blockquote><p><code>~/home/.bashrc</code></p></blockquote></li><li><p>root用户</p><blockquote><p><code>~/.bashrc</code><br><code>~/etc/profile</code></p></blockquote></li><li><p>权限足够时可以直接对其进行修改与管理</p></li><li><p>其他概念</p></li><li><p><code>~/.bashrc</code></p></li><li><p><code>~/.bash_profile</code></p></li><li><p><code>~/etc/profile</code></p></li><li><p><code>~/etc/environment</code></p></li></ul><p><strong>usr全称:Unix System Resource</strong></p><hr><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><ul><li><p>使用alias工具对指令设置别名</p></li><li><p>基本格式:</p><blockquote><p><code>$alias[别名]=[指令名称]</code></p></blockquote></li></ul><hr><p><strong>Debian各版本开发代号</strong></p><table><thead><tr><th align="left">代号</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">下一代Debian正式发行版的代号为bullseye</td><td align="left">发布时间尚未确定</td></tr><tr><td align="left">Debian 10(buster)</td><td align="left">当前的稳定版(stable)</td></tr><tr><td align="left">Debian 9(stretch)</td><td align="left">旧的稳定版(oldstable)</td></tr><tr><td align="left">Debian 8(jessie)</td><td align="left">更旧的稳定版(oldoldstable)</td></tr><tr><td align="left">Debian 7(wheezy)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian 6.0(squeeze)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian GNU/Linux 5.0(lenny)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian GNU/Linux 4.0(etch)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian GNU/Linux 3.1(sarge)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian GNU/Linux 3.0(woody)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian GNU/Linux 2.2(potato)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian GNU/Linux 2.1(slink)</td><td align="left">被淘汰的稳定版</td></tr><tr><td align="left">Debian GNU/Linux 2.0(hamm)</td><td align="left">被淘汰的稳定版</td></tr></tbody></table><hr><p><strong>debian中文乱码解决方法:</strong></p><p><strong>安装locales</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> -y update</span><br><span class="line">apt-<span class="builtin-name">get</span> install -y locales</span><br><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><ul><li><p>选择并设置字符编码</p><blockquote><p><code>en_US.UTF-8</code><br><code>zh_CN.UTF-8</code></p></blockquote></li><li><p>最后选择默认默认<code>ZH_CN.UTF-8</code></p></li><li><p>在界面中可以勾选<code>en_US.UTF-8</code>和<code>zh_CN.UTF-8</code></p></li><li><p>然后选择<code>zh_CN.UTF-8</code>为默认的LOCALE，则系统为中文界面(这里也可以选<code>en_US.UTF-8</code>，使系统为英文界面)</p></li><li><p>检查当前locale环境</p><blockquote><p><code>locale</code></p></blockquote></li><li><p>如果是正确的则会输出<code>LANG =zh_CN.UTF-8</code></p></li></ul><p><strong>如果还有问题:</strong></p><ul><li><p>安装字体</p><blockquote><p><code>apt-get install ttf-wqy-zenhei -y</code></p></blockquote></li><li><p>安装输入法</p><blockquote><p><code>apt-get install ibus ibus-gtk ibus-pinyin -y</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>GNU/Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-4</title>
    <url>/2020/02/17/MongoDB-4/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="MongoDB-4"><a href="#MongoDB-4" class="headerlink" title="MongoDB-4"></a>MongoDB-4</h3><ul><li>剩余概念补充-1</li></ul><p><strong>概念简述:</strong></p><ol><li>管道</li><li>复制原理(创建副本集)</li><li>分片技术(集群)</li></ol><hr><ol><li><strong>管道(聚合)</strong></li></ol><ul><li>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数</li><li>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理</li><li>管道操作是可以重复的</li><li>表达式：处理输入文档并输出</li><li>表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档</li></ul><p><strong>常用聚合框架(模式)一览:</strong></p><table><thead><tr><th align="left">框架</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">$project</td><td align="left">修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档</td></tr><tr><td align="left">$match</td><td align="left">用于过滤数据，只输出符合条件的文档，$match使用MongoDB的标准查询操作</td></tr><tr><td align="left">$limit</td><td align="left">用来限制MongoDB聚合管道返回的文档数</td></tr><tr><td align="left">$skip</td><td align="left">在聚合管道中跳过指定数量的文档，并返回余下的文档</td></tr><tr><td align="left">$unwind</td><td align="left">将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值</td></tr><tr><td align="left">$group</td><td align="left">将集合中的文档分组，可用于统计结果</td></tr><tr><td align="left">$sort</td><td align="left">将输入文档排序后输出</td></tr><tr><td align="left">$geoNear</td><td align="left">输出接近某一地理位置的有序文档</td></tr></tbody></table><hr><ol start="2"><li>MongoDB复制原理(创建副本集)</li></ol><ul><li><p>MongoDB复制是将数据同步在多个服务器的过程</p></li><li><p>复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性</p></li><li><p>复制还允许从硬件故障和服务中断中恢复数据</p></li><li><p>复制作用:</p><blockquote><p>保障数据的安全性<br>数据高可用性<code>(24*7)</code><br>灾难恢复<br>无需停机维护(如备份，重建索引，压缩)<br>分布式读取数据</p></blockquote></li></ul><p><strong>MongoDB复制原理</strong></p><ul><li><p>mongodb的复制至少需要两个节点</p><blockquote><p>其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据</p></blockquote></li><li><p>mongodb各个节点常见的搭配方式为：一主一从、一主多从</p></li><li><p>主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作</p><blockquote><p>然后对本地的数据副本执行这些操作，从而保证从节点的数据与主节点一致</p></blockquote></li><li><p>复制的逻辑结构简述:</p></li><li><p>客户端从主节点读取数据，在客户端写入数据到主节点时， 主节点与从节点进行数据交互保障数据的一致性</p><blockquote><p><code>Client Application-Write/Reads-&gt;Primary-Replication/Replication-&gt;Secondary/Secondary</code></p></blockquote></li></ul><hr><p><strong>MongoDB副本集设置</strong></p><ol><li>利用同一个MongoDB来做MongoDB主从模型</li><li>通过指定<code>--replSet</code>选项来启动mongoDB，<code>--replSet</code>基本语法格式如下:<blockquote><p><code>mongod --port &quot;PORT&quot; --dbpath &quot;YOUR_DB_DATA_PATH&quot; --replSet &quot;REPLICA_SET_INSTANCE_NAME&quot;</code></p></blockquote></li></ol><p><strong>参数说明:</strong></p><ol><li><code>REPLICA_SET_INSTANCE_NAME</code>为所选实例命名</li><li>指定MongoDB实例所处端口(端口号)</li><li>此时会启动并连接MongoDB服务</li><li>在Mongo客户端可以使用命令<code>rs.initiate()</code>来启动一个新的副本集</li><li>可以使用<code>rs.conf()</code>来查看副本集的配置</li><li>查看副本集状态执行<code>rs.status()</code>命令</li></ol><p><strong>副本集特征:</strong></p><ul><li><p>N 个节点的集群</p></li><li><p>任何节点可作为主节点</p></li><li><p>所有写入操作都在主节点上</p></li><li><p>自动故障转移</p></li><li><p>自动恢复</p></li><li><p>rs.add()方法用于添加副本集的成员</p></li><li><p>rs.add() 命令基本语法格式:</p><blockquote><p><code>rs.add(HOST_NAME:PORT)</code></p></blockquote></li></ul><ul><li><p>MongoDB中只能通过主节点将Mongo服务添加到副本集中</p><blockquote><p>判断当前运行的Mongo服务是否为主节点可以使用命令<code>db.isMaster()</code></p></blockquote></li><li><p>MongoDB的副本集与常见的主从有所不同</p><blockquote><p>主从在主机宕机后所有服务将停止<br>而副本集在主机宕机后<br>副本会接管主节点成为主节点<br>不会出现宕机现象</p></blockquote></li></ul><hr><ol start="3"><li><strong>分片技术(集群)</strong></li></ol><ul><li>在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求</li><li>当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量<blockquote><p>此时就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据</p></blockquote></li></ul><p><strong>分片技术的作用:</strong></p><ul><li>复制所有的写入操作到主节点</li><li>延迟的敏感数据会在主节点查询</li><li>有效解决单个副本集限制在12个节点的问题</li><li>能解决当请求量巨大时会出现内存不足</li><li>能够解决本地磁盘不足</li><li>可以避免价格昂贵的垂直扩展</li></ul><p><strong>逻辑简述:</strong></p><blockquote><p><code>(APP Server[Router(mongos)])|(APP Server[Router(mongos)])&lt;-2 or more Routes-&gt;&lt;-&gt;(3*Config Server)&lt;-&gt;&lt;-2 or more Shards-&gt;(Shard(replica set))|(Shard(replica set))</code></p></blockquote><ul><li><p>组件描述:</p><blockquote><p>Shard:用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障<br>Config Server:mongod实例，存储了整个 ClusterMetadata，其中包括 chunk信息<br>Query Routers:前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用</p></blockquote></li><li><p>实例不进行阐述</p></li></ul><hr><p><strong>其它概念:</strong></p><ol><li>数据备份与恢复</li><li>监控部署</li><li>其他语言接口</li><li>关系</li><li>数据库引用</li><li>MongoDB覆盖索引查询</li><li>Map Reduce</li><li>固定集合(Capped Collections)</li></ol><hr><ol><li>查询分析</li><li>高级索引</li><li>索引限制</li><li>原子操作</li><li>全文检索</li><li>ObjectId</li><li>自动增长</li></ol><hr><ul><li>正则表达式</li><li>操作符</li><li>运算符</li><li>管理工具:<blockquote><p>Rockmongo<br>GridFS</p></blockquote></li></ul><hr><ul><li>有待补充…</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-3</title>
    <url>/2020/02/17/MongoDB-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="MongoDB-3"><a href="#MongoDB-3" class="headerlink" title="MongoDB-3"></a>MongoDB-3</h3><p><strong>使用数据模型:</strong></p><ul><li>集合SET1<blockquote><p><code>db.createCollection(&quot;SET1&quot;, { capped : true, autoIndexId : true, size : 6142800, max : 10000} )</code></p></blockquote></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"A1"</span>, B: <span class="string">"A2"</span>, likes: <span class="number">100</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"A1"</span>, B: <span class="string">"A2"</span>, likes: <span class="number">110</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"B1"</span>, B: <span class="string">"B2"</span>, likes: <span class="number">120</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"B1"</span>, B: <span class="string">"B2"</span>, likes: <span class="number">130</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"D1"</span>, B: <span class="string">"D2"</span>, likes: <span class="number">140</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"D1"</span>, B: <span class="string">"D2"</span>, likes: <span class="number">150</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"E1"</span>, B: <span class="string">"E2"</span>, likes: <span class="number">160</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"E1"</span>, B: <span class="string">"E2"</span>, likes: <span class="number">170</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"F1"</span>, B: <span class="string">"F2"</span>, likes: <span class="number">180</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"F1"</span>, B: <span class="string">"F2"</span>, likes: <span class="number">190</span>&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.create<span class="constructor">Collection(<span class="string">"SET1"</span>, &#123; <span class="params">capped</span> : <span class="params">true</span>, <span class="params">autoIndexId</span> : <span class="params">true</span>, <span class="params">size</span> : 6142800, <span class="params">max</span> : 10000&#125; )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"note"</span> : <span class="string">"the autoIndexId option is deprecated and will be removed in a future release"</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"A1"</span>, <span class="string">B:</span> <span class="string">"A2"</span>, <span class="string">likes:</span> <span class="number">100</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"A1"</span>, <span class="string">B:</span> <span class="string">"A2"</span>, <span class="string">likes:</span> <span class="number">110</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"B1"</span>, <span class="string">B:</span> <span class="string">"B2"</span>, <span class="string">likes:</span> <span class="number">120</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"B1"</span>, <span class="string">B:</span> <span class="string">"B2"</span>, <span class="string">likes:</span> <span class="number">130</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"D1"</span>, <span class="string">B:</span> <span class="string">"D2"</span>, <span class="string">likes:</span> <span class="number">140</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"D1"</span>, <span class="string">B:</span> <span class="string">"D2"</span>, <span class="string">likes:</span> <span class="number">150</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"E1"</span>, <span class="string">B:</span> <span class="string">"E2"</span>, <span class="string">likes:</span> <span class="number">160</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"E1"</span>, <span class="string">B:</span> <span class="string">"E2"</span>, <span class="string">likes:</span> <span class="number">170</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"F1"</span>, <span class="string">B:</span> <span class="string">"F2"</span>, <span class="string">likes:</span> <span class="number">180</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.insert(&#123; <span class="string">A:</span> <span class="string">"F1"</span>, <span class="string">B:</span> <span class="string">"F2"</span>, <span class="string">likes:</span> <span class="number">190</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="module-access"><span class="module"><span class="identifier">SET1</span>.</span></span>find<span class="literal">()</span></span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02973"</span>)</span>, <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02974"</span>)</span>, <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : <span class="number">110</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02975"</span>)</span>, <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : <span class="number">120</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02976"</span>)</span>, <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : <span class="number">130</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02977"</span>)</span>, <span class="string">"A"</span> : <span class="string">"D1"</span>, <span class="string">"B"</span> : <span class="string">"D2"</span>, <span class="string">"likes"</span> : <span class="number">140</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02978"</span>)</span>, <span class="string">"A"</span> : <span class="string">"D1"</span>, <span class="string">"B"</span> : <span class="string">"D2"</span>, <span class="string">"likes"</span> : <span class="number">150</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02979"</span>)</span>, <span class="string">"A"</span> : <span class="string">"E1"</span>, <span class="string">"B"</span> : <span class="string">"E2"</span>, <span class="string">"likes"</span> : <span class="number">160</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f0297a"</span>)</span>, <span class="string">"A"</span> : <span class="string">"E1"</span>, <span class="string">"B"</span> : <span class="string">"E2"</span>, <span class="string">"likes"</span> : <span class="number">170</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f0297b"</span>)</span>, <span class="string">"A"</span> : <span class="string">"F1"</span>, <span class="string">"B"</span> : <span class="string">"F2"</span>, <span class="string">"likes"</span> : <span class="number">180</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854e97967282a0f0297c"</span>)</span>, <span class="string">"A"</span> : <span class="string">"F1"</span>, <span class="string">"B"</span> : <span class="string">"F2"</span>, <span class="string">"likes"</span> : <span class="number">190</span> &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>开始查询:</strong></p><ul><li>查询并输出A=A1和B=A2的键值<blockquote><p><code>db.SET1.find({&quot;A&quot; : &quot;A1&quot;, &quot;B&quot; : &quot;A2&quot;})</code></p></blockquote></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="module-access"><span class="module"><span class="identifier">SET1</span>.</span></span>find(&#123;<span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02973"</span>)</span>, <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02974"</span>)</span>, <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : <span class="number">110</span> &#125;</span><br></pre></td></tr></table></figure><hr><ul><li>查询并输出集合SET1内likes大于100且小于200的键值，跳过前两条并且只输出四条<blockquote><p><code>db.SET1.find({likes : {$lt :200, $gt : 100}}).limit(4).skip(2)</code></p></blockquote></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="module-access"><span class="module"><span class="identifier">SET1</span>.</span></span>find(&#123;likes : &#123;$lt :<span class="number">200</span>, $gt : <span class="number">100</span>&#125;&#125;).limit(<span class="number">4</span>).skip(<span class="number">2</span>)</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02976"</span>)</span>, <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : <span class="number">130</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02977"</span>)</span>, <span class="string">"A"</span> : <span class="string">"D1"</span>, <span class="string">"B"</span> : <span class="string">"D2"</span>, <span class="string">"likes"</span> : <span class="number">140</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02978"</span>)</span>, <span class="string">"A"</span> : <span class="string">"D1"</span>, <span class="string">"B"</span> : <span class="string">"D2"</span>, <span class="string">"likes"</span> : <span class="number">150</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02979"</span>)</span>, <span class="string">"A"</span> : <span class="string">"E1"</span>, <span class="string">"B"</span> : <span class="string">"E2"</span>, <span class="string">"likes"</span> : <span class="number">160</span> &#125;</span><br></pre></td></tr></table></figure><hr><ul><li>查询并降序输出集合SET1内A等于A1或等于B1或等于D1的数据<blockquote><p><code>db.SET1.find({$or:[{&quot;A&quot;: &quot;A1&quot;},{&quot;A&quot;: &quot;B1&quot;},{&quot;A&quot;: &quot;D1&quot;}]}).sort({&quot;likes&quot;:-1})</code></p></blockquote></li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.<span class="builtin-name">find</span>(&#123;<span class="variable">$or</span>:[&#123;<span class="string">"A"</span>: <span class="string">"A1"</span>&#125;,&#123;<span class="string">"A"</span>: <span class="string">"B1"</span>&#125;,&#123;<span class="string">"A"</span>: <span class="string">"D1"</span>&#125;]&#125;).sort(&#123;<span class="string">"likes"</span>:-1&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5e4a854d97967282a0f02978"</span>), <span class="string">"A"</span> : <span class="string">"D1"</span>, <span class="string">"B"</span> : <span class="string">"D2"</span>, <span class="string">"likes"</span> : 150 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5e4a854d97967282a0f02977"</span>), <span class="string">"A"</span> : <span class="string">"D1"</span>, <span class="string">"B"</span> : <span class="string">"D2"</span>, <span class="string">"likes"</span> : 140 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5e4a854d97967282a0f02976"</span>), <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : 130 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5e4a854d97967282a0f02975"</span>), <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : 120 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5e4a854d97967282a0f02974"</span>), <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : 110 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5e4a854d97967282a0f02973"</span>), <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : 100 &#125;</span><br></pre></td></tr></table></figure><hr><ul><li>查询并输出集合SET1内A等于A1或等于B1，且likes值小于并等于50的值<blockquote><p><code>db.SET1.find({&quot;likes&quot;: {$gt:50}, $or: [{&quot;A&quot; : &quot;A1&quot;},{&quot;A&quot; : &quot;B1&quot;}]})</code></p></blockquote></li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.<span class="builtin-name">find</span>(&#123;<span class="string">"likes"</span>: &#123;<span class="variable">$gt</span>:50&#125;, <span class="variable">$or</span>: [&#123;<span class="string">"A"</span> : <span class="string">"A1"</span>&#125;,&#123;<span class="string">"A"</span> : <span class="string">"B1"</span>&#125;]&#125;)</span><br><span class="line">&#123; `<span class="string">"_id"</span>` : ObjectId(<span class="string">"5e4a854d97967282a0f02973"</span>), <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : 100 &#125;</span><br><span class="line">&#123; `<span class="string">"_id"</span>` : ObjectId(<span class="string">"5e4a854d97967282a0f02974"</span>), <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : 110 &#125;</span><br><span class="line">&#123; `<span class="string">"_id"</span>` : ObjectId(<span class="string">"5e4a854d97967282a0f02975"</span>), <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : 120 &#125;</span><br><span class="line">&#123; `<span class="string">"_id"</span>` : ObjectId(<span class="string">"5e4a854d97967282a0f02976"</span>), <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : 130 &#125;</span><br></pre></td></tr></table></figure><ul><li>执行逻辑(顺序)<blockquote><p>先执行sort(), 然后执行skip()，最后执行limit()<br>相当于<code>like &gt;=50 AND (where A=&#39;A1&#39; OR A=&#39;B1&#39;)</code><br><code>where likes [条件运算符] [条件] AND (key=&gt;value OR key=&gt;value)</code></p></blockquote></li></ul><hr><ul><li>以降序查询并输出集合SET1内文本A的内容<blockquote><p><code>db.SET1.find({},{&quot;A&quot;:1, _id:0}).sort({&quot;likes&quot;:-1})</code></p></blockquote></li></ul><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">&gt; `db.SET1.<span class="built_in">find</span>(&#123;&#125;,&#123;<span class="string">"A"</span>:<span class="number">1</span>, <span class="variable">_id</span>:<span class="number">0</span>&#125;).<span class="built_in">sort</span>(&#123;<span class="string">"likes"</span>:-<span class="number">1</span>&#125;)`</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"F1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"F1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"E1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"E1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"D1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"D1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"B1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"B1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"A1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"A"</span> : <span class="string">"A1"</span> &#125;</span><br></pre></td></tr></table></figure><hr><ul><li>输出SET1内G列内的所有文本数据，输出量为三，偏移量为一<blockquote><p><code>db.SET1.find({&quot;A&quot; : {$type : &#39;string&#39;}}).limit(3).skip(1)</code></p></blockquote></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="module-access"><span class="module"><span class="identifier">SET1</span>.</span></span>find(&#123;<span class="string">"A"</span> : &#123;$<span class="keyword">type</span> : '<span class="built_in">string</span>'&#125;&#125;).limit(<span class="number">3</span>).skip(<span class="number">1</span>)</span><br><span class="line">&#123; `<span class="string">"_id"</span>` : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02974"</span>)</span>, <span class="string">"A"</span> : <span class="string">"A1"</span>, <span class="string">"B"</span> : <span class="string">"A2"</span>, <span class="string">"likes"</span> : <span class="number">110</span> &#125;</span><br><span class="line">&#123; `<span class="string">"_id"</span>` : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02975"</span>)</span>, <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : <span class="number">120</span> &#125;</span><br><span class="line">&#123; `<span class="string">"_id"</span>` : <span class="constructor">ObjectId(<span class="string">"5e4a854d97967282a0f02976"</span>)</span>, <span class="string">"A"</span> : <span class="string">"B1"</span>, <span class="string">"B"</span> : <span class="string">"B2"</span>, <span class="string">"likes"</span> : <span class="number">130</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>string可以用2表示，Array用4</p></blockquote><hr><ul><li>在SET2内基于ID求出的文档A1的数据总和，并进行分组<blockquote><p><code>db.SET1.aggregate([{$group : {</code>_id<code>: &quot;A1&quot;, amount : {$sum : 1}}}])</code></p></blockquote></li></ul><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.aggregate([&#123;<span class="symbol">$group</span> : &#123;<span class="string">`_id`</span> : <span class="string">"A1"</span>, <span class="attr">amount</span> : &#123;<span class="symbol">$sum</span> : <span class="number">1</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">`"_id"`</span> : <span class="string">"A1"</span>, <span class="string">"amount"</span> : <span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>类似于RDBMS中的SQL语句:<code>Sselect A1, count(*) from SET2 group by _id</code></p></blockquote><hr><ul><li>类似概念<blockquote><p>逗号’”,”<code>即为</code>AND<code></code>$or<code>即为</code>OR`</p></blockquote></li></ul><hr><ul><li>操作符<blockquote><p>用于比较两个表达式并从mongoDB集合中获取数据</p></blockquote></li></ul><p><strong>操作符总览</strong></p><table><thead><tr><th align="left">全称</th><th align="left">符号说明</th><th align="left">操作符</th></tr></thead><tbody><tr><td align="left">greater than</td><td align="left">“&gt;”(大于)</td><td align="left">$gt</td></tr><tr><td align="left">less than</td><td align="left">“&lt;”(小于)</td><td align="left">$lt</td></tr><tr><td align="left">gt equal</td><td align="left">“&gt;=”(大于等于)</td><td align="left">$gte</td></tr><tr><td align="left">lt equal</td><td align="left">“&lt;=”(小于等于)</td><td align="left">$lte</td></tr><tr><td align="left">not equal</td><td align="left">“!=”(不等于)</td><td align="left">$ne</td></tr><tr><td align="left">equal</td><td align="left">“=”(等于)</td><td align="left">$eq</td></tr></tbody></table><hr><p><strong>相关概念</strong></p><ul><li><p>条件操作符</p></li><li><p><code>projection</code></p></li><li><p><code>$type</code></p></li><li><p><code>limit</code></p></li><li><p><code>skip</code></p></li><li><p>排序(<code>sort({KEY:1/-1})</code>)</p></li><li><p>聚合(aggregate)</p></li><li><p>复制(副本集)</p></li><li><p>分片(集群)</p></li><li><p>序列(自增)</p></li><li><p>查询语法基本结构</p><blockquote><p><code>db.collection.find((query, projection)</code><br><code>db.collection.find({key1:value1, key2:value2}).pretty()</code></p></blockquote></li></ul><hr><p><strong>MongoDB与RDBMS Where语句比较</strong></p><p><strong>查询语句:</strong></p><table><thead><tr><th align="left">操作</th><th align="left">格式</th><th align="left">范例</th><th align="left">RDBMS中的类似语句</th></tr></thead><tbody><tr><td align="left">等于</td><td align="left">{<key>:<value>}</value></key></td><td align="left">db.col.find({“A”:”xxx”}).pretty()</td><td align="left">where A = ‘xxx’</td></tr><tr><td align="left">小于</td><td align="left">{<key>:{$lt:<value>}}</value></key></td><td align="left">db.col.find({“likes”:{$lt:50}}).pretty()</td><td align="left">where likes &lt; 50</td></tr><tr><td align="left">小于或等于</td><td align="left">{<key>:{$lte:<value>}}</value></key></td><td align="left">db.col.find({“likes”:{$lte:50}}).pretty()</td><td align="left">where likes &lt;= 50</td></tr><tr><td align="left">大于</td><td align="left">{<key>:{$gt:<value>}}</value></key></td><td align="left">db.col.find({“likes”:{$gt:50}}).pretty()</td><td align="left">where likes &gt; 50</td></tr><tr><td align="left">大于或等于</td><td align="left">{<key>:{$gte:<value>}}</value></key></td><td align="left">db.col.find({“likes”:{$gte:50}}).pretty()</td><td align="left">where likes &gt;= 50</td></tr><tr><td align="left">不等于</td><td align="left">{<key>:{$ne:<value>}}</value></key></td><td align="left">db.col.find({“likes”:{$ne:50}}).pretty()</td><td align="left">where likes != 50</td></tr></tbody></table><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-2</title>
    <url>/2020/02/17/MongoDB-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="MongoSQL-2"><a href="#MongoSQL-2" class="headerlink" title="MongoSQL-2"></a>MongoSQL-2</h3><p><strong>创建并连接</strong></p><ul><li>创建并选择数据库<blockquote><p><code>use TEST1</code></p></blockquote></li></ul><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">use</span> TEST1</span><br><span class="line">switched <span class="keyword">to</span> db TEST1</span><br></pre></td></tr></table></figure><ul><li>创建集合<blockquote><p><code>db.createCollection(&quot;SET1&quot;, { capped : true, autoIndexId : true, size : 6142800, max : 10000} )</code></p></blockquote></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.create<span class="constructor">Collection(<span class="string">"SET1"</span>, &#123; <span class="params">capped</span> : <span class="params">true</span>, <span class="params">autoIndexId</span> : <span class="params">true</span>, <span class="params">size</span> : 6142800, <span class="params">max</span> : 10000&#125; )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"note"</span> : <span class="string">"the autoIndexId option is deprecated and will be removed in a future release"</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>向集合内插入两个文档</strong></p><ul><li>定义变量:<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">A1=(&#123;</span><br><span class="line"><span class="symbol">A:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line"><span class="symbol">B:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line"><span class="symbol">C:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line"><span class="symbol">D:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line"><span class="symbol">E:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'4'</span>],</span><br><span class="line"><span class="symbol">likes:</span> <span class="number">100</span>&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>A1=({ A: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;], B: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;], C: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;], D: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;], E: [&#39;1&#39;, &#39;2&#39;, &#39;4&#39;], likes: 100});</code></p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&gt; <span class="symbol">A1</span>=(&#123;</span><br><span class="line">... <span class="symbol">A</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line">... <span class="symbol">B</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line">... <span class="symbol">C</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line">... <span class="symbol">D</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line">... <span class="symbol">E</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'4'</span>],</span><br><span class="line">... likes: <span class="number">100</span>&#125;);</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"A"</span> : [</span><br><span class="line">		<span class="string">"1"</span>,</span><br><span class="line">		<span class="string">"2"</span>,</span><br><span class="line">		<span class="string">"3"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"B"</span> : [</span><br><span class="line">		<span class="string">"1"</span>,</span><br><span class="line">		<span class="string">"2"</span>,</span><br><span class="line">		<span class="string">"3"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"C"</span> : [</span><br><span class="line">		<span class="string">"1"</span>,</span><br><span class="line">		<span class="string">"2"</span>,</span><br><span class="line">		<span class="string">"3"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"D"</span> : [</span><br><span class="line">		<span class="string">"1"</span>,</span><br><span class="line">		<span class="string">"2"</span>,</span><br><span class="line">		<span class="string">"3"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"E"</span> : [</span><br><span class="line">		<span class="string">"1"</span>,</span><br><span class="line">		<span class="string">"2"</span>,</span><br><span class="line">		<span class="string">"4"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"likes"</span> : <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入文档<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(<span class="selector-tag">A1</span>)</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET1</span><span class="selector-class">.insert</span>(<span class="selector-tag">A1</span>)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt; db<span class="selector-class">.SET1</span>.insert(A1)</span><br><span class="line"><span class="function"><span class="title">WriteResult</span><span class="params">(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="selector-class">.SET1</span>.insert(A1)</span><br><span class="line"><span class="function"><span class="title">WriteResult</span><span class="params">(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span></span></span><br></pre></td></tr></table></figure><p><code>db.SET1.find()</code></p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="symbol">SET1</span>.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="symbol">ObjectId</span>(<span class="string">"5e4a614f39d6dc440c77623b"</span>), <span class="string">"A"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"B"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"C"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"D"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"E"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"4"</span> ], <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="symbol">ObjectId</span>(<span class="string">"5e4a615439d6dc440c77623c"</span>), <span class="string">"A"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"B"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"C"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"D"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"E"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"4"</span> ], <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br></pre></td></tr></table></figure><hr><ul><li>更新数据<blockquote><p><code>db.SET1.updateMany({&#39;E&#39;: [&#39;1&#39; , &#39;2&#39;, &#39;4&#39;]}, {$set:{&#39;E&#39;: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]}},{multi:true})</code></p></blockquote></li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET1.updateMany(&#123;<span class="string">'E'</span>: [<span class="string">'1'</span> , <span class="string">'2'</span>, <span class="string">'4'</span>]&#125;, &#123;<span class="string">$set:</span>&#123;<span class="string">'E'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]&#125;&#125;,&#123;<span class="string">multi:</span><span class="literal">true</span>&#125;)</span><br><span class="line">&#123; <span class="string">"acknowledged"</span> : <span class="literal">true</span>, <span class="string">"matchedCount"</span> : <span class="number">2</span>, <span class="string">"modifiedCount"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>查看集合内容<blockquote><p><code>db.SET1.find().pretty()</code></p></blockquote></li></ul><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="symbol">SET1</span>.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="symbol">ObjectId</span>(<span class="string">"5e4a614f39d6dc440c77623b"</span>), <span class="string">"A"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"B"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"C"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"D"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"E"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="symbol">ObjectId</span>(<span class="string">"5e4a615439d6dc440c77623c"</span>), <span class="string">"A"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"B"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"C"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"D"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"E"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>查看数据库<blockquote><p><code>db</code></p></blockquote></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; db</span></span><br><span class="line">TEST1</span><br></pre></td></tr></table></figure><ul><li>查看所有数据库<blockquote><p><code>show dbs</code></p></blockquote></li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">TEST1   0.000GB</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure><hr><p><strong>创建索引</strong></p><ul><li>因为索引不能用于并行数组</li><li>所以这里新建了一个文档并进行字符串插入</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.createCollection</span>("<span class="selector-tag">SET2</span>", &#123; <span class="attribute">capped </span>: true, autoIndexId : true, size : <span class="number">6142800</span>, max : <span class="number">10000</span>&#125; )</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET2</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"A1"</span>, B: <span class="string">"A2"</span>, likes: <span class="number">100</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.SET2</span><span class="selector-class">.insert</span>(&#123; <span class="attribute">A</span>: <span class="string">"A1"</span>, B: <span class="string">"A2"</span>, likes: <span class="number">100</span>&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.create<span class="constructor">Collection(<span class="string">"SET2"</span>, &#123; <span class="params">capped</span> : <span class="params">true</span>, <span class="params">autoIndexId</span> : <span class="params">true</span>, <span class="params">size</span> : 6142800, <span class="params">max</span> : 10000&#125; )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"note"</span> : <span class="string">"the autoIndexId option is deprecated and will be removed in a future release"</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET2.insert(&#123; <span class="string">A:</span> <span class="string">"A1"</span>, <span class="string">B:</span> <span class="string">"A2"</span>, <span class="string">likes:</span> <span class="number">100</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.SET2.insert(&#123; <span class="string">A:</span> <span class="string">"A1"</span>, <span class="string">B:</span> <span class="string">"A2"</span>, <span class="string">likes:</span> <span class="number">100</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li>将文档SET2内的键A和键分别设置为升序索引与降序索引(DRBMS内称之为复合索引)<blockquote><p><code>db.SET2.createIndex({&quot;A&quot;:1,&quot;B&quot;:-1})</code></p></blockquote></li></ul><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&gt; db.SET2.createIndex(&#123;<span class="string">"A"</span>:<span class="number">1</span>,<span class="string">"B"</span>:-<span class="number">1</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"createdCollectionAutomatically"</span> : <span class="type">false</span>,</span><br><span class="line">	<span class="string">"numIndexesBefore"</span> : 1,</span><br><span class="line">	<span class="string">"numIndexesAfter"</span> : 2,</span><br><span class="line">	<span class="string">"ok"</span> : 1</span><br></pre></td></tr></table></figure><hr><ul><li>查看所有索引<blockquote><p><code>db.SET2.getIndexes()</code></p></blockquote></li></ul><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&gt; db.SET2.getIndexes()</span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"v"</span> : 2,</span><br><span class="line">		<span class="string">"key"</span> : &#123;</span><br><span class="line">			<span class="string">"_id"</span> : 1</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"name"</span> : "_<span class="type">id</span>_<span class="string">",</span></span><br><span class="line"><span class="string">		"</span>ns<span class="string">" : "</span>A.SET2<span class="string">"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		"</span>v<span class="string">" : 2,</span></span><br><span class="line"><span class="string">		"</span>key<span class="string">" : &#123;</span></span><br><span class="line"><span class="string">			"</span>A<span class="string">" : 1,</span></span><br><span class="line"><span class="string">			"</span>B<span class="string">" : -1</span></span><br><span class="line"><span class="string">		&#125;,</span></span><br><span class="line"><span class="string">		"</span>name<span class="string">" : "</span>A_1_B_-<span class="number">1</span><span class="string">",</span></span><br><span class="line"><span class="string">		"</span>ns<span class="string">" : "</span>A.SET2<span class="string">"</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><hr><ul><li>删除所有索引<blockquote><p><code>db.SET2.dropIndexes()</code></p></blockquote></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="module-access"><span class="module"><span class="identifier">SET2</span>.</span></span>drop<span class="constructor">Indexes()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"nIndexesWas"</span> : <span class="number">2</span>,</span><br><span class="line">	<span class="string">"msg"</span> : <span class="string">"non-_id indexes dropped for collection"</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><p>删除集合SET1内所有符合条件的文档</p><blockquote><p><code>db.SET1.deleteMany({A: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]})</code><br><code>db.SET1.remove({&#39;A&#39;:[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]})</code></p></blockquote></li><li><p>查看集合内容</p><blockquote><p><code>db.SET1.find().pretty()</code></p></blockquote></li><li><p>删除集合</p><blockquote><p><code>db.SET1.drop()</code></p></blockquote></li></ul><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="module-access"><span class="module"><span class="identifier">SET1</span>.</span></span>drop<span class="literal">()</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>删除所在数据库<blockquote><p><code>db.dropDatabase()</code></p></blockquote></li></ul><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&gt; db.dropDatabase<span class="comment">()</span></span><br><span class="line">&#123; <span class="string">"dropped"</span> : <span class="string">"TEST1"</span>, <span class="string">"ok"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>查看已有数据库列表<blockquote><p><code>show dbs</code></p></blockquote></li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure><hr><p><strong>补充内容:</strong></p><ul><li>文档的数据结构和JOSN基本相同</li><li>所有存储在集合中的数据都是BSON格式</li><li>BSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称</li><li>增删改查中只有查和改有实际用途，而精髓就在于查</li></ul><hr><p><strong>其它概念:</strong></p><ul><li>数组</li><li>变量</li><li>数据库</li><li>集合</li><li>文档</li><li>键</li><li>值</li><li>索引(1/-1)<blockquote><p><code>createIndex()</code> version&gt;3.0.0<br><code>ensureIndex()</code> version&lt;3.0.0</p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-1</title>
    <url>/2020/02/17/MongoDB-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="MongoDB-1"><a href="#MongoDB-1" class="headerlink" title="MongoDB-1"></a>MongoDB-1</h3><p><strong>概述:</strong></p><ul><li>NoSQL</li><li>是一个基于分布式文件存储的数据库</li><li>由C++撰写</li><li>目的是为WEB应用提供可扩展的高性能数据存储解决方案</li><li>虽然是非关系型，但它的功能超越了所有其他的NoSQL，是最接近关系型数据库的NoSQL</li><li>MongoDB 将数据存储为一个文档，数据结构由键值<code>(key=&gt;value)</code>对组成</li><li>MongoDB 文档类似于JSON对象</li><li>字段值可以包含其他文档，数组及文档数组</li><li>2007年10月，MongoDB由10gen团队所开发，发布于2009年2月</li></ul><hr><p><strong>(Key=&gt;Value)简述:</strong></p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="type">name</span>: "serow"	&lt;-field: <span class="keyword">value</span></span><br><span class="line">   <span class="type">time</span>: "2020-01-17"	&lt;-field: <span class="keyword">value</span></span><br><span class="line">   xxx: "xxx"		&lt;-field: <span class="keyword">value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>存储结构示例</strong></p><p><strong>向数据库内UNIT1集合插入两条文档数据</strong></p><p><code>db.UNIT1.insert({[A: &#39;1&#39;, &#39;2&#39;, &#39;3&#39;], [B: &#39;1&#39;, &#39;2&#39;, &#39;3&#39;] likes: 100)});</code></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.UNIT1.insert(&#123;</span><br><span class="line">... <span class="string">A:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line">... <span class="string">B:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>],</span><br><span class="line">... <span class="string">likes:</span> <span class="number">100</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; db.UNIT1.insert(&#123; <span class="string">A:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>], <span class="string">B:</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>], <span class="string">likes:</span> <span class="number">100</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure><hr><p><strong>输出示例(结构示例):</strong></p><p><code>db.UNIT1.find()</code></p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="symbol">UNIT1</span>.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="symbol">ObjectId</span>(<span class="string">"5e4a564937144332c7b7814a"</span>), <span class="string">"A"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"B"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="symbol">ObjectId</span>(<span class="string">"5e4a569837144332c7b7814b"</span>), <span class="string">"A"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"B"</span> : [ <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> ], <span class="string">"likes"</span> : <span class="number">100</span> &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>特点:</strong></p><ol><li>MongoDB是一个面向文档存储的数据库，因此降低了管理与操作的难度</li><li>Mongo支持丰富的查询表达式，而查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组</li><li>允许在MongoDB记录中设置任何属性的索引来实现更快的排序</li><li>允许通过本地或者网络创建数据镜像，以此大幅增加了MongoDB的扩展性</li></ol><hr><ol start="5"><li>MongoDB使用update()命令可以实现替换完成的文档(数据)或者一些指定的数据字段</li><li>MongoDB中的Map/reduce主要是用来对数据进行批量处理和聚合操作</li><li>Map和Reduce:Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理</li><li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作</li><li>MongoDB允许在服务端执行脚本用Javascript编写某个函数，然后直接在服务端执行，函数的定义可以存储在服务端，以方便下次调用</li></ol><hr><ol start="10"><li>MongoDB拥有各种API用以支持各类编程语言:PHP,Lisp,Puby,C++,Scala,Python等</li><li>在负载增加时(需要更多的存储空间和更强的处理能力)，它可以分布在计算机网络中的其他节点上，即为分片</li></ol><hr><p><strong>内置工具</strong></p><ul><li>MongoDB中的内置功能(插件)<blockquote><p>MongoDB提供了网络和系统监控工具Munin，作为插件应用于MongoDB中<br>Gangila是MongoDB高性能的系统监视的工具，还可以可以用于存放大量小文件，作为插件应用于MongoDB中<br>基于图形界面的开源工具之一:Cacti，用于查看CPU负载，网络带宽利用率，同时提供了一个应用于监控MongoDB的插件</p></blockquote></li></ul><hr><p><strong>GUI工具一览</strong></p><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Fang of Mongo</td><td align="left">网页式，由Django和jQuery撰写</td></tr><tr><td align="left">Futon4Mongo</td><td align="left">一个CouchDB Futon web的MongoDB山寨版</td></tr><tr><td align="left">Mongo3</td><td align="left">由Ruby撰写</td></tr><tr><td align="left">Opricot</td><td align="left">一个基于浏览器的MongoDB控制台, 由PHP撰写</td></tr><tr><td align="left">RockMongo</td><td align="left">MongoDB管理工具，轻量级且支持多国语言，由PHP撰写</td></tr><tr><td align="left">MongoHub</td><td align="left">适用于OSX的应用程序</td></tr><tr><td align="left">Database Master</td><td align="left">Windows的mongodb管理工具</td></tr></tbody></table><hr><p><strong>基本概念简述:</strong></p><ul><li>在mongodb中基本的概念:</li><li>数据库</li><li>文档</li><li>集合</li><li>键</li><li>值(域)</li></ul><table><thead><tr><th align="left">MongoDB术语与概念</th><th align="left">SQL术语与通用概念</th><th align="left">解释与说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">database</td><td align="left">数据库</td></tr><tr><td align="left">collection</td><td align="left">table</td><td align="left">集合/数据库表</td></tr><tr><td align="left">document</td><td align="left">row</td><td align="left">文档/数据行</td></tr><tr><td align="left">field</td><td align="left">column</td><td align="left">域/数据字段</td></tr><tr><td align="left">index</td><td align="left">index</td><td align="left">索引</td></tr><tr><td align="left">primary key</td><td align="left">primary key</td><td align="left">主键,MongoDB自动将<code>_id</code>字段设置为主键</td></tr><tr><td align="left">table joins</td><td align="left">—</td><td align="left">MongoDB不支持表连接</td></tr></tbody></table><hr><p><strong>概念解析</strong></p><ol><li>数据库(Database)</li></ol><ul><li>MongoDB的默认数据库为’db’，该数据库被存储于data目录内</li><li>MongoDB的单个实例可以容纳多个独立的数据库，每个实例都有独立的集合与权限</li><li>不同的数据库被放置于data目录内不同的文件中</li></ul><p><strong>基本命令:</strong></p><ul><li>以列表方式输出已存在数据库信息<blockquote><p><code>show dbs</code></p></blockquote></li><li>显示当前数据库对象或集合<blockquote><p><code>db</code></p></blockquote></li><li>连接所选数据库，命名的具体规则不进行过多说明<blockquote><p><code>use database_name</code></p></blockquote></li></ul><p><strong>MongoDB内拥有特定作用的保留数据库，可直接访问</strong></p><p><strong>具体说明:</strong></p><blockquote><p><code>admin</code>:操作权限管理数据库，添加于此数据库的用户会自动继承数据库的所有操作权限，即为root权限<br>一些特定的服务器端命令也只能从这个数据库运行，例如列出所有的数据库或者关闭服务器<br><code>local</code>:此数据库内的数据不可复制，可以用来存储限于本地单台服务器的任意集合<br><code>config</code>:当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息</p></blockquote><ul><li>关于数据库的具体命令本章不做阐述</li></ul><hr><ol start="2"><li><p>文档(Document)</p></li><li><p>文档是一组键值(key-value)对(即BSON)</p></li><li><p>MongoDB的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这是MongoDB完全不同于关系型数据库的一个特点</p></li><li><p>文档中的键/值对是有序的</p></li><li><p>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型(并且允许嵌入整个文档)</p></li><li><p>MongoDB区分类型和大小写</p></li><li><p>MongoDB的文档不能有重复的键</p></li><li><p>文档的键是字符串，除了少数例外情况，键可以使用任意UTF-8字符</p></li></ol><p><strong>文档键命名规范:</strong></p><ol><li>键不能含有\0 (空字符)。这个字符用来表示键的结尾</li><li><code>.</code>和<code>$</code>有特别的意义，只有在特定环境下才能使用</li><li>以下划线<code>&quot;_&quot;</code>开头的键是保留的(不是严格要求的)</li></ol><ul><li>文档示例:<blockquote><p><code>{&quot;set&quot;:&quot;unit&quot;,&quot;serow&quot;:&quot;takin&quot;}</code></p></blockquote></li></ul><p><strong>RDBMS与MongoDB对应的术语:</strong></p><table><thead><tr><th align="left">RDBMS</th><th align="left">MongoDB</th></tr></thead><tbody><tr><td align="left">数据库</td><td align="left">数据库</td></tr><tr><td align="left">表格</td><td align="left">集合</td></tr><tr><td align="left">行</td><td align="left">文档</td></tr><tr><td align="left">列</td><td align="left">字段</td></tr><tr><td align="left">表联合</td><td align="left">嵌入文档</td></tr><tr><td align="left">主键</td><td align="left">主键(MongoDB提供了key为<code>_id</code>)</td></tr></tbody></table><p><strong>数据库和客户端:</strong></p><table><thead><tr><th align="left">数据库</th><th align="left">客户端</th></tr></thead><tbody><tr><td align="left">mongo</td><td align="left">mongod</td></tr><tr><td align="left">Mysqld</td><td align="left">mysql</td></tr><tr><td align="left">Oracle</td><td align="left">sqlplus</td></tr></tbody></table><hr><ol start="3"><li>集合(collections)</li></ol><ul><li><p>集合是MongoDB文档组，类似于RDBMS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>中的表格</p></li><li><p>集合存在于数据库中，集合没有固定的结构</p></li><li><p>所以集合中可以插入不同格式和类型的数据，但通常情况下插入集合中的数据都会有一定的关联性</p></li><li><p>当第一个文档插入时，集合就会被创建</p></li><li><p>集合示例:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"set"</span>:<span class="string">"group"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"unit"</span>:<span class="string">"communism"</span>,<span class="attr">"free"</span>:<span class="string">"rule"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"takin"</span>:<span class="string">"serow"</span>,<span class="attr">"elk"</span>:<span class="string">"crocodile"</span>,<span class="attr">"elephant"</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>集合的命名规则:</strong></p><ul><li><p>集合名不能是空字符串<code>&quot;&quot;</code></p></li><li><p>集合名不能含有\0字符(空字符)，此字符表示集合名的结尾</p></li><li><p>集合名不能以”system.”开头，这是为系统集合保留的前缀</p></li><li><p>集合名字不能含有保留字符</p><blockquote><p>但某些驱动程序可以支持在集合名内包含保留字符，因为某些系统生成的集合中包含该字符<br>除非要访问这种系统创建的集合，否则不可以在名字里出现<code>$</code></p></blockquote></li><li><p>命名实例:</p><blockquote><p><code>db.col.fineOne()</code></p></blockquote></li></ul><hr><ol start="4"><li>封装集合(Capped collections)</li></ol><ul><li>Capped collections就是固定大小的collection</li><li>有很高的性能以及队列过期的特性(过期按照插入的顺序)，有点类似于<code>RRD</code>的概念</li><li>Capped collections是高性能自动的维护对象的插入顺序<blockquote><p>适合类似记录日志的功能<br>与标准的collection不同，其需要显式的创建一个capped collection，指定一个collection的大小(单位是字节)<br>collection 的数据存储空间值提前分配的</p></blockquote></li><li>Capped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的<blockquote><p>所以更新Capped collections中文档的时候，更新后的文档不可以超过之前文档的大小，以确保所有文档在磁盘上的位置一直保持不变</p></blockquote></li><li>Capped collection是按照文档的插入顺序而不是使用索引确定插入位置，此种方法可以提高增添数据的效率<blockquote><p>MongoDB的操作日志文件<code>oplog.rs</code>就是利用Capped Collection来实现的</p></blockquote></li><li>指定的存储大小包含了数据库的头信息，这一点需要特别注意</li></ul><hr><ul><li>在Capped Collection中可以能添加新的对象</li><li>可以进行更新，并且对象不会增加存储空间，如果增加，更新就会失败</li><li>使用Capped Collection不能删除一个文档，可以使用drop()方法删除collection所有的行</li><li>删除之后必须显式的重新创建此collection</li><li>在32bit机器中，capped collection最大存储为<code>1e9( 1X10^9)</code>个字节</li></ul><hr><ul><li>Capped Collections示例:<blockquote><p><code>db.createCollection(&quot;mycoll&quot;, {capped:true, size:100000})</code></p></blockquote></li></ul><hr><ol start="5"><li>元数据</li></ol><ul><li>数据库的信息存储在集合中，它们使用了系统的命名空间:<blockquote><p><code>dbname.system.*</code></p></blockquote></li><li>在MongoDB数据库中名字空间<code>&lt;dbname&gt;.system.*</code>是包含多种系统信息的特殊集合(Collection)</li></ul><p><strong>集合命名空间说明:</strong></p><table><thead><tr><th align="left">集合命名空间</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">dbname.system.namespaces</td><td align="left">列出所有名字空间</td></tr><tr><td align="left">dbname.system.indexes</td><td align="left">列出所有索引</td></tr><tr><td align="left">dbname.system.profile</td><td align="left">包含数据库概要(profile)信息</td></tr><tr><td align="left">dbname.system.users</td><td align="left">列出所有可访问数据库的用户</td></tr><tr><td align="left">dbname.local.sources</td><td align="left">包含复制对端(slave)的服务器信息和状态</td></tr></tbody></table><p><strong>对于修改系统集合中的对象有的规则:</strong></p><ol><li>在<code>&quot;[{system.indexes]}&quot;</code>插入数据，可以创建索引<blockquote><p>但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)</p></blockquote></li><li><code>&quot;[{system.users}]&quot;</code>是可修改的</li><li><code>&quot;[{system.profile}]&quot;</code>是可删除的</li></ol><hr><p><strong>其它概念:</strong><br>MongoDB 数据类型<br>ObjectId<br>字符串(BSON字符串都是UTF-8编码)<br>时间戳<br>日期(<code>DATE/DATE()</code>)</p><hr><p><strong>参考资料:</strong></p><p>官方网站<a href="https://www.mongodb.com/" target="_blank" rel="noopener">跳转</a><br><code>https://www.mongodb.com/</code></p><p>官方文档EN<a href="https://docs.mongodb.com/manual/" target="_blank" rel="noopener">跳转</a><br><code>https://docs.mongodb.com/manual/</code></p><p>下载地址<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">跳转</a><br><code>https://www.mongodb.com/download-center/community</code></p><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">(关系数据库管理系统：Relational Database Management System，RDBMS)</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-3</title>
    <url>/2020/02/16/Redis-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Redis-简易参考"><a href="#Redis-简易参考" class="headerlink" title="Redis-简易参考"></a>Redis-简易参考</h3><p><strong>便捷参考</strong></p><ul><li>基本语法:<blockquote><p><code>redis 127.0.0.1:6379&gt; COMMAND KEY_NAME VALUE</code></p></blockquote></li><li>参数说明:<blockquote><p><code>COMMAND为命令(映射于数据类型)</code><br><code>KEY_NAME为键</code><br><code>VALUE 为值</code></p></blockquote></li></ul><hr><p><strong>相关命令简述(不进行详细说明)</strong></p><ul><li>String/Hash/List/Set/Sorted set不进行说明</li><li>Redis 在 2.8.9 版本添加了 HyperLogLog 结构</li><li>Redis HyperLogLog 是用来做基数统计的算法</li></ul><table><thead><tr><th align="left">相关说明</th><th align="left">相关参数</th></tr></thead><tbody><tr><td align="left">HyperLogLog用于实现基数统计算法</td><td align="left">PFADD\PFCOUNT\PFMERGE</td></tr><tr><td align="left">订阅</td><td align="left">SUBSCRIBE\PUBLISH</td></tr><tr><td align="left">事务</td><td align="left">MULTI\EXEC\DISCARD</td></tr><tr><td align="left">脚本</td><td align="left">EVAL</td></tr><tr><td align="left">连接</td><td align="left">PING\QUIT\SELECT index</td></tr><tr><td align="left">服务</td><td align="left">INFO</td></tr><tr><td align="left">备份</td><td align="left">Bgsave\SAVE</td></tr><tr><td align="left">恢复</td><td align="left">SAVE</td></tr><tr><td align="left">安全</td><td align="left">CONFIG\AUTH</td></tr><tr><td align="left">性能测试</td><td align="left">redis-benchmark [option] [option value]</td></tr><tr><td align="left">连接客户端</td><td align="left">redis-server –maxclients [最大连接数]</td></tr></tbody></table><hr><p><strong>相关概念</strong></p><ul><li>订阅</li><li>事务</li><li>脚本</li><li>连接</li><li>服务器</li><li>数据备份</li><li>数据恢复</li><li>安全</li><li>管道技术</li><li>分区</li><li>测试(性能)</li><li>Log</li></ul><hr><ul><li><p>参考资料:<a href="https://redis.io/commands" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://redis.io/commands</code></p></blockquote></li><li><p>在线测试<a href="http://try.redis.io/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://try.redis.io/</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔-2020-02-16</title>
    <url>/2020/02/16/%E9%9A%8F%E7%AC%94-2020-02-16/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="47752b2a6d58f7ce3d748d9bbc83bd8b68377ba6cd9d4ae49df3b5e9a07af598">0267ec72f19b8c198697a4f72870a3a82638093160e2b2cc12e4971a299433a85dd13c409b2aae5651484d0d3c6e8e0902b987088f15325ec7c717d0d75de1e789749f671156adfab38a5f8b1a3636b66e3f0b05fcb757ccab602bd4c4f77f91540534b22412ef290748da9dbab5359b46bad7e8a2b78bcb7aab527b365f9ad5f7a483dcf74b096e966d32802e6f9f5641181d20ff6bf7a9b7197435e44c75b465ff45451e1969db7033ccbb8fa6957a9415151abe831874c135ec3500a7ff338e465a3cb200ba862f502cb1c6860ba9b78189cc4c69256308668f54c95dc57d5094b3df690595b512d67a16adc87633c67a30ad955607da62254b105a2b13181a74b9058354593faa37bf15a4cc0b5893ad099fc3eacf5504d2003a620b503b3e01071ecde9d9faea20a52eff2c17f3308d487719c76f24017fab3d8310ae71dc4d162ed74a4fcc1f48403ae4e94fd1605fd00e155fe56d572b4f6ae7326f60572eb5776e676a6a7c282b81c62ea071b2f941d4c2c818fd1d464705c550ffe3505a92fb17d7f81288b8b3c07cc4b63493196e91f3d4747c64775d584033cd564563a4c765b495a44f15389c9c3fea3c6764a74f6a207b43d466f2321960086048dd0940787340e695c90016e2acf9c596179fba030991e9d2d6dff73053465238270be47906be25de970171f5b9189c76843c9bd3ceb51ca6276101e36121831be1ae2c9f05f795a99395bc7b3c0810dc57c016c60105b2c08944f0f683c063e8696abbaa7fb438ebe85e6aea448461453bd0de0774e6797dd9a6e469c90ed9c8218304f0dea0c280a433412bea44ff70ec0cc3f10a2333561ee8b79e28aef2b86c152d6fa546be4ad8846110d317e407585fd670e91d3b6d4bc0b9db90cd1126d5fce4aafc7f616f622ada8c5d5e736935b56889fa5ceb79be01c02bd468e03518678e1feb64d509f282d13046613544e9aad3dc6bf2b9986b7e02ce72d0cc</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔 2020-02-16</title>
    <url>/2020/02/16/%E9%9A%8F%E7%AC%94-2020-2-2-16/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d39baaf4eb55be9a10a9160737285a6487dc728161eea7075257abbf5cbfe8a9">0267ec72f19b8c198697a4f72870a3a82638093160e2b2cc12e4971a299433a85dd13c409b2aae5651484d0d3c6e8e0902b987088f15325ec7c717d0d75de1e753b256c489b737698fca0b9d5a77e79300056f280e894453c41719cb9334b464d302c288e01ca76c464ca3e10ddf1175cae96c3fa661dbb6cba5640afcc3ff2c65b8984a23062f6f42fd34197e85994e4f1a9d63b42580fcb437a3e51f1638112f62a0e6d565191ba5941c93f397951d48be6d334dfd44ae352b54f1c843ee3b3f609adc6e4697e122d552bc4d49226e03f7878bfd379efa1645dcdb65e078cfa17c78f950018c0275d0a5e641760100cacf2392617459da57e53a96554ef9ebe1a4c45b186709234144252d28c993808d01e2f52efba0d0e7a715626736a58cd294a9e6e53480a219d29fee3d8dc68a4aeed51b7c22692ab9e0f84adb8ad886e004b8d79896171d30352209d3e2a6eea09d75ed75d0f7b0eaa32822737c01746c7441d00784a704f9c807c056feb8af2f29c76f40073dad0b505c4c2b134c4a9461c534463ce30ebeb366f19edeeed3a07f26617e03fd39f0fecf46a116d8e7d416f5da4c7bfb67600dd45f99cea2a900586a9d7a78dc5145979dbeb8ff163c3d4a727cebf5685d60c9ea0d83f2e0a359ac391ff1aa1a71b47950eed69bb7511105370f8c58f4a3c13671ad424015eee2f39064f56249d587f429c7a23675580cd8034cb814a77721432aa66163b60702cc2d870ddcfc3808f8b84870a1ea5c666c60d625d901bfe00a9a210ca9e0f4cb45ebfff71358e0dcbab4aa3d4f3cba13777359460611abf1686155a212c0f74ad0361d31b8dc4cf301b87dfa3020f15e0a62524d4163b32f81229ee7b22566bc57abdbf7b021a1d8f38be542c20e44a6f787f63d2a27336c2cdecd1919fe156f4a157aaab59141b72403ee7325c4ca5bd3ae65d946bfbc3bd68f72e10aaa3d6a3ee4b48578d8ab1ab777ce0bde0976f9065cfb0e5ecb49466cd7b842071bb121ac00753dc4d4c7c10c2cf79e3e7886ec16daee4d660dc0274cfe67377cd0973c1b84c8c8a8a8015b9464676ff2b0496bfa38e10bae4623aa775187193539914e54c23e697d691246a6737da679444868430b089af59b4857e0be023dccbd2b26e6a19d13290ed383e5b24036bd298626a5fd542c98d32eef3bac0c982a2dbf44606c28aabdea9ba12ca763d735a2e1704e54a0fdd798d00ef59ac05544279a2f9f276adc8cde039e27d679d92d55a6125a85fce0446f64eb88370fb5a32e565ed405614cc225451556f7769eabf25e23f1cd99375f77ac4447c78f1b6b27759480c49ad762b528e6f85d48d15237a6c7e62874aa7f32db7b1326c4a28ee6c27809c42d26c0a0083f8e01432a113d630d967b2986dd92a5fc292f1e673ecc18b3c5a279635159e19f091589b3a96420b55154e0afe653a230ed46e1b2e4f7d6b1872a2af28d2ade6b425a5001a03d98494974672e628874fd9e29748e91716e449794510b850ca3e108ea215b3428b374b7c995a8ecfb9f6395ab7437f24b6e4ddae4a7bb1384ea2ffc3c66b54b3c40f33c0e5d71cd5e293da3deca401c3b88dcb365271c11b05e971794926f035f7a7951c9c2e7eecb1589799e0d99add11e5b9fd7de085fcec1b96efe53f945b1dc5d4a23b164b742bee9f5c19be10f0109912bc29fb7e8ddfaa85e366657c9fa29a2515e0dd07cea35ec0b908931db5a90c27b1d6143cc1dc49e6aaded7f80995ef6b9331cf6086c14f728e2ac7545efd8725d5ee5cce87c6cc0d1ba19c85e48aaa4fb4d752c8004c81ca7e8479e54a1452cdca0ea9d9173868ff6c7bad34f5bb83a669e818a1168e6dcf353e920a98e2e4b705909803183916ad3bb6a88f5f6981046623f66714587e87600ab99809d216ceba58a551b55445c3d04288c202d9818ba20f490339cbe440d4c1d04835205869256894f19cbdf49f404adaca981eda49126e47256c9dba2de4e4ea6853fda656172cfd3bec1d843d212dd1c732bc6543a2e064b6fd9ff7fa405f7398f60a804a6c1a27f3377e462150060983c01e108613fd15b7119831c3b2a32e213b59ef621c3b3da2cd29fb10bf90ae05f818cfcd95c6f74db42c54dc5901933a45320d2f23d8faedab4610563e46f0686c613960066ba629a37e6d454c16b58b874fc5a3501cbae65488cdd811f249fe69f56d65e5887c1856a3532935293bc08f93b6ee6310ee48dab9e3c7f445d98d8b12abb7afa31ef900f893fae0a1d9ee726ec6d28498aac62f1eeade3f6cb32a58357ea16bc30a3ef2a175d467100faa27ed30511099fc2110c9b831cf42354c095cb55ab5eb5e3cc913ca2d6b6e705957c148832c28901d6e995eff979565bc298f6af93e017ee0f6098e2c485d9040dc4acb635b794c1b2edd9d96af5c0bd0ea03dee40d8b238770c5323dd9ac894a22472a99aadf7080ee2956a2755887604151d3fc4c88d98b71dc3d6cbcd37aacfebd2863a9a90c1e68efcc273eca46deafa82e630018bc6e9603999323d5dbf9602ec69aa71621cf788e7fc18b48ae34ed6286a9f965c76274920a3aa9ea703737ed5afdd71604e26d172d54c521134c0d35af86c1fab3afd8da92b8f09b186dd2b1dbc6824c45e834b1b76829a7ce827933f985207159afe78bc74f65bc8c2706e7eb0fd495d248bb356f48b6c2e75feff91892c716a0ed10ff65428bff57ee14865fc4471ffa70fa9c54d7975ec6c01715a928b5438b527673d5422497af8ed7db00b65b4feb750f965998718bc146b63ca8f48bd607991625e239bd4685ca4af24d9c3f7d3aeb5d4ebb083f70ea2be90e288490503feb0cb89ef4d3a8b519f44cd28c32f9bf6bf89d05060e27b293e1444ee61574febeba151f106554644c4de41c3b672e109ef787f3a21e7e317f8ddbb497a71f51e4feb7e538b3b0ce2827c24d130fbed1b441093ea5a44f45956e19cb94b7d133e10061bb01812dc5d69b6ef8c8da45fb871999bfd88c0b6c088d480e9f468c0d04575879a8dfe47b0cfcdae5eb6dcfab4156c637b89b871d3fd5da1675efa2bfb64c502ae5a6e23c2a6f1b921bb33d61d075a1879613b21607d1b23280ca268df3698857f5983c62bc91c9ca43c6aafcf1a81d1a660413be9b041c8a692e9cba2a7899fb955c8276237fa1ecfdb270cbafdf8234fbcf9e936ee9059a792c9b3c93777eb4f225b35e8a6953747c4e8bc36dfb89f05b07fc38bfe3e2f225289dd99d76a984ccc7b1bb45b346a5e56fb9e4de03881d64cf129a9d9a9bf67a19758cc211daf17a566e7cbda85e2ec1b85348f3d84fd5aaa22ae536e1bbc55c6ca172f2395385063835c8d22693e3bc4b34721c3c6a838302f36195bbdfe8a3e80ce515cc4664fa8efeae939ef562dbe1f40ee42dd294a7ece9cc27011873ee50959621152921726aaa7593378886c192227b35ba796d5f9af182b363ef9282c17a45aae69cc550ed6b5d57ecd1e2c8be5d8c8274cc9fc06912e2b3ff0debb1347607d4cb63e95954dbf15d79c00c6f48fc37da92f19bbfcfe5e9a4dc86020e2f3fb3d7c27e3d6fc969fc2b4a7988e93ba82880ddf71a68a963be2324f27a3443a9f97ab22d86d226928c4e9f16348c56332edb747c1e07295b7b1fc3dbc5790a5fc35f74383c396517288fb0c9b278d401b7fb0b148167dac5275f5a435ee7ff9a0c345a501c81ee5e66909e75af66bfbb204f07e990ffef4220bd7242363eb2256d5aed173121e1072d5ea6e2e1d19be19ca417b528e6f23a5e0c989fd81260d411367c991450ef91253a46f8734c1ef5a7014e35e7751738cbd4606bd11a85156adedd2581ee9c56174ab42c792c35c401c0ab7dad42df58a03e18a1e1735828ac2fca1f2084de1c419218b1bd76e85867cc6391891622700a2d8471e9e212e642741c7c56e1dd8c8c9fa334070dfb7a8cc559c33c06b9a164730562f3ed4a6b6a70848b18528958b3005f716d691cc3d54e1231dc368968a5d5c357baac47f88c65449e57c7297265d30d25d92ab178a3baae338da329c49d3b00806e0f2ffe8566709ab5976b5df1cc7271fbdfc5b66fad3f6184ac1a23f169376f6cecbff58ee52f4f8793d6da5473b9d8c05001fb0f9afe8ff54f3b884c4fea98e1085a2c1a89bae34bee5726c637fa4ab717203818bf5b8189282a795af21022b49843db74da2c45b4e1b339cd549eb4bce838b79db7bce7a6e0382b318e0d13f9ec80abcc44fe728c7e1e5d0cbf5288d692884736099f4628c344b19444d60219de84d8857e7cb73332734ddc77b15fd0ab26f0bc33e69c75e16a4c1eb3ee3b03a3df80a971ece0baf11c7a526bb43b1146ee881d025883a1495a1f71a504338250a58eb7d2b8ec70a6a4d0f8be21aff2da4183d0cfa48cb4c420f2b85116bcd4a633eacd9c4fead40dbb53f12ec1168f56a7f7ec1e0d15de03bf27e64ca18fcd9d88b65d6b101f6b7cd82d31f2b9a5712fa0fa571c2ba5f4ee4f645c749f952e4fc87b288f6c5311ac3624fe367b4323fd07a8da9a786895f839da71c50b80418763ad0dac472211620e5b9bb9b467a57e383405356da32ae5e78070ec60a4b9bc86b4fc2c432bf2a721308f1f2d50bf1192387621df2580e7e671d6dcb15fb370292548e77fc1d7afb94387a3f1307a1bfa9cc9b92882a32076bdee581389b08df9104a8b28ec5a15932e6bb4d0df94087f5fcb8874f9f75c632077c494975b0eb07aeba1081c113b0a8c202a20390b9e2504567588ddc2193fe595138c0dbb47d96d8fc11f2bb2870e82b777a3b44a8bc92786b4c410c0b7471989593739b5e3722be8dc8f2b437ed73e7f774f01de652bae7094f03a5a3d05bdcf78cfe829e4a0b3e889b7b0ee74be91aec3109b589e31b02a859df279d3cb45236803b89a2979516c0c64a78f271cf8d5edffd5c9f377c5f5805179b8060659163fc12aea9786719d093eaffb9f9fbc50d7380733184210636ad59d4d64e704469a5ae21a0729e807fd465fcb3d2dc42d2d9a8cc923f5a366fbdf3f62ac88e95b7e49782b350a2a20558e095783b078b11e5e0fe821f6687a1720fcb514d3ff8d2e62ada6c9b6f31ea7a767e291eb77dc41d9480deda4a7b31a9da92380cbbc93742d9582ac6fcc7320ef23110ae1e8b3334ffe5f854d875cc427cf388abe70475107b830941ebafac20621cfc27d00e03ed5bec7e1fd3e02c5be6087a58ad8fe0e519ab842603394655a8af13c117ea7b304866bcac37d8ac0f0971bf6192f4228701e5ba63f10acc077cd69f6c875c20d2abfac3b1de7f33dd7c025b538abd61a60d780161f02e8e087ac94012df2da939861814611829392aa5e643d512c6c86b4fd24a27e433ccf70b3fa3d75db01f36c011ff757d99b5d9e451861871ddfa3ae99cac73373ef4e5741a1fdcc2e3576f7df4d02f0dec7301a99570a768a47818c1839a2fd913ad28370c1327cddb5ddd9c3e1d8fcc01401f7f5435e593f624d6a11f60be0ec120e73d19a7250d5636ba4a99a5b0b12cfe04c69d389a48d889659d66274c75dcd0f0760dea5520b55d3e9274c93aab7627a128439a60a3150b7d4538261fa617d8c4b8ea26c3fe6cb267f02692e9c7ea8ecb947c755b83da2f6c8aedfd5b0ba4aa63e7c68c5072545b5ff610370a2ea6e17a462e7144712678c087a4024c61cacc3752aeda1e86a8b5d666c08b286e58caccad6458d1148f08697b893d81530c8f59bb3ecaf740929f1e2a32e2c272684fe730248ee4aad0ddd70eb0d525218a2ff3cea8d9acc70b88bc5b09d82fe0bd3c29e7ac71eef53da78293a7</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-2</title>
    <url>/2020/02/16/Redis-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="Redis-2"><a href="#Redis-2" class="headerlink" title="Redis-2"></a>Redis-2</h2><ul><li>配置与数据类型简述</li></ul><hr><h3 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h3><ul><li>启动Redis<blockquote><p><code>$ redis-server</code></p></blockquote></li><li>打开终端(查看redis是否启动)<blockquote><p><code>$ redis-cli</code><br><code>redis 127.0.0.1:6379&gt;</code><br>本机IP:<code>127.0.0.1</code>，redis服务端口:<code>6379</code></p></blockquote></li></ul><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">root@debian:~# redis-cli</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt;</span><br></pre></td></tr></table></figure><hr><ul><li><p>配置文件</p><blockquote><p><code>/安装目录/redis.conf</code></p></blockquote></li><li><p>CONFIG命令用于查看或设置配置项</p></li><li><p>命令格式</p><blockquote><p><code>redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</code><br><code>*</code> 用于匹配所有配置项<br><code>redis 127.0.0.1:6379&gt; CONFIG GET *</code></p></blockquote></li><li><p>可以通过修改redis.conf文件或使用 CONFIG set 命令来修改配置</p></li><li><p>CONFIG SET 命令</p></li><li><p>基本语法：</p><blockquote><p><code>redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</code></p></blockquote></li><li><p>对于GONFIG的参数与redis.conf的配置项在本篇内不进行过多阐述</p></li></ul><hr><h3 id="数据类型简述"><a href="#数据类型简述" class="headerlink" title="数据类型简述"></a>数据类型简述</h3><ul><li>Redis支持五种数据类型:</li><li>String(字符串)</li><li>Hash(哈希)</li><li>List(列表)</li><li>Set(集合)</li><li>Zset(sorted set:有序集合)</li></ul><hr><ul><li>本篇中的应用实例简述只列举出最基本的用法，其他命令不会多做阐述</li><li>在命令提示符内输入命令时Redis会给出对应的相关提示</li><li>删除:<code>DEL KEY_name</code></li></ul><hr><ol><li>String(字符串)</li></ol><ul><li><p>String是redis最基本的类型，方式是一个<code>Key</code>对应一个<code>Value</code></p></li><li><p>String类型是二进制安全的，即Redis的String可以包含任何数据，包括序列化的对象与任何形式的图片</p></li><li><p>String类型的值最大能存储512MB</p></li><li><p>相关命令:<code>SET</code>与<code>GET</code></p></li><li><p>应用实例:</p></li><li><p>使用Redis中的<code>SET</code>与<code>GET</code>命令，<code>Key</code>为<code>UNIT</code>，<code>Value</code>为<code>serow</code></p><blockquote><p><code>SET UNIT &quot;serow&quot;</code><br><code>GET UNIT</code></p></blockquote></li><li><p>输出:</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; SET UNIT <span class="string">"serow"</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; GET UNIT</span><br><span class="line"><span class="string">"serow"</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><blockquote><p><code>DEL UNIT</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><ol start="2"><li>Hash(哈希)</li></ol><ul><li><p>Redis hash是一个键值(key=&gt;value)对集合</p></li><li><p>Redis hash是一个String类型的<code>field</code>和<code>value</code>的映射表</p></li><li><p>Hash适合用于存储对象</p></li><li><p>每个hash可以存储<code>2^32-1</code>键值对(40多亿)</p></li><li><p>相关命令:<code>HMSET</code>与<code>HGET</code></p></li><li><p>应用实例:</p></li><li><p>使用Redis中的<code>HMSET</code>与<code>HGET</code>命令，<code>HMSET</code>设置了两个<code>field=&gt;value</code>对，<code>HGET</code>获取对应<code>field</code>对应的<code>value</code></p><blockquote><p><code>HMSET UNIT field1 &quot;serow&quot; field2 &quot;takin&quot;</code><br><code>HGET UNIT field1</code><br><code>HGET UNIT field2</code></p></blockquote></li><li><p>输出:</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; HMSET UNIT field1 <span class="string">"serow"</span> field2 <span class="string">"takin"</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; HGET UNIT field1</span><br><span class="line"><span class="string">"serow"</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; HGET UNIT field2</span><br><span class="line"><span class="string">"takin"</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><blockquote><p><code>DEL UNIT</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><ol start="3"><li>List(列表)</li></ol><ul><li><p>Redis 列表是简单的字符串列表，按照插入顺序排序</p></li><li><p>可以添加一个元素到列表的头部(左侧)或者尾部(右侧)</p></li><li><p>列表最多可存储<code>2^32-1</code>元素 (4294967295, 每个列表可存储40多亿)</p></li><li><p>相关命令:<code>LPUSH</code>与<code>LRANGE</code></p></li><li><p>应用实例:</p></li><li><p>使用Redis中的<code>LPUSH</code>与<code>LRANGE</code>命令</p><blockquote><p><code>LPUSH UNIT redis</code><br><code>LPUSH UNIT serow</code><br><code>LPUSH UNIT takin</code><br><code>LRANGE UNIT 0 10</code></p></blockquote></li><li><p>输出:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH UNIT redis</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH UNIT serow</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH UNIT takin</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE UNIT <span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"takin"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"serow"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"redis"</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><blockquote><p><code>DEL UNIT</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><p>还可以写为</p><blockquote><p><code>LPUSH A A B C D E F G</code><br><code>LRANGE A 0 10</code></p></blockquote></li><li><p>输出:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH A A B C D E F G</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE A <span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"G"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"F"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"E"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"D"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"C"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"B"</span></span><br><span class="line"><span class="number">7</span>) <span class="string">"A"</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><blockquote><p><code>DEL A</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL A</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL A</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><ol start="4"><li>SET(集合)</li></ol><ul><li><p>Redis的Set是String类型的无序集合</p></li><li><p>集合是通过哈希表实现的，即添加，删除，查找的复杂度都是O(1)</p></li><li><p>集合中最大的成员数为<code>2^32-1</code>(4294967295, 每个集合可存储40多亿个成员)</p></li><li><p>相关命令:<code>SADD</code>与<code>SMEMBERS</code></p></li><li><p>应用实例:</p></li><li><p>使用Redis中的<code>SADD</code>与<code>SMEMBERS</code>命令</p><blockquote><p><code>SADD UNIT redis</code><br><code>SADD UNIT serow</code><br><code>SADD UNIT takin</code><br><code>SADD UNIT takin</code><br><code>SMEMBERS UNIT</code></p></blockquote></li><li><p>输出:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD UNIT redis</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD UNIT serow</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD UNIT takin</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD UNIT takin</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS UNIT</span><br><span class="line"><span class="number">1</span>) <span class="string">"redis"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"takin"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"serow"</span></span><br></pre></td></tr></table></figure></li><li><p>实例中takin添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略</p></li><li><p>删除</p><blockquote><p><code>DEL UNIT</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><ol start="5"><li>ZSET(sorted set：有序集合)</li></ol><ul><li><p>Redis zset和Set一样也是String类型元素的集合,且不允许重复的成员</p></li><li><p>不同的是每个元素都会关联一个<code>double类型</code>的分数</p></li><li><p>Redis正是通过分数来为集合中的成员进行从小到大的排序</p></li><li><p>Zset的成员是唯一的,但分数(score)却可以重复</p></li><li><p>相关命令:<code>ZADD</code>与<code>ZRANGEBYSCORE</code></p></li><li><p>基本语法:</p></li><li><p>添加元素到集合，元素在集合中存在则更新对应<code>score</code></p><blockquote><p><code>zadd key score member</code></p></blockquote></li><li><p>应用实例:</p></li><li><p>使用Redis中的ZADD与ZRANGEBYSCORE命令</p><blockquote><p><code>ZADD UNIT 0 redis</code><br><code>ZADD UNIT 0 serow</code><br><code>ZADD UNIT 0 takin</code><br><code>ZADD UNIT 0 takin</code><br><code>ZRANGEBYSCORE UNIT 0 1000</code></p></blockquote></li><li><p>输出:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD UNIT <span class="number">0</span> redis</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD UNIT <span class="number">0</span> serow</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD UNIT <span class="number">0</span> takin</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD UNIT <span class="number">0</span> takin</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGEBYSCORE UNIT <span class="number">0</span> <span class="number">1000</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"redis"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"serow"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"takin"</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><blockquote><p><code>DEL UNIT</code></p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL UNIT</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p><strong>各个数据类型应用场景:</strong></p><table><thead><tr><th align="left">类型</th><th align="left">简介</th><th align="left">特性</th><th align="left">场景</th></tr></thead><tbody><tr><td align="left">String(字符串)</td><td align="left">二进制安全</td><td align="left">可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td><td align="left">—</td></tr><tr><td align="left">Hash(字典)</td><td align="left">键值对集合,即编程语言中的Map类型</td><td align="left">适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td align="left">存储,读取,修改用户属性</td></tr><tr><td align="left">List(列表)</td><td align="left">链表(双向链表)</td><td align="left">增删快,提供了操作某一段元素的API</td><td align="left">1. 最新消息排行等功能(比如朋友圈的时间线) 2.消息队列</td></tr><tr><td align="left">Set(集合)</td><td align="left">哈希表实现,元素不重复</td><td align="left">1. 添加、删除,查找的复杂度都是O(1) 2. 为集合提供了求交集、并集、差集等操作</td><td align="left">1.共同好友 2. 利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td align="left">Sorted Set(有序集合)</td><td align="left">将Set中的元素增加一个权重参数score,元素按score有序排列</td><td align="left">数据插入集合时,已经进行天然排序</td><td align="left">1. 排行榜 2. 带权重的消息队列</td></tr></tbody></table><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-1</title>
    <url>/2020/02/16/Redis-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="REmote-DIctionary-Server-Redis"><a href="#REmote-DIctionary-Server-Redis" class="headerlink" title="REmote DIctionary Server(Redis)"></a>REmote DIctionary Server(Redis)</h3><p><strong>概述:</strong></p><ul><li>是一种Key-Value数据库</li><li>还可称为key-value存储系统，即数据结构服务器</li><li>由ANSI C语言编写</li><li>是基于BSD协议的<code>Free software</code></li><li>支持多种语言的API</li><li>支持网络</li><li>可基于内存亦可持久化的日志型</li></ul><hr><ul><li>Redis具有极为先进的数据管理方式与处理算法</li><li>Redis与其它<code>key-value</code>缓存产品相比的特有性质:<blockquote><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用<br>Redis不仅仅支持简单的<code>key-value</code>类型的数据，同时还提供<code>list</code>,<code>set</code>,<code>zset</code>,<code>hash</code>等数据结构的存储<br>Redis支持数据的备份，即<code>master-slave</code>模式的数据备份<br>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径<br>Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象<br>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存<br>在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情<br>同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问</p></blockquote></li></ul><hr><ul><li>Redis特点<blockquote><p>性能特点: Redis能读的速度是<code>110000次/s</code>，写的速度是<code>81000次/s</code><br>数据类型特点: Redis支持二进制案例的<code>Strings</code>,<code>Lists</code>,<code>Hashes</code>,<code>Sets</code>及<code>Ordered Sets</code>数据类型操作</p></blockquote></li><li>原子性质:<blockquote><p>Redis的所有操作都是原子性的(只有成功且完全执行与失败且完全不执行)，单个操作是原子性的<br>多个操作也支持事务，即原子性，通过<code>MULTI</code>和<code>EXEC</code>指令对其进行封装</p></blockquote></li></ul><hr><ul><li><p>原子性操作:</p><blockquote><p>将任何一套完整数据处理操作定义为一个事务<br>该事务要么完全执行，要么完全不执行，不会出现执行到一半因为错误而中止<br>以此绝对的保证了数据的完整性<br>如果把事务比作一个程序，它要么完整的被执行,要么完全不执行</p></blockquote></li><li><p>key value 存储</p><blockquote><p>键值存储，即为key=&gt;value<br>键=&gt;值(key=&gt;value)对，键唯一，对应一个值，值的形式随意<br>以此绝对的保证了数据结构的完备性</p></blockquote></li></ul><hr><p><strong>相关基本概念(基本数据结构概念)</strong></p><ul><li>String: 字符串</li><li>Hash: 散列</li><li>List: 列表</li><li>Set: 集合</li><li>Sorted Set: 有序集合</li></ul><hr><p><strong>参考资料:</strong></p><ul><li><p>文档<a href="https://redis.io/documentation" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://redis.io/documentation</code></p></blockquote></li><li><p>官网<a href="https://redis.io/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://redis.io/</code></p></blockquote></li><li><p>获取<a href="https://redis.io/download" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://redis.io/download</code></p></blockquote></li><li><p>配置说明<a href="https://redis.io/topics/config" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://redis.io/topics/config</code></p></blockquote></li><li><p>apt-get自动化获取</p><blockquote><p><code>apt-get install redis-server</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL-4</title>
    <url>/2020/02/16/PostgreSQL-4/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="PostSQL-4"><a href="#PostSQL-4" class="headerlink" title="PostSQL-4"></a>PostSQL-4</h3><p><strong>PostgreSQL命令语句便捷参考(总览)</strong></p><ul><li><p>中文手册详细资料<a href="http://www.postgres.cn/docs/9.6/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.postgres.cn/docs/9.6/</code></p></blockquote></li><li><p>输出帮助内容</p><blockquote><p><code>postgres-# \help &lt;command_name&gt;</code></p></blockquote></li></ul><hr><p><strong>CREATE</strong></p><ul><li><p>定义一个新的聚集函数</p><blockquote><p><code>CREATE AGGREGATE</code></p></blockquote></li><li><p>定义一个用户定义的转换</p><blockquote><p><code>CREATE CAST</code></p></blockquote></li><li><p>定义一个新的约束触发器</p><blockquote><p><code>CREATE CONSTRAINT TRIGGER</code></p></blockquote></li><li><p>定义一个新的的编码转换</p><blockquote><p><code>CREATE CONVERSION</code></p></blockquote></li><li><p>创建新数据库</p><blockquote><p><code>CREATE DATABASE</code></p></blockquote></li><li><p>定义一个新域</p><blockquote><p><code>CREATE DOMAIN</code></p></blockquote></li><li><p>定义一个新函数</p><blockquote><p><code>CREATE FUNCTION</code></p></blockquote></li><li><p>定义一个新的用户组</p><blockquote><p><code>CREATE GROUP</code></p></blockquote></li><li><p>定义一个新索引</p><blockquote><p><code>CREATE INDEX</code></p></blockquote></li><li><p>定义一种新的过程语言</p><blockquote><p><code>CREATE LANGUAGE</code></p></blockquote></li><li><p>定义一个新的操作符</p><blockquote><p><code>CREATE OPERATOR</code></p></blockquote></li><li><p>定义一个新的操作符表</p><blockquote><p><code>CREATE OPERATOR CLASS</code></p></blockquote></li><li><p>定义一个新的数据库角色</p><blockquote><p><code>CREATE ROLE</code></p></blockquote></li><li><p>定义一个新重写规则</p><blockquote><p><code>CREATE RULE</code></p></blockquote></li><li><p>定义一个新模式</p><blockquote><p><code>CREATE SCHEMA</code></p></blockquote></li><li><p>定义一个新的外部服务器</p><blockquote><p><code>CREATE SERVER</code></p></blockquote></li><li><p>定义一个新序列发生器</p><blockquote><p><code>CREATE SEQUENCE</code></p></blockquote></li><li><p>定义一个新表</p><blockquote><p><code>CREATE TABLE</code></p></blockquote></li><li><p>从一条查询的结果中定义一个新表</p><blockquote><p><code>CREATE TABLE AS</code></p></blockquote></li><li><p>定义一个新的表空间</p><blockquote><p><code>CREATE TABLESPACE</code></p></blockquote></li><li><p>定义一个新的触发器</p><blockquote><p><code>CREATE TRIGGER</code></p></blockquote></li><li><p>定义一个新的数据类型</p><blockquote><p><code>CREATE TYPE</code></p></blockquote></li><li><p>创建一个新的数据库用户帐户</p><blockquote><p><code>CREATE USER</code></p></blockquote></li><li><p>定义一个视图</p><blockquote><p><code>CREATE VIEW</code></p></blockquote></li></ul><hr><p><strong>ALTER</strong></p><ul><li><p>修改一个聚集函数的定义</p><blockquote><p><code>ALTER AGGREGATE</code></p></blockquote></li><li><p>修改一个排序规则定义</p><blockquote><p><code>ALTER COLLATION</code></p></blockquote></li><li><p>修改一个编码转换的定义</p><blockquote><p><code>ALTER CONVERSION</code></p></blockquote></li><li><p>修改一个数据库</p><blockquote><p><code>ALTER DATABASE</code></p></blockquote></li><li><p>定义默认的访问权限</p><blockquote><p><code>ALTER DEFAULT PRIVILEGES</code></p></blockquote></li><li><p>修改一个域的定义</p><blockquote><p><code>ALTER DOMAIN</code></p></blockquote></li><li><p>修改一个函数的定义</p><blockquote><p><code>ALTER FUNCTION</code></p></blockquote></li><li><p>修改一个用户组</p><blockquote><p><code>ALTER GROUP</code></p></blockquote></li><li><p>修改一个索引的定义</p><blockquote><p><code>ALTER INDEX</code></p></blockquote></li><li><p>改变一个操作符的定义</p><blockquote><p><code>ALTER OPERATOR</code></p></blockquote></li><li><p>修改一个模式的定义</p><blockquote><p><code>ALTER SCHEMA</code></p></blockquote></li><li><p>修改一个序列生成器的定义</p><blockquote><p><code>ALTER SEQUENCE</code></p></blockquote></li><li><p>修改表的定义</p><blockquote><p><code>ALTER TABLE</code></p></blockquote></li><li><p>修改一个表空间的定义</p><blockquote><p><code>ALTER TABLESPACE</code></p></blockquote></li><li><p>修改改变一个触发器的定义</p><blockquote><p><code>ALTER TRIGGER</code></p></blockquote></li><li><p>修改一个类型的定义</p><blockquote><p><code>ALTER TYPE</code></p></blockquote></li><li><p>修改数据库用户帐号</p><blockquote><p><code>ALTER USER</code></p></blockquote></li><li><p>更新一个表中的行</p><blockquote><p><code>UPDATE</code></p></blockquote></li></ul><hr><p><strong>删除</strong></p><ul><li><p>删除一个准备好的查询</p><blockquote><p><code>DEALLOCATE</code></p></blockquote></li><li><p>删除一个表中的行</p><blockquote><p><code>DELETE</code></p></blockquote></li><li><p>删除一个用户定义的聚集函数</p><blockquote><p><code>DROP AGGREGATE</code></p></blockquote></li><li><p>删除一个用户定义的类型转换</p><blockquote><p><code>DROP CAST</code></p></blockquote></li><li><p>删除一个用户定义的编码转换</p><blockquote><p><code>DROP CONVERSION</code></p></blockquote></li><li><p>删除一个数据库</p><blockquote><p><code>DROP DATABASE</code></p></blockquote></li><li><p>删除一个用户定义的域</p><blockquote><p><code>DROP DOMAIN</code></p></blockquote></li><li><p>删除一个函数</p><blockquote><p><code>DROP FUNCTION</code></p></blockquote></li><li><p>删除一个用户组</p><blockquote><p><code>DROP GROUP</code></p></blockquote></li><li><p>删除一个索引</p><blockquote><p><code>DROP INDEX</code></p></blockquote></li><li><p>删除一个过程语言</p><blockquote><p><code>DROP LANGUAGE</code></p></blockquote></li><li><p>删除一个操作符</p><blockquote><p><code>DROP OPERATOR</code></p></blockquote></li><li><p>删除一个操作符表</p><blockquote><p><code>DROP OPERATOR CLASS</code></p></blockquote></li><li><p>删除一个数据库角色</p><blockquote><p><code>DROP ROLE</code></p></blockquote></li><li><p>删除一个重写规则</p><blockquote><p><code>DROP RULE</code></p></blockquote></li><li><p>删除一个模式</p><blockquote><p><code>DROP SCHEMA</code></p></blockquote></li><li><p>删除一个序列</p><blockquote><p><code>DROP SEQUENCE</code></p></blockquote></li><li><p>删除一个表</p><blockquote><p><code>DROP TABLE</code></p></blockquote></li><li><p>删除一个表空间</p><blockquote><p><code>DROP TABLESPACE</code></p></blockquote></li><li><p>删除一个触发器定义</p><blockquote><p><code>DROP TRIGGER</code></p></blockquote></li><li><p>删除一个用户定义数据类型</p><blockquote><p><code>DROP TYPE</code></p></blockquote></li><li><p>删除一个数据库用户帐号</p><blockquote><p><code>DROP USER</code></p></blockquote></li><li><p>删除一个视图</p><blockquote><p><code>DROP VIEW</code></p></blockquote></li><li><p>清空一个或一组表</p><blockquote><p><code>TRUNCATE</code></p></blockquote></li></ul><hr><p><code>SELECT</code></p><blockquote><p>从表或视图中取出若干行</p></blockquote><p><code>SELECT INTO</code></p><blockquote><p>从一个查询的结果中定义一个新表</p></blockquote><hr><p><code>SET</code></p><blockquote><p>修改运行时参数</p></blockquote><p><code>SET CONSTRAINTS</code></p><blockquote><p>设置当前事务的约束检查模式</p></blockquote><p><code>SET SESSION AUTHORIZATION</code></p><blockquote><p>为当前会话设置会话用户标识符和当前用户标识符</p></blockquote><p><code>SET TRANSACTION</code></p><blockquote><p>开始一个事务块</p></blockquote><hr><p><strong>其它</strong></p><ul><li><p>收集与数据库有关的统计</p><blockquote><p><code>ANALYZE</code></p></blockquote></li><li><p>用于退出当前事务</p><blockquote><p><code>ABORT</code></p></blockquote></li><li><p>开始一个事务块</p><blockquote><p><code>BEGIN</code></p></blockquote></li><li><p>开始一个事务块</p><blockquote><p><code>START TRANSACTION</code></p></blockquote></li><li><p>提交当前事务</p><blockquote><p><code>COMMIT</code></p></blockquote></li><li><p>提交当前的事务</p><blockquote><p><code>END</code></p></blockquote></li><li><p>在当前事务里定义一个新的保存点</p><blockquote><p><code>SAVEPOINT</code></p></blockquote></li><li><p>回滚到一个保存点</p><blockquote><p><code>ROLLBACK TO SAVEPOINT</code></p></blockquote></li><li><p>退出当前事务</p><blockquote><p><code>ROLLBACK</code></p></blockquote></li><li><p>强制一个事务日志检查点</p><blockquote><p><code>CHECKPOINT</code></p></blockquote></li><li><p>定义一个游标</p><blockquote><p><code>DECLARE</code></p></blockquote></li><li><p>定位一个游标</p><blockquote><p><code>MOVE</code></p></blockquote></li><li><p>用游标从查询中抓取行</p><blockquote><p><code>FETCH</code></p></blockquote></li><li><p>关闭游标</p><blockquote><p><code>CLOSE</code></p></blockquote></li><li><p>重建索引</p><blockquote><p><code>REINDEX</code></p></blockquote></li><li><p>根据一个索引对某个表盘簇化排序</p><blockquote><p><code>CLUSTER</code></p></blockquote></li><li><p>定义或者改变一个对象的注释</p><blockquote><p><code>COMMENT</code></p></blockquote></li><li><p>删除一个前面定义的保存点</p><blockquote><p><code>RELEASE SAVEPOINT</code></p></blockquote></li><li><p>在表和文件之间拷贝数据</p><blockquote><p><code>COPY</code></p></blockquote></li><li><p>创建一个准备好的查询</p><blockquote><p><code>PREPARE</code></p></blockquote></li><li><p>执行一个准备好的查询</p><blockquote><p><code>EXECUTE</code></p></blockquote></li><li><p>显示一个语句的执行规划</p><blockquote><p><code>EXPLAIN</code></p></blockquote></li><li><p>生成一个通知</p><blockquote><p><code>NOTIFY</code></p></blockquote></li><li><p>定义访问权限</p><blockquote><p><code>GRANT</code></p></blockquote></li><li><p>删除访问权限</p><blockquote><p><code>REVOKE</code></p></blockquote></li><li><p>在表中创建新行，即插入数据</p><blockquote><p><code>INSERT</code></p></blockquote></li><li><p>监听一个通知</p><blockquote><p><code>LISTEN</code></p></blockquote></li><li><p>停止监听通知信息</p><blockquote><p><code>UNLISTEN</code></p></blockquote></li><li><p>加载或重载一个共享库文件</p><blockquote><p><code>LOAD</code></p></blockquote></li><li><p>锁定一个表</p><blockquote><p><code>LOCK</code></p></blockquote></li><li><p>把一个运行时参数值恢复为默认值</p><blockquote><p><code>RESET</code></p></blockquote></li><li><p>显示运行时参数的值</p><blockquote><p><code>SHOW</code></p></blockquote></li><li><p>垃圾收集以及可选地分析一个数据库</p><blockquote><p><code>VACUUM</code></p></blockquote></li><li><p>计算一个或一组行</p><blockquote><p><code>VALUES</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>ORDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL-3</title>
    <url>/2020/02/16/PostgreSQL-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="PostgreSQL-3"><a href="#PostgreSQL-3" class="headerlink" title="PostgreSQL-3"></a>PostgreSQL-3</h3><p><strong>TABLES1数据结构</strong></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ID  A  B  C  D  TIME</span><br><span class="line"> <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">2</span>  <span class="number">2</span>  <span class="number">2</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">3</span>  <span class="number">3</span>  <span class="number">3</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> -</span><br><span class="line"> <span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">2</span>  <span class="number">1</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">2</span>  <span class="number">7</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">3</span>  <span class="number">7</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">4</span>  <span class="number">1</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"><span class="number">10</span> <span class="number">4</span>  <span class="number">6</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"><span class="number">11</span> <span class="number">1</span>  <span class="number">3</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"><span class="number">12</span> <span class="number">2</span>  <span class="number">2</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-17</span> -</span><br><span class="line"><span class="number">13</span> <span class="number">4</span>  <span class="number">9</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> -</span><br></pre></td></tr></table></figure><hr><blockquote><p>创建并连接</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">TEST</span>;</span><br><span class="line">\c test;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">postgres=# <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> TEST;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span></span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">postgres=<span class="comment"># \c test;</span></span><br><span class="line">您现在已经连接到数据库 <span class="string">"test"</span>,用户 <span class="string">"postgres"</span>.</span><br></pre></td></tr></table></figure><blockquote><p>创建A类表TABLES1</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> A</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> A.TABLES1 (</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">A <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">B <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">D <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>);</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">test-# <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> A.TABLES1 (</span><br><span class="line">test(# ID <span class="type">SERIAL</span> <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">test(# A <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">test(# B <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">test(# C <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">test(# D <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">test(# <span class="type">TIME</span> <span class="type">DATE</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>向A类表TABLES1内插入数据</p></blockquote><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">INSERT INTO A.TABLES1</span><br><span class="line">(A,B,C,D,TIME)</span><br><span class="line">VALUES</span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">7</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-17</span>'),</span><br><span class="line">(<span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>');</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">test=# INSERT INTO A.TABLES1</span><br><span class="line">test-# (A,B,C,D,TIME)</span><br><span class="line">test-# VALUES</span><br><span class="line">test-# (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">3</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">7</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>'),</span><br><span class="line">test-# (<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-17</span>'),</span><br><span class="line">test-# (<span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span>');</span><br><span class="line">INSERT <span class="number">0</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><p><code>SELECT * FROM A.TABLES1;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">test=# SELECT * FROM A.TABLES1;</span><br><span class="line"> id | a | b | c | d |    time    </span><br><span class="line">----+---+---+---+---+------------</span><br><span class="line">  <span class="number">1</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">2</span> | <span class="number">2</span> | <span class="number">2</span> | <span class="number">4</span> | <span class="number">6</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">3</span> | <span class="number">3</span> | <span class="number">3</span> | <span class="number">9</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">4</span> | <span class="number">1</span> | <span class="number">4</span> | <span class="number">8</span> | <span class="number">3</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">5</span> | <span class="number">2</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">6</span> | <span class="number">2</span> | <span class="number">7</span> | <span class="number">5</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">7</span> | <span class="number">3</span> | <span class="number">7</span> | <span class="number">3</span> | <span class="number">6</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">8</span> | <span class="number">1</span> | <span class="number">8</span> | <span class="number">7</span> | <span class="number">7</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">9</span> | <span class="number">4</span> | <span class="number">1</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">10</span> | <span class="number">4</span> | <span class="number">6</span> | <span class="number">1</span> | <span class="number">9</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">11</span> | <span class="number">1</span> | <span class="number">3</span> | <span class="number">8</span> | <span class="number">1</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">12</span> | <span class="number">2</span> | <span class="number">2</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-17</span></span><br><span class="line"> <span class="number">13</span> | <span class="number">4</span> | <span class="number">9</span> | <span class="number">6</span> | <span class="number">7</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">(<span class="number">13</span> 行记录)</span><br></pre></td></tr></table></figure><hr><blockquote><p>复制A类表TABLES1结构与表内数据于TABLES2</p></blockquote><p><code>SELECT * FROM TABLES2;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">test=# SELECT * FROM A.TABLES2;</span><br><span class="line"> id | a | b | c | d |    time    </span><br><span class="line">----+---+---+---+---+------------</span><br><span class="line">  <span class="number">1</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">2</span> | <span class="number">2</span> | <span class="number">2</span> | <span class="number">4</span> | <span class="number">6</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">3</span> | <span class="number">3</span> | <span class="number">3</span> | <span class="number">9</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">4</span> | <span class="number">1</span> | <span class="number">4</span> | <span class="number">8</span> | <span class="number">3</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">5</span> | <span class="number">2</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">6</span> | <span class="number">2</span> | <span class="number">7</span> | <span class="number">5</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">7</span> | <span class="number">3</span> | <span class="number">7</span> | <span class="number">3</span> | <span class="number">6</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">8</span> | <span class="number">1</span> | <span class="number">8</span> | <span class="number">7</span> | <span class="number">7</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">9</span> | <span class="number">4</span> | <span class="number">1</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">10</span> | <span class="number">4</span> | <span class="number">6</span> | <span class="number">1</span> | <span class="number">9</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">11</span> | <span class="number">1</span> | <span class="number">3</span> | <span class="number">8</span> | <span class="number">1</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line"> <span class="number">12</span> | <span class="number">2</span> | <span class="number">2</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-17</span></span><br><span class="line"> <span class="number">13</span> | <span class="number">4</span> | <span class="number">9</span> | <span class="number">6</span> | <span class="number">7</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">(<span class="number">13</span> 行记录)</span><br></pre></td></tr></table></figure><hr><blockquote><p>输出A类表TABLES1与A类表TABLES2内ID等于6或3与7或4的行</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A.TABLES1 <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="number">6</span> <span class="keyword">OR</span> <span class="keyword">ID</span>=<span class="number">3</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A.TABLES2 <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="number">7</span> <span class="keyword">OR</span> <span class="keyword">ID</span>=<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><code>SELECT * FROM A.TABLES1 WHERE ID=6 OR ID=3 UNION SELECT * FROM A.TABLES2 WHERE ID=7 OR ID=4;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">test=# SELECT * FROM A.TABLES1 WHERE ID=<span class="number">6</span> OR ID=<span class="number">3</span>              </span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM A.TABLES2 WHERE ID=<span class="number">7</span> OR ID=<span class="number">4</span>;</span><br><span class="line"> id | a | b | c | d |    time    </span><br><span class="line">----+---+---+---+---+------------</span><br><span class="line">  <span class="number">6</span> | <span class="number">2</span> | <span class="number">7</span> | <span class="number">5</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">3</span> | <span class="number">3</span> | <span class="number">3</span> | <span class="number">9</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">4</span> | <span class="number">1</span> | <span class="number">4</span> | <span class="number">8</span> | <span class="number">3</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">7</span> | <span class="number">3</span> | <span class="number">7</span> | <span class="number">3</span> | <span class="number">6</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">(<span class="number">4</span> 行记录)</span><br></pre></td></tr></table></figure><hr><blockquote><p>输出并查询A类表TABLES1内ID等于3或等于4的行</p></blockquote><p><code>SELECT * FROM A.TABLES1 WHERE ID=3 OR ID=4;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">test=# SELECT * FROM A.TABLES1 WHERE ID=<span class="number">3</span> OR ID=<span class="number">4</span>;</span><br><span class="line"> id | a | b | c | d |    time    </span><br><span class="line">----+---+---+---+---+------------</span><br><span class="line">  <span class="number">3</span> | <span class="number">3</span> | <span class="number">3</span> | <span class="number">9</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">4</span> | <span class="number">1</span> | <span class="number">4</span> | <span class="number">8</span> | <span class="number">3</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">(<span class="number">2</span> 行记录)</span><br></pre></td></tr></table></figure><hr><blockquote><p>以偏移量为三为前提，输出并查询A类表TABLES1内的三条数据</p></blockquote><p><code>SELECT * FROM A.TABLES1 LIMIT 3 OFFSET 3;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">test=# SELECT * FROM A.TABLES1 LIMIT <span class="number">3</span> OFFSET <span class="number">3</span>;</span><br><span class="line"> id | a | b | c | d |    time    </span><br><span class="line">----+---+---+---+---+------------</span><br><span class="line">  <span class="number">4</span> | <span class="number">1</span> | <span class="number">4</span> | <span class="number">8</span> | <span class="number">3</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">5</span> | <span class="number">2</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">1</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">  <span class="number">6</span> | <span class="number">2</span> | <span class="number">7</span> | <span class="number">5</span> | <span class="number">2</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-16</span></span><br><span class="line">(<span class="number">3</span> 行记录)</span><br></pre></td></tr></table></figure><hr><blockquote><p>以偏移量为一为前提与排除所有重复数据为前提，输出并查询A类表TABLES1内的四条数据</p></blockquote><p><code>SELECT DISTINCT A,B,C FROM A.TABLES1 LIMIT 4 OFFSET 1;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">test=# SELECT DISTINCT A,B,C FROM A.TABLES1 LIMIT <span class="number">4</span> OFFSET <span class="number">1</span>;</span><br><span class="line"> a | b | c </span><br><span class="line">---+---+---</span><br><span class="line"> <span class="number">1</span> | <span class="number">3</span> | <span class="number">8</span></span><br><span class="line"> <span class="number">2</span> | <span class="number">1</span> | <span class="number">1</span></span><br><span class="line"> <span class="number">2</span> | <span class="number">7</span> | <span class="number">5</span></span><br><span class="line"> <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span></span><br><span class="line">(<span class="number">4</span> 行记录)</span><br></pre></td></tr></table></figure><hr><blockquote><p>将A类表TABLES1内B列的结果基于A列进行分组并求和，分组数量小于10且为降序输出</p></blockquote><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A, <span class="built_in">SUM</span>(B) <span class="keyword">FROM</span> A.TABLES1 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> A </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(A) &lt; <span class="number">10</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> A <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><code>SELECT A, SUM(B) FROM A.TABLES1 GROUP BY A HAVING count(A) &lt; 10 ORDER BY A DESC;</code></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">test</span>=# SELECT A, SUM(B) <span class="keyword">FROM</span> A.TABLES1<span class="built_in"> GROUP </span>BY A HAVING count(A) &lt; 10 ORDER BY A DESC;</span><br><span class="line"> a | sum </span><br><span class="line">---+-----</span><br><span class="line"> 4 |  16</span><br><span class="line"> 3 |  10</span><br><span class="line"> 2 |  12</span><br><span class="line"> 1 |  16</span><br><span class="line">(4 行记录)</span><br></pre></td></tr></table></figure><ul><li>执行逻辑</li></ul><ol><li>将B映射于A，并对A的数值类型进行分组</li><li>SUM()函数将B中映射于A的数值进行求和</li><li>降序输出且组的数量不能大于10</li></ol><hr><blockquote><p>删除两表内所有数据<br><code>TRUNCATE TABLE A.TABLES1;</code></p></blockquote><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">test=# TRUNCATE <span class="keyword">TABLE</span> A.TABLES1;</span><br><span class="line">TRUNCATE <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><p><code>TRUNCATE A.TABLES2;</code></p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">test=# TRUNCATE <span class="keyword">TABLE</span> A.TABLES2;</span><br><span class="line">TRUNCATE <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><p><code>DROP TABLE A.TABLES1;</code></p><p><code>DROP TABLE A.TABLES2;</code></p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">test</span>=# <span class="keyword">DROP</span> <span class="keyword">TABLE</span> A.TABLES1;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">test</span>=# <span class="keyword">DROP</span> <span class="keyword">TABLE</span> A.TABLES2;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><p><code>DROP DATABASE TEST;</code></p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">postgres=# <span class="keyword">DROP</span> <span class="keyword">DATABASE</span> TEST;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span></span><br></pre></td></tr></table></figure><hr><ul><li>没必要去设计特别复杂的逻辑语句,有时适当分句往往能提高工作效率</li></ul><hr><p><strong>相关概念:</strong></p><table><thead><tr><th align="left">概念</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">SELECT</td><td align="left">查询</td></tr><tr><td align="left">FROM</td><td align="left">来源于…</td></tr><tr><td align="left">DISTINCT</td><td align="left">唯一</td></tr><tr><td align="left">WHERE</td><td align="left">条件</td></tr><tr><td align="left">AND&amp;OR</td><td align="left">逻辑与和逻辑或</td></tr><tr><td align="left">LIKE</td><td align="left">类似于…</td></tr><tr><td align="left">LIMIT</td><td align="left">限制查询结果的输出数量</td></tr><tr><td align="left">OFFSET</td><td align="left">查询结果偏移</td></tr><tr><td align="left">ORDER BY (ASC/DESC)</td><td align="left">排序</td></tr><tr><td align="left">GROUP BY</td><td align="left">分组</td></tr><tr><td align="left">HAVING</td><td align="left">分组之上再设置分组条件</td></tr><tr><td align="left">WITH</td><td align="left">子句封装，将使用指令进行封装以便一键执行</td></tr><tr><td align="left">UNION</td><td align="left">连接</td></tr><tr><td align="left">VIEW</td><td align="left">创建视图</td></tr><tr><td align="left">WHERE可以嵌套查询语句</td><td align="left">所执行嵌套的语句被称为内部查询/子查询</td></tr><tr><td align="left">内聚函数</td><td align="left">可以称为内置函数</td></tr><tr><td align="left">TRUNCATE TABLE</td><td align="left">删除表数据</td></tr></tbody></table><hr><p><strong>常用内聚函数参考</strong></p><ul><li>COUNT 函数:用于计算数据库表中的行数</li><li>MAX 函数:用于查询某一特定列中最大值</li><li>MIN 函数:用于查询某一特定列中最小值</li><li>AVG 函数:用于计算某一特定列中平均值</li><li>SUM 函数:用于计算数字列所有值的总和</li><li>ARRAY 函数:用于输入值(包括null)添加到数组中</li><li>Numeric 函数:完整列出一个SQL中所需的操作数的函数</li><li>String 函数:完整列出一个SQL中所需的操作字符的函数</li></ul><p><strong>其他函数类型</strong></p><ul><li>数学函数</li><li>三角函数</li><li>字符函数</li><li>操作符函数</li><li>类型转换函数</li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>ORDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL-2</title>
    <url>/2020/02/15/PostgreSQL-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="PortgreSQL-2"><a href="#PortgreSQL-2" class="headerlink" title="PortgreSQL-2"></a>PortgreSQL-2</h3><ul><li>使用前几章MySQL中所规定的数据模型</li><li>默认超级管理员权限</li></ul><hr><ul><li>创建数据库test1<blockquote><p><code>CREATE DATABASE TEST1;</code></p></blockquote></li></ul><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">postgres=# <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> TEST1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span></span><br></pre></td></tr></table></figure><ul><li>查看所有数据库<blockquote><p><code>\l</code></p></blockquote></li></ul><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">postgres=<span class="comment"># \l</span></span><br><span class="line">                                     数据库列表</span><br><span class="line">   名称    |<span class="string">  拥有者  </span>|<span class="string"> 字元编码 </span>|<span class="string">  校对规则   </span>|<span class="string">    Ctype    </span>|<span class="string">       存取权限        </span></span><br><span class="line"><span class="string">-----------+----------+----------+-------------+-------------+-----------------------</span></span><br><span class="line"><span class="string"> postgres  </span>|<span class="string"> postgres </span>|<span class="string"> UTF8     </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> </span></span><br><span class="line"><span class="string"> template0 </span>|<span class="string"> postgres </span>|<span class="string"> UTF8     </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> =c/postgres          +</span></span><br><span class="line"><span class="string">           </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string">             </span>|<span class="string">             </span>|<span class="string"> postgres=CTc/postgres</span></span><br><span class="line"><span class="string"> template1 </span>|<span class="string"> postgres </span>|<span class="string"> UTF8     </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> =c/postgres          +</span></span><br><span class="line"><span class="string">           </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string">             </span>|<span class="string">             </span>|<span class="string"> postgres=CTc/postgres</span></span><br><span class="line"><span class="string"> test1     </span>|<span class="string"> postgres </span>|<span class="string"> UTF8     </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> zh_CN.UTF-8 </span>|<span class="string"> </span></span><br><span class="line"><span class="string">(4 行记录)</span></span><br></pre></td></tr></table></figure><ul><li>连接数据库，默认用户<code>postgres</code><blockquote><p><code>\c test1;</code></p></blockquote></li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">postgres=<span class="comment"># \c test1;</span></span><br><span class="line">您现在已经连接到数据库 <span class="string">"test1"</span>,用户 <span class="string">"postgres"</span>.</span><br></pre></td></tr></table></figure><hr><ul><li>模式A<blockquote><p><code>CREATE SCHEMA A;</code></p></blockquote></li></ul><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> A;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span></span><br></pre></td></tr></table></figure><ul><li>表<code>A.tables1</code><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> A.tables1(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">A <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">D <span class="built_in">REAL</span>,</span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> A;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span></span><br><span class="line">test1=# <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> A.tables1(</span><br><span class="line">test1(# ID <span class="type">SERIAL</span> <span class="keyword">PRIMARY KEY</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">test1(# A <span class="type">TEXT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">test1(# B <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">test1(# C <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">test1(# D <span class="type">REAL</span>,</span><br><span class="line">test1(# <span class="type">TIME</span> <span class="type">DATE</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><ul><li>索引<blockquote><p><code>CREATE UNIQUE INDEX A_INDEX ON A.TABLES1 (A);</code></p></blockquote></li></ul><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> A_INDEX <span class="keyword">ON</span> A.TABLES1 (A);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span></span><br></pre></td></tr></table></figure><ul><li>别名<blockquote><p><code>SELECT G.ID, G.A, G.B, G.C, G.D FROM TABLES1 AS G;</code></p></blockquote></li></ul><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">test1=# SELECT G.ID, G.A, G.B, G.C, G.D FROM A.TABLES1 AS G;</span><br><span class="line"><span class="code"> id | a | b | c | d </span></span><br><span class="line">----<span class="code">+---+</span>---<span class="code">+---+</span>---</span><br><span class="line">(0 行记录)</span><br></pre></td></tr></table></figure><hr><ul><li>开启事务<blockquote><p><code>BEGIN;或者BEGIN TRANSACTION;</code></p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br></pre></td></tr></table></figure><ul><li>插入</li></ul><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">INSERT INTO A.tables1 </span><br><span class="line">(A,B,C,D,TIME) </span><br><span class="line">VALUES </span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-13</span>' );</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">test1=# INSERT INTO A.tables1 </span><br><span class="line">(A,B,C,D,TIME) </span><br><span class="line">VALUES </span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-14</span>' ),</span><br><span class="line">(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, '<span class="number">2020</span><span class="number">-02</span><span class="number">-13</span>' );</span><br><span class="line">INSERT <span class="number">0</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>更新<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> A.TABLES1 <span class="keyword">SET</span> A = <span class="number">2</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span> =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> A.TABLES1 <span class="keyword">SET</span> A = <span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span> =<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p><code>SELECT * FROM A.TABLES1;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">test1=# SELECT * FROM A.TABLES1;</span><br><span class="line"> id | a | b | c | d |    time    </span><br><span class="line">----+---+---+---+---+------------</span><br><span class="line">  <span class="number">3</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">1</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span></span><br><span class="line">  <span class="number">4</span> | <span class="number">2</span> | <span class="number">2</span> | <span class="number">2</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span></span><br><span class="line">  <span class="number">5</span> | <span class="number">3</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span></span><br><span class="line">  <span class="number">6</span> | <span class="number">4</span> | <span class="number">2</span> | <span class="number">4</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span></span><br><span class="line">  <span class="number">7</span> | <span class="number">0</span> | <span class="number">2</span> | <span class="number">0</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-13</span></span><br><span class="line">(<span class="number">5</span> 行记录)</span><br></pre></td></tr></table></figure><ul><li>修改<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> A.TABLES1 <span class="keyword">ADD</span> E <span class="built_in">CHAR</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> A.TABLES1 <span class="keyword">ADD</span> F <span class="built_in">CHAR</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> A.TABLES1 <span class="keyword">ADD</span> E <span class="type">CHAR</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line">test1=# <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> A.TABLES1 <span class="keyword">ADD</span> F <span class="type">CHAR</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><p><code>SELECT * FROM A.TABLES1;</code></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">test1=<span class="comment"># SELECT * FROM A.TABLES1;</span></span><br><span class="line"> id |<span class="string"> a </span>|<span class="string"> b </span>|<span class="string"> c </span>|<span class="string"> d </span>|<span class="string">    time    </span>|<span class="string"> e </span>|<span class="string"> f </span></span><br><span class="line"><span class="string">----+---+---+---+---+------------+---+---</span></span><br><span class="line"><span class="string">  3 </span>|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 1 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  4 </span>|<span class="string"> 2 </span>|<span class="string"> 2 </span>|<span class="string"> 2 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  5 </span>|<span class="string"> 3 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  6 </span>|<span class="string"> 4 </span>|<span class="string"> 2 </span>|<span class="string"> 4 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  7 </span>|<span class="string"> 0 </span>|<span class="string"> 2 </span>|<span class="string"> 0 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-13 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">(5 行记录)</span></span><br></pre></td></tr></table></figure><ul><li>锁<blockquote><p><code>LOCK TABLE A.TABLES1 IN ACCESS EXCLUSIVE MODE;</code></p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">LOCK</span> <span class="keyword">TABLE</span> A.TABLES1 <span class="keyword">IN</span> <span class="keyword">ACCESS</span> <span class="keyword">EXCLUSIVE MODE</span>;</span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><ul><li>关闭事务<blockquote><p><code>COMMIT;或者END TRANSACTION;</code></p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">END</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure><hr><ul><li>查询表格是否存在<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">\d</span><br><span class="line">\d <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span>table1</span><br><span class="line">SELECT<span class="operator"> * </span>FROM <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span>tables1;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">test1=<span class="comment"># \d A.TABLES1;</span></span><br><span class="line">                                数据表 <span class="string">"a.tables1"</span></span><br><span class="line"> 栏位 |<span class="string">     类型     </span>|<span class="string"> 校对规则 </span>|<span class="string">  可空的  </span>|<span class="string">                 预设                  </span></span><br><span class="line"><span class="string">------+--------------+----------+----------+---------------------------------------</span></span><br><span class="line"><span class="string"> id   </span>|<span class="string"> integer      </span>|<span class="string">          </span>|<span class="string"> not null </span>|<span class="string"> nextval('a.tables1_id_seq'::regclass)</span></span><br><span class="line"><span class="string"> a    </span>|<span class="string"> text         </span>|<span class="string">          </span>|<span class="string"> not null </span>|<span class="string"> </span></span><br><span class="line"><span class="string"> b    </span>|<span class="string"> integer      </span>|<span class="string">          </span>|<span class="string"> not null </span>|<span class="string"> </span></span><br><span class="line"><span class="string"> c    </span>|<span class="string"> character(1) </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> </span></span><br><span class="line"><span class="string"> d    </span>|<span class="string"> real         </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> </span></span><br><span class="line"><span class="string"> time </span>|<span class="string"> date         </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> </span></span><br><span class="line"><span class="string"> e    </span>|<span class="string"> character(1) </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> </span></span><br><span class="line"><span class="string"> f    </span>|<span class="string"> character(1) </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> </span></span><br><span class="line"><span class="string">索引：</span></span><br><span class="line"><span class="string">    "tables1_pkey" PRIMARY KEY, btree (id)</span></span><br><span class="line"><span class="string">    "a_index" UNIQUE, btree (a)</span></span><br><span class="line"><span class="string">    "tables1_c_key" UNIQUE CONSTRAINT, btree (c)</span></span><br></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">test1=<span class="comment"># SELECT * FROM A.tables1;</span></span><br><span class="line"> id |<span class="string"> a </span>|<span class="string"> b </span>|<span class="string"> c </span>|<span class="string"> d </span>|<span class="string">    time    </span>|<span class="string"> e </span>|<span class="string"> f </span></span><br><span class="line"><span class="string">----+---+---+---+---+------------+---+---</span></span><br><span class="line"><span class="string">  3 </span>|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 1 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  4 </span>|<span class="string"> 2 </span>|<span class="string"> 2 </span>|<span class="string"> 2 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  5 </span>|<span class="string"> 3 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  6 </span>|<span class="string"> 4 </span>|<span class="string"> 2 </span>|<span class="string"> 4 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">  7 </span>|<span class="string"> 0 </span>|<span class="string"> 2 </span>|<span class="string"> 0 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-13 </span>|<span class="string">   </span>|<span class="string"> </span></span><br><span class="line"><span class="string">(5 行记录)</span></span><br></pre></td></tr></table></figure><hr><ul><li>删除<blockquote><p><code>DROP SCHEMA A CASCADE;</code><br><code>DROP TABLE TABLES1;</code><br><code>DROP DATABASE TEST1;</code></p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">test1=# <span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> A <span class="keyword">CASCADE</span>;</span><br><span class="line">注意:  递归删除 表 a.<span class="keyword">tables</span></span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">postgres=# <span class="keyword">DROP</span> <span class="keyword">DATABASE</span> TEST1;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>ORDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL-1</title>
    <url>/2020/02/15/PostgreSQL-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="PostgreSQL-1"><a href="#PostgreSQL-1" class="headerlink" title="PostgreSQL-1"></a>PostgreSQL-1</h3><p><strong>概述:</strong></p><ul><li>ORDBMS(关系数据库服务器)</li><li>基于BSD许可证发行</li></ul><hr><p><strong>基本特征:</strong></p><ul><li>函数:通过函数，可以在数据库服务器端执行指令程序</li><li>索引:用户可以自定义索引方法，或使用内置的<code>B树</code>，<code>哈希表</code>与<code>GiST索引</code></li><li>触发器:触发器是由SQL语句查询所触发的事件，如：一个INSERT语句可能触发一个检查数据完整性的触发器。触发器通常由<code>INSERT</code>或<code>UPDATE</code>语句触发</li><li>多版本并发控制:PostgreSQL使用多版本并发控制(MVCC，Multiversion concurrency control)系统进行并发控制，该系统向每个用户提供了一个数据库的”快照”，用户在事务内所作的每个修改，对于其他的用户都不可见，直到该事务成功提交</li><li>规则:规则(RULE)允许一个查询能被重写，通常用来实现对视图(VIEW)的操作，如插入(INSERT)、更新(UPDATE)、删除(DELETE)</li><li>数据类型:包括文本、任意精度的数值数组、<code>JSON数据</code>、<code>枚举类型</code>、<code>XML数据等</code></li><li>全文检索:通过<code>Tsearch2</code>或<code>OpenFTS</code>，<code>8.3版本</code>中内嵌<code>Tsearch2</code></li><li>NoSQL:<code>JSON</code>，<code>JSONB</code>，<code>XML</code>，<code>HStore</code>原生支持，至<code>NoSQL</code>数据库的外部数据包装器</li><li>数据仓库:能平滑迁移至同属<code>PostgreSQL</code>生态的<code>GreenPlum</code>，<code>DeepGreen</code>，<code>HAWK</code>等，使用<code>FDW</code>进行<code>ETL</code></li><li>PostpreSQL与MySQL的语法与模式完全不同</li></ul><hr><p><strong>安装:</strong></p><ul><li><code>apt-get</code>全自动安装<blockquote><p><code>$ sudo apt-get install postgresql postgresql-client</code></p></blockquote></li><li>安装完毕后，系统会创建一个数据库超级用户postgres，密码为空<blockquote><p><code># sudo -i -u postgres</code></p></blockquote></li><li>进入postgres命令行提示符<blockquote><p><code>$ psql</code></p></blockquote></li><li>退出PostgreSQL命令行提示符<blockquote><p><code>\q</code></p></blockquote></li></ul><hr><ul><li>基本配置与帮助</li><li>可执行文件目录<blockquote><p><code>/etc/init.d/postgresql</code><br><code>/etc/postgresql</code></p></blockquote></li><li>配置文件目录<blockquote><p><code>/usr/lib/postgresql</code></p></blockquote></li><li>帮助文档目录<blockquote><p><code>/usr/share/postgresql</code></p></blockquote></li><li>帮助指令<blockquote><p><code>postgres-# \help &lt;command_name&gt;</code></p></blockquote></li><li>例如<blockquote><p><code>postgres=# \help SELECT</code></p></blockquote></li><li>查看所有帮助(指令用法)<blockquote><p><code>postgres=# \?</code></p></blockquote></li></ul><hr><p><strong>其他:</strong></p><ul><li><code>pgAdmin</code>工具(图形化管理与操作工具)</li><li><code>pgAdmin</code>工具提供了完整操作数据库的功能</li><li>类似于MySQL的<code>MySQLadmin</code></li><li>封装命令</li><li>进入<code>PostpreSQL</code>的可执行目录内执行(/安装目录/bin)</li><li>PostgreSQL特有性质，例如<code>CREATE DATABASE</code>语句等同于<code>createdb</code>命令</li><li>文案中将会避免使用封装命令，而尽可能多的使用SQL标准中所规定的标准语句</li><li>封装命令的执行不需要添加分号(<code>;</code>)</li><li>关于权限的使用与说明本篇不做阐述</li></ul><hr><ul><li><p><code>createdb</code>命令语法格式如下:</p></li><li><p>进入<code>PostpreSQL</code>的可执行目录内执行</p><blockquote><p><code>createdb [option...] [dbname [description]]</code></p></blockquote></li><li><p>参数说明:</p><blockquote><p><code>dbname</code>:要创建的数据库名<br><code>description</code>:关于新创建的数据库相关的说明<br><code>options</code>:参数可选项，具体参考官方中文手册</p></blockquote></li><li><p><code>psql</code>连接工具语法</p></li><li><p><code>psql</code>的命令都是以斜杠<code>\</code>开头的</p></li><li><p>关于<code>\</code>的具体使用，本篇将不会多做阐述</p><blockquote><p><code>psql -h &lt;hostname or ip&gt; -p &lt;端口&gt; [数据库名称] [用户名称]</code></p></blockquote></li><li><p>执行存储在外部文件中的SQL命令</p><blockquote><p><code>\i &lt;文件名&gt;</code>执行存储在外部文件中的sql语句<br>当然也可以在<code>psql命令行</code>加<code>-s &lt;filename&gt;</code>来执行SQL脚本文件中的命令<br>如<code>psql -s test.sql</code></p></blockquote></li></ul><hr><p><strong>快速参考</strong></p><ul><li>相关概念简述:</li><li>数据类型</li><li>运算符</li><li>表达式</li><li>触发器</li><li>NULL</li><li>子查询/嵌套查询/内部查询</li><li>事务</li><li>函数</li></ul><hr><ul><li>模式 <code>SCHEMA</code></li><li>别名 <code>AS</code></li><li>序列 <code>smallserial/serial/bigserial(AUTO_INCREMENT)</code></li><li>排序/分组 <code>order by(asc/desc)/group by</code></li><li>连接 <code>UNION/JOIN LEFT/RIGHT/PULL/INNER/CROSS</code></li><li>索引 <code>INDEX</code></li><li>约束 <code>PRIMARY KEY/FOREIGN KEY/CHECK/EXCLUSION/UNIQUE/NOT NULL</code></li><li>视图 <code>VIEW</code></li><li>锁 <code>LOCK</code></li><li>权限 <code>GRANT</code></li><li>时间/日期 <code>DATE</code></li></ul><hr><p><strong>参考资料:</strong></p><ul><li><p>手册CN<a href="http://www.postgres.cn/docs/9.6/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>http://www.postgres.cn/docs/9.6/</code></p></blockquote></li><li><p>10.1手册源码CN<a href="https://github.com/postgres-cn/pgdoc-cn/wiki/pg10" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/postgres-cn/pgdoc-cn/wiki/pg10</code></p></blockquote></li><li><p>最新版手册源码CN<a href="https://github.com/postgres-cn/pgdoc-cn/releases" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/postgres-cn/pgdoc-cn/releases</code></p></blockquote></li><li><p>手册翻译社区CN<a href="https://github.com/postgres-cn/pgdoc-cn" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/postgres-cn/pgdoc-cn</code></p></blockquote></li><li><p>官方网站<a href="https://www.postgresql.org/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.postgresql.org/</code></p></blockquote></li><li><p>下载地址<a href="https://www.postgresql.org/download/linux/debian/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.postgresql.org/download/linux/debian/</code></p></blockquote></li><li><p>软件源码<a href="https://www.postgresql.org/ftp/source/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.postgresql.org/ftp/source/</code></p></blockquote></li><li><p><code>apt-get</code>获取</p><blockquote><p><code>apt-get install postgresql postgresql-client</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>ORDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-5</title>
    <url>/2020/02/15/MySQL-5/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="MySQL-5"><a href="#MySQL-5" class="headerlink" title="MySQL-5"></a>MySQL-5</h3><ul><li>MySQL补充内容</li><li>MySQL可执行目录/usr/bin/mysql</li><li>MySQL配置文件目录/etc/my.cnf</li></ul><hr><p><strong>添加用户</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO<span class="built_in"> user </span></span><br><span class="line">          (host, user, password, </span><br><span class="line">           select_priv, insert_priv, update_priv) </span><br><span class="line">           VALUES (<span class="string">'localhost'</span>, <span class="string">'guest'</span>, </span><br><span class="line">           PASSWORD(<span class="string">'guest123'</span>), <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>);</span><br><span class="line">Query OK, 1 row affected (0.20 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>泛用指令</strong></p><ul><li><p>设置权限</p><blockquote><p><code>chown mysql:mysql -R /var/lib/mysql</code></p></blockquote></li><li><p>初始化</p><blockquote><p><code>mysqld --initialize</code></p></blockquote></li><li><p>查看所有数据库</p><blockquote><p><code>SHOW DATABASES;</code></p></blockquote></li><li><p>查看当前数据库内所有表</p><blockquote><p><code>SHOW TABLES;</code></p></blockquote></li><li><p>显示数据表的属性，属性类型，主键信息 ，是否为NULL，默认值等其他信息</p><blockquote><p><code>SHOW COLUMNS FROM 数据表;</code></p></blockquote></li><li><p>显示数据表的详细索引信息，包括<code>PRIMARY KEY</code>(主键)</p><blockquote><p><code>SHOW INDEX FROM 数据表;</code></p></blockquote></li><li><p>输出Mysql数据库管理系统的性能及统计信息</p><blockquote><p><code>SHOW TABLE STATUS LIKE [FROM db_name] [LIKE &#39;pattern&#39;] \G;</code></p></blockquote></li></ul><hr><p><strong>RDBMS-MySQL参考资料</strong></p><ul><li><p>mysql官网<a href="https://www.mysql.com/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.mysql.com/</code></p></blockquote></li><li><p>mysql下载地址<a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://dev.mysql.com/downloads/</code></p></blockquote></li><li><p>文档(EN)<a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://dev.mysql.com/doc/</code></p></blockquote></li></ul><hr><ul><li><p>MariaDB官网<a href="https://mariadb.org" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://mariadb.org</code></p></blockquote></li><li><p>MariaDB下载地址<a href="https://mariadb.org/download/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://mariadb.org/download/</code></p></blockquote></li><li><p>文档(CN)<a href="https://mariadb.com/kb/zh-cn/mariadb/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://mariadb.com/kb/zh-cn/mariadb/</code></p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-4</title>
    <url>/2020/02/15/MySQL-4/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="MySQL数据导出与导入"><a href="#MySQL数据导出与导入" class="headerlink" title="MySQL数据导出与导入"></a>MySQL数据导出与导入</h3><p><strong>导出</strong></p><ul><li><p>所导出目标文件必须为有可读写权限</p></li><li><p>使用<code>SELECT ... INTO OUTFILE</code>语句</p></li><li><p>基本语法:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="built_in">table_name</span></span><br><span class="line">    -&gt; <span class="keyword">INTO</span> OUTFILE <span class="string">'目标路径'</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用mysqldump导出原始数据</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p --no-create-<span class="builtin-name">info</span> \</span><br><span class="line">            <span class="attribute">--tab</span>=/目标文件路径 database_name table_name</span><br><span class="line">password:</span><br></pre></td></tr></table></figure></li><li><p>导出SQL格式的文件</p></li><li><p>不添加<code>table_name</code>导出整个数据库</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p database_name table_name &gt; 目标文件路径</span><br><span class="line"><span class="symbol">password:</span></span><br></pre></td></tr></table></figure></li><li><p>导出所有数据库</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> mysqldump -u root -p --<span class="keyword">all</span>-databases &gt; 目标文件路径</span><br><span class="line">password:</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>导入</strong></p><ul><li><p>mysql 命令导入</p><blockquote><p><code>mysql -u username -p passwrod &lt; 要导入的数据库数据文件路径(xxx.sql)</code></p></blockquote></li><li><p>source 命令导入</p></li><li><p>登录到数库终端执行以下命令</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">mysql&gt; USE DATABASE_NAME;</span><br><span class="line">mysql&gt; <span class="keyword">SET</span> NAMES <span class="comment">utf8</span>;</span><br><span class="line">mysql&gt; SOURCE /目标文件路径(.sql)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">mysqlimport</span>导入</span><br><span class="line">$ mysql<span class="keyword">import</span> -u root -p <span class="comment">--local tables_name /被导入文件路径</span></span><br><span class="line"><span class="title">password</span> *****</span><br></pre></td></tr></table></figure><hr><p><strong>PHP语法简介</strong></p><ul><li>PHP Mysqli</li><li>mysqli()函数</li></ul><p><strong>格式</strong></p><blockquote><p><code>mysqli_function(value,value,...);</code></p></blockquote><ul><li>以上格式中function部分描述了mysqli()函数的功能，例如:<blockquote><p><code>mysqli_connect($connect);</code><br><code>mysqli_query($connect,&quot;SQL 语句&quot;);</code><br><code>mysqli_fetch_array()</code><br><code>mysqli_close()</code></p></blockquote></li></ul><hr><p><strong>mysqladmin用法简述</strong></p><ul><li><p>管理性操作语法</p><blockquote><p><code>mysqladmin [OPTIONS] command [command-option] command ...</code></p></blockquote></li><li><p>帮助指令</p><blockquote><p><code>mysqladmin --help</code></p></blockquote></li><li><p>连接</p><blockquote><p><code>mysqladmin -u[username] -p[password] status</code></p></blockquote></li></ul><hr><p><strong>简要参数:</strong></p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">create databasename</td><td align="left">创建一个新数据库</td></tr><tr><td align="left">drop databasename</td><td align="left">删除一个数据库及其所有表</td></tr><tr><td align="left">shutdown</td><td align="left">关掉服务器</td></tr><tr><td align="left">kill id,id,…</td><td align="left">杀死mysql线程</td></tr><tr><td align="left">flush-logs</td><td align="left">清理掉所有日志</td></tr><tr><td align="left">flush-tables</td><td align="left">清理掉所有表</td></tr><tr><td align="left">ping</td><td align="left">检查mysqld是否存在</td></tr></tbody></table><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-参考</title>
    <url>/2020/02/14/SQL-%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="SQL-参考"><a href="#SQL-参考" class="headerlink" title="SQL 参考"></a>SQL 参考</h3><p><strong>按出现次数排行</strong></p><p><strong>重要指令一览</strong></p><table><thead><tr><th align="left">指令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">SELECT</td><td align="left">从数据库中提取数据</td></tr><tr><td align="left">UPDATE</td><td align="left">更新数据库中的数据</td></tr><tr><td align="left">DELETE</td><td align="left">从数据库中删除数据</td></tr><tr><td align="left">INSERT INTO</td><td align="left">向数据库中插入新数据</td></tr><tr><td align="left">CREATE DATABASE</td><td align="left">创建新数据库</td></tr><tr><td align="left">ALTER DATABASE</td><td align="left">修改数据库</td></tr><tr><td align="left">CREATE TABLE</td><td align="left">创建新表</td></tr><tr><td align="left">ALTER TABLE</td><td align="left">变更(改变)数据库表</td></tr><tr><td align="left">DROP TABLE</td><td align="left">删除表</td></tr><tr><td align="left">CREATE INDEX</td><td align="left">创建索引(搜索键)</td></tr><tr><td align="left">DROP INDEX</td><td align="left">删除索引</td></tr></tbody></table><hr><p><strong>基本语句</strong></p><table><thead><tr><th align="left">语句</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">CREATE</td><td align="left">创建</td></tr><tr><td align="left">TABLE</td><td align="left">数据表</td></tr><tr><td align="left">DATABASE</td><td align="left">数据库</td></tr><tr><td align="left">SELECT</td><td align="left">选择</td></tr><tr><td align="left">ALTER</td><td align="left">变更/修改</td></tr><tr><td align="left">INSERT</td><td align="left">插入</td></tr><tr><td align="left">UPDATE</td><td align="left">更新</td></tr><tr><td align="left">DELETE</td><td align="left">删除</td></tr><tr><td align="left">VIEWS</td><td align="left">视图</td></tr></tbody></table><hr><p><strong>逻辑语句</strong></p><table><thead><tr><th align="left">单词</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">WHERE</td><td align="left">在…</td></tr><tr><td align="left">FROM</td><td align="left">来自…</td></tr><tr><td align="left">AND&amp;OR</td><td align="left">逻辑与/逻辑或</td></tr><tr><td align="left">LIKE</td><td align="left">类似于…/像…</td></tr><tr><td align="left">IN</td><td align="left">在…内</td></tr><tr><td align="left">JOIN</td><td align="left">连接</td></tr><tr><td align="left">INNER/LEFT/RIGHT/FULL</td><td align="left">内部/左部/右部/全部</td></tr><tr><td align="left">UNION</td><td align="left">并集/组合</td></tr></tbody></table><hr><p><strong>关键字/操作符</strong></p><table><thead><tr><th align="left">单词</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">DISTINCT</td><td align="left">不同的</td></tr><tr><td align="left">ORDER</td><td align="left">顺序</td></tr><tr><td align="left">ORDER BY</td><td align="left">以…排序</td></tr><tr><td align="left">ASC</td><td align="left">DESC</td></tr><tr><td align="left">TOP/LIMIT/ROWNUM</td><td align="left">极限/最大化</td></tr><tr><td align="left">BETWEEN</td><td align="left">在…之间</td></tr><tr><td align="left">UNIQUE</td><td align="left">独特</td></tr><tr><td align="left">FOREIGN</td><td align="left">外来的</td></tr><tr><td align="left">CHECK</td><td align="left">阻止/检查</td></tr><tr><td align="left">DEFAULT</td><td align="left">默认</td></tr><tr><td align="left">INDEX</td><td align="left">索引/指标</td></tr><tr><td align="left">DROP</td><td align="left">中止</td></tr><tr><td align="left">ADD</td><td align="left">添加</td></tr><tr><td align="left">COLUMN</td><td align="left">纵列</td></tr><tr><td align="left">INTO</td><td align="left">到…内</td></tr><tr><td align="left">PRIMARY</td><td align="left">主键/首要/基本</td></tr><tr><td align="left">AUTO</td><td align="left">自动/自动模式</td></tr><tr><td align="left">INCREMENT</td><td align="left">递增/增加</td></tr><tr><td align="left">NOT</td><td align="left">否</td></tr></tbody></table><hr><p><strong>其他一</strong></p><table><thead><tr><th align="left">单词</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">USE</td><td align="left">使用/选择</td></tr><tr><td align="left">VALUES</td><td align="left">值</td></tr><tr><td align="left">SET</td><td align="left">位于…</td></tr><tr><td align="left">AS</td><td align="left">例如/向…</td></tr><tr><td align="left">NULL</td><td align="left">空/无</td></tr><tr><td align="left">BY</td><td align="left">由/被/到…之前</td></tr><tr><td align="left">HAVING</td><td align="left">具有</td></tr><tr><td align="left">ON</td><td align="left">在…上/触发/打开</td></tr><tr><td align="left">IN</td><td align="left">在…内</td></tr><tr><td align="left">ALL</td><td align="left">全部</td></tr><tr><td align="left">TRUNCATE</td><td align="left">截取</td></tr><tr><td align="left">CONSTRAINT</td><td align="left">约束</td></tr><tr><td align="left"><code>*</code></td><td align="left">泛用通配符</td></tr></tbody></table><hr><p><strong>其他二</strong></p><table><thead><tr><th align="left">单词</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">column</td><td align="left">列</td></tr><tr><td align="left">table</td><td align="left">表</td></tr><tr><td align="left">operator</td><td align="left">操作符</td></tr><tr><td align="left">valueN</td><td align="left">值</td></tr><tr><td align="left">some</td><td align="left">某个</td></tr><tr><td align="left">Persons</td><td align="left">个体</td></tr><tr><td align="left">percent</td><td align="left">占比</td></tr><tr><td align="left">external</td><td align="left">外部</td></tr><tr><td align="left">DB</td><td align="left">数据库</td></tr><tr><td align="left">type</td><td align="left">类型</td></tr><tr><td align="left">size</td><td align="left">尺寸/大小</td></tr><tr><td align="left">Last</td><td align="left">末尾</td></tr><tr><td align="left">First</td><td align="left">起始</td></tr></tbody></table><hr><p><strong>语句参考</strong></p><ul><li>ALTER TABLE</li><li>CREATE DATABASE</li><li>CREATE INDEX</li><li>CREATE TABLE</li><li>CREATE VIEW</li><li>DROP DATABASE</li><li>DROP INDEX</li><li>DROP TABLE</li><li>INSERT INTO</li><li>INNER JOIN</li><li>LEFT JOIN</li><li>RIGHT JOIN</li><li>FULL JOIN</li><li>SELECT DISTINCT</li><li>SELECT INTO</li><li>SELECT TOP</li><li>TRUNCATE TABLE</li><li>UNION ALL</li><li>GROUP BY</li><li>ORDER BY</li><li>SELECT *</li></ul><hr><p><strong>子句参考</strong></p><ul><li>WHERE</li><li>UPDATE</li><li>UNION</li><li>SELECT</li><li>LIKE</li><li>IN</li><li>HAVING</li><li>DELETE</li><li>BETWEEN</li><li>AS (alias)</li><li>AND/OR</li></ul><hr><p><strong>概念</strong></p><ul><li>通配符</li><li>别名</li><li>约束</li><li>索引</li><li>函数</li><li>通用数据类型</li><li>DB 数据类型</li></ul><hr><p><strong>最泛用常用函数</strong></p><blockquote><p>DATE()<br>NULL()</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>RDBMS-MySQL</title>
    <url>/2020/02/14/RDBMS-MySQL/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="RDBMS-MySQL"><a href="#RDBMS-MySQL" class="headerlink" title="RDBMS-MySQL"></a>RDBMS-MySQL</h3><p><strong>RDBMS-MySQL相关概念简述</strong></p><ul><li>数据库: 数据库是一些关联表的集合</li><li>数据表: 表是数据的矩阵，在一个数据库中的表看起来像一个简单的电子表格</li><li>列: 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据</li><li>行: 一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据</li><li>冗余: 存储两倍数据，冗余降低了性能，但提高了数据的安全性</li><li>主键: 主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据</li><li>外键: 外键用于关联两个表</li><li>复合键: 复合键（组合键）将多个列作为一个索引键，一般用于复合索引</li><li>索引: 使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录</li><li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性</li><li>表头(header): 每一列的名称</li><li>列(col): 具有相同数据类型的数据的集合</li><li>行(row): 每一行用来描述某条记录的具体信息</li><li>值(value): 行的具体信息, 每个值必须与该列的数据类型相同</li><li>键(key): 键的值在当前列中具有唯一性</li><li>所谓的”关系型”可以理解为”表格”的概念, 一个关系型数据库由一个或数个表格组成</li></ul><hr><p><strong>MySQL</strong></p><ul><li>MySQL 为关系型数据库(Relational Database Management System)</li><li>MySQL -server- MySQL 服务器程序</li><li>MySQL-client - MySQL 客户端程序，用于连接并操作Mysql服务器</li><li>MySQL-devel - 库和包含文件，如果你想要编译其它MySQL客户端</li><li>MySQL-shared - 该软件包包含某些语言和应用程序需要动态装载的共享库(libmysqlclient.so)，使用MySQL</li><li>MySQL-bench - MySQL数据库服务器的基准和性能测试工具</li></ul><hr><p><strong>RDBMS-MySQL的三种连接方式</strong></p><ul><li>二进制连接 mysql -u username -p password</li><li>Shell连接 使用MySQLadmin工具</li><li>PHP连接不做阐述</li></ul><hr><p><strong>其他概念</strong></p><ul><li>数据类型</li><li>运算符</li><li>正则表达式</li><li>索引</li><li>元数据</li><li>序列</li><li>函数</li><li>MySQLadmin指令</li><li>PHP连接</li><li>SQL注入</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-3</title>
    <url>/2020/02/14/MySQL-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="MySQL-3"><a href="#MySQL-3" class="headerlink" title="MySQL-3"></a>MySQL-3</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"><span class="keyword">CREATE</span> DATABLE TEST1;</span><br><span class="line"><span class="keyword">USE</span> TEST1;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]&gt; <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> TEST1;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected (<span class="number">0.000</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]&gt; USE TEST1;</span><br><span class="line"><span class="keyword">Database</span> changed</span><br></pre></td></tr></table></figure><p>分别建立TABLES1,TABLES2(唯一键值)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES1(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">A <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">D <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> ( <span class="keyword">ID</span>, A, B )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES2(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">A <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">D <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> ( <span class="keyword">ID</span>, A, B )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; CREATE TABLE TABLES1(</span><br><span class="line">    -&gt; ID INT <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; A VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; B VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; C VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; D VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; TIME DATE,</span><br><span class="line">    -&gt; PRIMARY KEY ( ID, A, B )</span><br><span class="line">    -&gt; )<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.061 sec)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; CREATE TABLE TABLES2(</span><br><span class="line">    -&gt; ID INT <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; A VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; B VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; C VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; D VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; TIME DATE,</span><br><span class="line">    -&gt; UNIQUE ( ID, A, B )</span><br><span class="line">    -&gt; )<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.006 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>向TABLES1插入数据</strong></p><ul><li>4<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li>1<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">'2020-02-13'</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.003</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("2","3","4","5",<span class="string">'2020-02-13'</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected (<span class="number">0.002</span> sec)</span><br></pre></td></tr></table></figure><hr><p><strong>复制TABLES1内数据到TABLES2</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2 (<span class="keyword">ID</span>,A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>,A,B,C,D,<span class="built_in">TIME</span></span><br><span class="line"><span class="keyword">FROM</span> TABLES1;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2 (ID,A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">SELECT</span> ID,A,B,C,D,<span class="type">TIME</span></span><br><span class="line">    -&gt; <span class="keyword">FROM</span> TABLES1;</span><br><span class="line">Query OK, <span class="number">5</span> <span class="keyword">rows</span> affected (<span class="number">0.001</span> sec)</span><br><span class="line">Records: <span class="number">5</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p><strong>复制TABLES1内数据到TABLES3</strong></p><ul><li>查看标结构<blockquote><p><code>SHOW CREATE TABLE TABLES1 \G;</code></p></blockquote></li></ul><p><strong>将表内结构规划语句拷贝并执行,并命名为TABLES3</strong><br><strong>复制数据</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3 (<span class="keyword">ID</span>,A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>,A,B,C,D,<span class="built_in">TIME</span></span><br><span class="line"><span class="keyword">FROM</span> TABLES1;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SHOW CREATE TABLE TABLES1 \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: TABLES1</span><br><span class="line">Create Table: CREATE TABLE `TABLES1` (</span><br><span class="line">  `ID` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `A` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `B` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `C` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `D` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `TIME` date<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (`ID`,`A`,`B`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="attribute">AUTO_INCREMENT</span>=6<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8</span><br><span class="line">1 row <span class="keyword">in</span> <span class="builtin-name">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line">ERROR: <span class="literal">No</span> query specified</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `TABLES3` (</span><br><span class="line">  `ID` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `A` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `B` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `C` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `D` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `TIME` date<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (`ID`,`A`,`B`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="attribute">AUTO_INCREMENT</span>=6<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8</span><br><span class="line">;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; CREATE TABLE `TABLES3` (</span><br><span class="line">    -&gt;   `ID` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt;   `A` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt;   `B` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt;   `C` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt;   `D` varchar(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt;   `TIME` date<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">    -&gt;   PRIMARY KEY (`ID`,`A`,`B`)</span><br><span class="line">    -&gt; ) <span class="attribute">ENGINE</span>=InnoDB <span class="attribute">AUTO_INCREMENT</span>=6<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.042 sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3 (<span class="keyword">ID</span>,A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>,A,B,C,D,<span class="built_in">TIME</span></span><br><span class="line"><span class="keyword">FROM</span> TABLES1;</span><br></pre></td></tr></table></figure><hr><p><code>SHOW TABLES;</code></p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SHOW TABLES;</span><br><span class="line"><span class="code">+-----------------+</span></span><br><span class="line">| Tables<span class="emphasis">_in_</span>TEST1 |</span><br><span class="line"><span class="code">+-----------------+</span></span><br><span class="line">| TABLES1         |</span><br><span class="line">| TABLES2         |</span><br><span class="line">| TABLES3         |</span><br><span class="line"><span class="code">+-----------------+</span></span><br><span class="line">3 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TABLES1;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TABLES2;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TABLES3;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES1;</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">| ID | A | B | C | D | TIME       |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">2</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">3</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">4</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">5</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES2;</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">| ID | A | B | C | D | TIME       |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">2</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">3</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">4</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">5</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES3;</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">| ID | A | B | C | D | TIME       |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">2</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">3</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">4</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">5</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><hr><p><strong>统计表TABLES1内A列与B列中重复的数据</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) as repetitions, A, B</span><br><span class="line"><span class="keyword">FROM</span> TABLES1</span><br><span class="line">GROUP BY A, B</span><br><span class="line">HAVING repetitions &gt; 1;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT COUNT(*) as repetitions, A, B</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> TABLES1</span><br><span class="line">    -&gt;<span class="built_in"> GROUP </span>BY A, B</span><br><span class="line">    -&gt; HAVING repetitions &gt; 1;</span><br><span class="line">+-------------+---+---+</span><br><span class="line">| repetitions | A | B |</span><br><span class="line">+-------------+---+---+</span><br><span class="line">|           4 | 1 | 2 |</span><br><span class="line">+-------------+---+---+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="builtin-name">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>过滤重复数据并输出TABLES1内数据</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT A, B</span><br><span class="line"><span class="keyword">FROM</span> TABLES1;</span><br><span class="line">或</span><br><span class="line">SELECT A, B</span><br><span class="line"><span class="keyword">FROM</span> TABLES2</span><br><span class="line">GROUP BY (C);</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT DISTINCT A, B</span><br><span class="line"><span class="code">    -&gt; FROM TABLES1;</span></span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">| A | B |</span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">| 1 | 2 |</span><br><span class="line">| 2 | 3 |</span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">2 rows in set (0.000 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; SELECT A, B</span><br><span class="line"><span class="code">    -&gt; FROM TABLES2</span></span><br><span class="line"><span class="code">    -&gt; GROUP BY (C);</span></span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">| A | B |</span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">| 1 | 2 |</span><br><span class="line">| 2 | 3 |</span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">2 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>删除TABLES1内重复数据</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp <span class="keyword">SELECT</span> A, B, C, D <span class="keyword">FROM</span> TABLES1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> (C);</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLES1;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tmp <span class="keyword">RENAME</span> <span class="keyword">TO</span> TABLES1;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp <span class="keyword">SELECT</span> A, B, C, D <span class="keyword">FROM</span> TABLES1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> (C);</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.027</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLES1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.002</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tmp <span class="keyword">RENAME</span> <span class="keyword">TO</span> TABLES1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.002</span> sec)</span><br></pre></td></tr></table></figure><p><code>SELECT * FROM TABLES1;</code></p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES1;</span><br><span class="line"><span class="code">+---+</span>---<span class="code">+---+</span>---+</span><br><span class="line">| A | B | C | D |</span><br><span class="line"><span class="code">+---+</span>---<span class="code">+---+</span>---+</span><br><span class="line">| 1 | 2 | 3 | 4 |</span><br><span class="line">| 2 | 3 | 4 | 5 |</span><br><span class="line"><span class="code">+---+</span>---<span class="code">+---+</span>---+</span><br><span class="line">2 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>或设置主键以清理TABLEST2内重复数据</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">IGNORE</span> <span class="keyword">TABLE</span> TABLES2</span><br><span class="line"><span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (A, B);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; ALTER IGNORE TABLE TABLES2</span><br><span class="line">    -&gt; ADD PRIMARY KEY (A, B);</span><br><span class="line">Query OK, <span class="number">5</span> rows affected (<span class="number">0.059</span> sec)              </span><br><span class="line">Records: <span class="number">5</span>  Duplicates: <span class="number">3</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>SELECT * FROM TABLES2;</code></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT <span class="symbol">*</span> FROM TABLES2;</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|<span class="string"> ID </span>|<span class="string"> A </span>|<span class="string"> B </span>|<span class="string"> C </span>|<span class="string"> D </span>|<span class="string"> TIME       </span>|</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|<span class="string"> 2020-02-14 </span>|</span><br><span class="line">|<span class="string">  5 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|<span class="string"> 5 </span>|<span class="string"> 2020-02-13 </span>|</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">2 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-2</title>
    <url>/2020/02/14/MySQL-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="MySQL-2"><a href="#MySQL-2" class="headerlink" title="MySQL-2"></a>MySQL-2</h3><p><strong>创建并选取数据库</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> TEST1;</span><br><span class="line"><span class="keyword">USE</span> TEST1;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]&gt; <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> TEST1;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MariaDB</span> [(<span class="literal">none</span>)]&gt; USE TEST1;</span><br><span class="line"><span class="attribute">Database</span> changed</span><br></pre></td></tr></table></figure><p><strong>创建临时表TABLEST6</strong><br><code>CREATE TEMPORARY TABLE TABLES6 (B INT, C CHAR(1) );</code></p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> TABLES6 (B <span class="type">INT</span>, C <span class="type">CHAR</span>(<span class="number">1</span>) );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><hr><p><strong>向表内插入字段</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> A <span class="built_in">INT</span> <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> D <span class="built_in">INT</span> <span class="keyword">AFTER</span> C;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> E <span class="built_in">CHAR</span> <span class="keyword">AFTER</span> D;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> G <span class="built_in">CHAR</span> <span class="keyword">AFTER</span> E;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> A <span class="type">INT</span> FIRST;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> D <span class="type">INT</span> <span class="keyword">AFTER</span> C;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> E <span class="type">CHAR</span> <span class="keyword">AFTER</span> D;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">ADD</span> G <span class="type">CHAR</span> <span class="keyword">AFTER</span> E;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>查看表结构</strong><br><code>SHOW COLUMNS FROM TABLES6;</code></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SHOW COLUMNS FROM TABLES6;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">|<span class="string"> Field </span>|<span class="string"> Type    </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra </span>|</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">|<span class="string"> A     </span>|<span class="string"> int(11) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> B     </span>|<span class="string"> int(11) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> C     </span>|<span class="string"> char(1) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> D     </span>|<span class="string"> int(11) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> E     </span>|<span class="string"> char(1) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> G     </span>|<span class="string"> char(1) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>修改字符类型</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">MODIFY</span> A <span class="built_in">INT</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">MODIFY</span> B <span class="built_in">INT</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">MODIFY</span> C <span class="built_in">INT</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">MODIFY</span> D <span class="built_in">CHAR</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">MODIFY</span> E <span class="built_in">CHAR</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">MODIFY</span> G <span class="built_in">CHAR</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 MODIFY A INT(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 MODIFY B INT(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.000</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 MODIFY C INT(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 MODIFY D CHAR(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 MODIFY E CHAR(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 MODIFY G CHAR(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>查看表结构</strong><br><code>SHOW COLUMNS FROM TABLES6;</code></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SHOW COLUMNS FROM TABLES6;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">|<span class="string"> Field </span>|<span class="string"> Type     </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra </span>|</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">|<span class="string"> A     </span>|<span class="string"> int(10)  </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> B     </span>|<span class="string"> int(10)  </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> C     </span>|<span class="string"> int(10)  </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> D     </span>|<span class="string"> char(10) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> E     </span>|<span class="string"> char(10) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> G     </span>|<span class="string"> char(10) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>修改字段名称</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">CHANGE</span> G F <span class="built_in">BIGINT</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">CHANGE</span> F F <span class="built_in">CHAR</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 CHANGE G F BIGINT;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 CHANGE F F CHAR(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p><strong>修改默认值</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ALTER TABLE TABLES6</span><br><span class="line">MODIFY D BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>1000;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ALTER TABLE TABLES6</span><br><span class="line">MODIFY E BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>1000;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ALTER TABLE TABLES6</span><br><span class="line">MODIFY F BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>100;</span><br></pre></td></tr></table></figure><p><code>ALTER TABLE TABLES6 ALTER F SET DEFAULT 1000;</code></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6</span><br><span class="line">    -&gt; MODIFY D BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>1000;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)              </span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6</span><br><span class="line">    -&gt; MODIFY E BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>1000;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)              </span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6</span><br><span class="line">    -&gt; MODIFY F BIGINT <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>100;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)              </span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 ALTER F <span class="builtin-name">SET</span><span class="built_in"> DEFAULT </span>1000;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)              </span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p><strong>查看表结构</strong><br><code>SHOW COLUMNS FROM TABLES6;</code></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SHOW COLUMNS FROM TABLES6;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">|<span class="string"> Field </span>|<span class="string"> Type       </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra </span>|</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">|<span class="string"> A     </span>|<span class="string"> int(10)    </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> B     </span>|<span class="string"> int(10)    </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> C     </span>|<span class="string"> int(10)    </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> D     </span>|<span class="string"> bigint(20) </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> 1000    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> E     </span>|<span class="string"> bigint(20) </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> 1000    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> F     </span>|<span class="string"> bigint(20) </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string"> 1000    </span>|<span class="string">       </span>|</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.002 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>修改表TABLES6的存储引擎</strong><br><code>ALTER TABLE TABLES6 ENGINE = MYISAM;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES6 ENGINE = MYISAM;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p><strong>查看存储结构</strong><br><code>SHOW TABLE STATUS LIKE &#39;TABLES6&#39;;</code></p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">'TABLES6'</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><hr><p><strong>修改TABLES6为TABLES4</strong><br><code>ALTER TABLE TABLES6 RENAME TO TABLES4;</code></p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES6 <span class="keyword">RENAME</span> <span class="keyword">TO</span> TABLES4;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><hr><p><strong>创建索引并删除多余索引</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES4 <span class="keyword">ADD</span> <span class="keyword">INDEX</span> (B);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES4 <span class="keyword">ADD</span> <span class="keyword">INDEX</span> (A);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES4 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> B;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES4 ADD INDEX (B);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES4 ADD INDEX (A);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.002</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES4 DROP INDEX B;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.002</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p><strong>设A为主键(作为主键索引,A值不能为空)</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES4 <span class="keyword">MODIFY</span> A <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES4 <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (B);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES4 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLES4 <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (A);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES4 ADD PRIMARY KEY (B);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES4 DROP PRIMARY KEY;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; ALTER TABLE TABLES4 ADD PRIMARY KEY (A);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)              </span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p><strong>列出索引</strong><br><code>SHOW INDEX FROM TABLES4;</code></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SHOW INDEX FROM TABLES4;</span><br><span class="line">+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">|<span class="string"> Table   </span>|<span class="string"> Non_unique </span>|<span class="string"> Key_name </span>|<span class="string"> Seq_in_index </span>|<span class="string"> Column_name </span>|<span class="string"> Collation </span>|<span class="string"> Cardinality </span>|<span class="string"> Sub_part </span>|<span class="string"> Packed </span>|<span class="string"> Null </span>|<span class="string"> Index_type </span>|<span class="string"> Comment </span>|<span class="string"> Index_comment </span>|</span><br><span class="line">+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">|<span class="string"> TABLES4 </span>|<span class="string">          0 </span>|<span class="string"> PRIMARY  </span>|<span class="string">            1 </span>|<span class="string"> A           </span>|<span class="string"> A         </span>|<span class="string">           0 </span>|<span class="string">     NULL </span>|<span class="string"> NULL   </span>|<span class="string">      </span>|<span class="string"> BTREE      </span>|<span class="string">         </span>|<span class="string">               </span>|</span><br><span class="line">|<span class="string"> TABLES4 </span>|<span class="string">          1 </span>|<span class="string"> A        </span>|<span class="string">            1 </span>|<span class="string"> A           </span>|<span class="string"> A         </span>|<span class="string">        NULL </span>|<span class="string">     NULL </span>|<span class="string"> NULL   </span>|<span class="string">      </span>|<span class="string"> BTREE      </span>|<span class="string">         </span>|<span class="string">               </span>|</span><br><span class="line">+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">2 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>删除TABLES4</strong><br><code>DROP TABLE TABLES4;</code></p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLES4;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-1</title>
    <url>/2020/02/14/MySQL-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL-1"></a>MySQL-1</h3><p><strong>应用-1</strong></p><p><strong>所使用数据模型:</strong></p><blockquote><p>六行六列<br>TABLES1:</p></blockquote><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[ID-A-B-C-D-time]</span><br><span class="line">[<span class="number">1</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span>-now]</span><br><span class="line">[<span class="number">2</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span>-now]</span><br><span class="line">[<span class="number">3</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span>-now]</span><br><span class="line">[<span class="number">4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span>-now]</span><br><span class="line">[<span class="number">5</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-5</span><span class="number">-2020</span><span class="number">-02</span><span class="number">-13</span>]</span><br></pre></td></tr></table></figure><blockquote><p>TABLES2:</p></blockquote><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[ID-A-B-C-D-time]</span><br><span class="line">[<span class="number">1</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span>-now]</span><br><span class="line">[<span class="number">2</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-5</span>-now]</span><br><span class="line">[<span class="number">3</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-5</span>-now]</span><br><span class="line">[<span class="number">4</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-5</span>-now]</span><br><span class="line">[<span class="number">5</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-5</span><span class="number">-2020</span><span class="number">-02</span><span class="number">-13</span>]</span><br></pre></td></tr></table></figure><blockquote><p>TABLES3:</p></blockquote><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[ID-A-B-C-D-time]</span><br><span class="line">[<span class="number">1</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span>-now]</span><br><span class="line">[<span class="number">2</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-5</span>-now]</span><br><span class="line">[<span class="number">3</span><span class="number">-6</span><span class="number">-7</span><span class="number">-8</span><span class="number">-9</span>-now]</span><br><span class="line">[<span class="number">4</span><span class="number">-6</span><span class="number">-7</span><span class="number">-8</span><span class="number">-9</span>-now]</span><br><span class="line">[<span class="number">5</span><span class="number">-6</span><span class="number">-7</span><span class="number">-8</span><span class="number">-9</span><span class="number">-2020</span><span class="number">-02</span><span class="number">-13</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASELS;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> TEST1;</span><br><span class="line"><span class="keyword">USE</span> TEST1;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]&gt; <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> TEST1;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected (<span class="number">0.000</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]&gt; USE TEST1;</span><br><span class="line"><span class="keyword">Database</span> changed</span><br></pre></td></tr></table></figure><p><strong>分别创建TABLES1,TABLES2,TABLES3</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES1(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">A <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">D <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> ( <span class="keyword">ID</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES2(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">A <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">D <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> ( <span class="keyword">ID</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLES3(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">A <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">B <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">C <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">D <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="built_in">TIME</span> <span class="built_in">DATE</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> ( <span class="keyword">ID</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; CREATE TABLE TABLES1(</span><br><span class="line">    -&gt; ID INT <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; A VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; B VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; C VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; D VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; TIME DATE,</span><br><span class="line">    -&gt; PRIMARY KEY ( ID )</span><br><span class="line">    -&gt; )<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.046 sec)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; CREATE TABLE TABLES2(</span><br><span class="line">    -&gt; ID INT <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; A VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; B VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; C VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; D VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; TIME DATE,</span><br><span class="line">    -&gt; PRIMARY KEY ( ID )</span><br><span class="line">    -&gt; )<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.043 sec)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; CREATE TABLE TABLES3(</span><br><span class="line">    -&gt; ID INT <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; A VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; B VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; C VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; D VARCHAR(100) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; TIME DATE,</span><br><span class="line">    -&gt; PRIMARY KEY ( ID )</span><br><span class="line">    -&gt; )<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.005 sec)</span><br></pre></td></tr></table></figure><p><code>SHOW TABLES;</code></p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SHOW TABLES;</span><br><span class="line"><span class="code">+-----------------+</span></span><br><span class="line">| Tables<span class="emphasis">_in_</span>TEST1 |</span><br><span class="line"><span class="code">+-----------------+</span></span><br><span class="line">| TABLES1         |</span><br><span class="line">| TABLES2         |</span><br><span class="line">| TABLES3         |</span><br><span class="line"><span class="code">+-----------------+</span></span><br><span class="line">3 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>分别向TABLES1,TABLES2,TABLES3内填充数据</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> A;</span><br></pre></td></tr></table></figure><ul><li>4<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li>1<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">'2020-02-13'</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.000</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.000</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES1 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; INSERT INTO TABLES1</span><br><span class="line"><span class="function">    -&gt;</span> (A,B,C,D,TIME)</span><br><span class="line"><span class="function">    -&gt;</span> VALUES</span><br><span class="line"><span class="function">    -&gt;</span> (<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">'2020-02-13'</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> A;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TABLES1;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; RELEASE SAVEPOINT A;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.000</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES1;</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">| ID | A | B | C | D | TIME       |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">2</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">3</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">4</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">5</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> A;</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">WORK</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">STRAT TRANSACTION/<span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> A;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">* <span class="number">1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2</span><br><span class="line">(A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">("1","2","3","4",NOW());</span><br></pre></td></tr></table></figure><ul><li>3<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li>1<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">'2020-02-13'</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.002</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("2","3","4","5",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("2","3","4","5",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES2 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("2","3","4","5",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; INSERT INTO TABLES2</span><br><span class="line"><span class="function">    -&gt;</span> (A,B,C,D,TIME)</span><br><span class="line"><span class="function">    -&gt;</span> VALUES</span><br><span class="line"><span class="function">    -&gt;</span> (<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">'2020-02-13'</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><p><code>SELECT * FROM TABLES2;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES2;</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">| ID | A | B | C | D | TIME       |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">2</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">3</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">4</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">5</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> A;</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">WORK</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">STRAT TRANSACTION/<span class="keyword">BEGIN</span>; </span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> A;</span><br></pre></td></tr></table></figure><ul><li>1<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li>1<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li>2<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure></li><li>1<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3</span><br><span class="line">(A,B,C,D,<span class="built_in">TIME</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">'2020-02-13'</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("1","2","3","4",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("2","3","4","5",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3</span><br><span class="line">    -&gt; (A,B,C,D,<span class="type">TIME</span>)</span><br><span class="line">    -&gt; <span class="keyword">VALUES</span></span><br><span class="line">    -&gt; ("6","7","8","9",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLES3 (A,B,C,D,<span class="type">TIME</span>) <span class="keyword">VALUES</span> ("6","7","8","9",NOW());</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; INSERT INTO TABLES3</span><br><span class="line"><span class="function">    -&gt;</span> (A,B,C,D,TIME)</span><br><span class="line"><span class="function">    -&gt;</span> VALUES</span><br><span class="line"><span class="function">    -&gt;</span> (<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">'2020-02-13'</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><p><code>SELECT * FROM TABLES3;</code></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES3;</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">| ID | A | B | C | D | TIME       |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">2</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">3</span> | <span class="number">6</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">9</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">4</span> | <span class="number">6</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">9</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> |</span><br><span class="line">|  <span class="number">5</span> | <span class="number">6</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">9</span> | <span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> |</span><br><span class="line">+----+---+---+---+---+------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> A;</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">WORK</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>从三个表中选择所有列A匹配1的数据，返回所有列A中映射于列1的数据，并让列A靠左</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A,B <span class="keyword">FROM</span> TABLES1</span><br><span class="line"><span class="keyword">WHERE</span> A=<span class="string">'1'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B <span class="keyword">FROM</span> TABLES2</span><br><span class="line"><span class="keyword">WHERE</span> A=<span class="string">'1'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B <span class="keyword">FROM</span> TABLES3</span><br><span class="line"><span class="keyword">WHERE</span> A=<span class="string">'1'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> A;</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT A,B FROM TABLES1</span><br><span class="line"><span class="code">    -&gt; WHERE A='1'</span></span><br><span class="line"><span class="code">    -&gt; UNION ALL</span></span><br><span class="line"><span class="code">    -&gt; SELECT A,B FROM TABLES2</span></span><br><span class="line"><span class="code">    -&gt; WHERE A='1'</span></span><br><span class="line"><span class="code">    -&gt; UNION ALL</span></span><br><span class="line"><span class="code">    -&gt; SELECT A,B FROM TABLES3</span></span><br><span class="line"><span class="code">    -&gt; WHERE A='1'</span></span><br><span class="line"><span class="code">    -&gt; ORDER BY A;</span></span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">| A | B |</span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">| 1 | 2 |</span><br><span class="line">| 1 | 2 |</span><br><span class="line"><span class="code">+---+</span>---+</span><br><span class="line">2 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure><p><strong>查询并输出表TABLES1内列A中匹配数值2和列B中匹配数值3与列TIME中匹配以3结尾的数据</strong></p><blockquote><p><code>SELECT * FROM TABLES1 WHERE A=2 AND B=3 AND TIME LIKE &#39;%3&#39;;</code></p></blockquote><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT * FROM TABLES2 WHERE A=2 AND B=3 AND TIME LIKE <span class="emphasis">'%3'</span>;</span><br><span class="line"><span class="code">+----+</span>---<span class="code">+---+</span>---<span class="code">+---+</span>------------+</span><br><span class="line">| ID | A | B | C | D | TIME       |</span><br><span class="line"><span class="code">+----+</span>---<span class="code">+---+</span>---<span class="code">+---+</span>------------+</span><br><span class="line">|  5 | 2 | 3 | 4 | 5 | 2020-02-13 |</span><br><span class="line"><span class="code">+----+</span>---<span class="code">+---+</span>---<span class="code">+---+</span>------------+</span><br><span class="line">1 row in set (0.000 sec)</span><br></pre></td></tr></table></figure><hr><p><strong>将表A内数据利用COUNT()函数按数值类型进行数据分组并求其平均值,并按降序排列(默认升序)</strong></p><blockquote><p><code>SELECT A, COUNT(*) FROM TABLES2 GROUP BY A DESC;</code></p></blockquote><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; <span class="keyword">SELECT</span> A, COUNT<span class="comment">(*) FROM TABLES2 GROUP BY A DESC;</span></span><br><span class="line"><span class="comment">+---+----------+</span></span><br><span class="line"><span class="comment">| A | COUNT(*)</span> |</span><br><span class="line">+---+----------+</span><br><span class="line">| <span class="number">2</span> |        <span class="number">4</span> |</span><br><span class="line">| <span class="number">1</span> |        <span class="number">1</span> |</span><br><span class="line">+---+----------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><hr><p><strong>TABLES1&amp;TABLES2-left&amp;right</strong><br><strong>将TABLES1的A,B列与TABLES2的B,C列进行以下三种连接:</strong><br><strong>将标识为a的A,B列于标识为b的C列进行等值连接</strong></p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT </span>a.A, a.<span class="keyword">B, </span><span class="keyword">b.C </span>FROM TABLES1 a INNER JOIN TABLES2 <span class="keyword">b </span>ON a.<span class="keyword">B </span>= <span class="keyword">b.B; </span></span><br><span class="line"><span class="keyword">SELECT </span>a.A, a.<span class="keyword">B, </span><span class="keyword">b.C </span>FROM TABLES1 a, TABLES2 <span class="keyword">b </span>WHERE a.<span class="keyword">B </span>= <span class="keyword">b.B;</span></span><br></pre></td></tr></table></figure><ul><li>左连接:<blockquote><p><code>SELECT a.A, a.B, b.C FROM TABLES1 a LEFT JOIN TABLES2 b ON a.B = b.B;</code></p></blockquote></li><li>右连接:<blockquote><p><code>SELECT a.A, a.B, b.C FROM TABLES1 a RIGHT JOIN TABLES2 b ON a.B = b.B;</code></p></blockquote></li></ul><p><strong>如下所示:</strong></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT a.A, a.B, b.C FROM TABLES1 a INNER JOIN TABLES2 b ON a.B = b.B; </span><br><span class="line">+---+---+---+</span><br><span class="line">|<span class="string"> A </span>|<span class="string"> B </span>|<span class="string"> C </span>|</span><br><span class="line">+---+---+---+</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4 </span>|</span><br><span class="line">+---+---+---+</span><br><span class="line">8 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT a.A, a.B, b.C FROM TABLES1 a LEFT JOIN TABLES2 b ON a.B = b.B; </span><br><span class="line">+---+---+------+</span><br><span class="line">|<span class="string"> A </span>|<span class="string"> B </span>|<span class="string"> C    </span>|</span><br><span class="line">+---+---+------+</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3    </span>|</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3    </span>|</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3    </span>|</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|<span class="string"> 3    </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4    </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4    </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4    </span>|</span><br><span class="line">|<span class="string"> 2 </span>|<span class="string"> 3 </span>|<span class="string"> 4    </span>|</span><br><span class="line">+---+---+------+</span><br><span class="line">8 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">MariaDB [TEST1]&gt; SELECT a.A, a.B, b.C FROM TABLES1 a RIGHT JOIN TABLES2 b ON a.B = b.B;</span><br><span class="line">+------+------+---+</span><br><span class="line">|<span class="string"> A    </span>|<span class="string"> B    </span>|<span class="string"> C </span>|</span><br><span class="line">+------+------+---+</span><br><span class="line">|<span class="string"> 1    </span>|<span class="string"> 2    </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 1    </span>|<span class="string"> 2    </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 1    </span>|<span class="string"> 2    </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 1    </span>|<span class="string"> 2    </span>|<span class="string"> 3 </span>|</span><br><span class="line">|<span class="string"> 2    </span>|<span class="string"> 3    </span>|<span class="string"> 4 </span>|</span><br><span class="line">|<span class="string"> 2    </span>|<span class="string"> 3    </span>|<span class="string"> 4 </span>|</span><br><span class="line">|<span class="string"> 2    </span>|<span class="string"> 3    </span>|<span class="string"> 4 </span>|</span><br><span class="line">|<span class="string"> 2    </span>|<span class="string"> 3    </span>|<span class="string"> 4 </span>|</span><br><span class="line">+------+------+---+</span><br><span class="line">8 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔-2020-2-2-13</title>
    <url>/2020/02/13/%E9%9A%8F%E7%AC%94-2020-2-2-13/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="35e7b041af35feccf90fdea794699c85ad21be03be91e25d00b008677bf27b67">0267ec72f19b8c198697a4f72870a3a82638093160e2b2cc12e4971a299433a85dd13c409b2aae5651484d0d3c6e8e0902b987088f15325ec7c717d0d75de1e753b256c489b737698fca0b9d5a77e793bd3f2273a93f134ef89f4734a31e93fd9d921a6336ccd26e7ca646754188cc95da5f35fd912dcdca95083dffc511b6d2ddd8d97f0201e6155f04c9890c0f160b70e5d071fb275f1f675cb4df014586153132f24dea11e69b2bcfe34ae86bb648c745b26c51b7e521a131a385bb3dcfe3723a7278e48f0b20da3bdab4fe24154a32dba4a1908f99bbfb08f9ca5769a61cfc14d974fc5be4235d34d34ca68fb3b7ffffe09ebcc344623ee439d811e140fdf7984e89fb012d18ba95e91a83959d67f03a3bf4c0075bc61499b601528da0519d304c6ea777ccb92b31952cab72c78d382cb75789e82f3ffffeeab75f967a63bd9e23e70882a37bebcccfdef01439c599af0e147061fea78777b6bcb67cc417e1cdfacfb6eb4e2db3bcad298d5caa2da3f43dad027d3f37a928833471c013e78d6c761a288e93db656ba47dc151d0c66ec21c2ceacd87fc007f5919ac9e53e1ccc1e63f10b879218a6ac73ebd18e8629ef274f8179e5897f68e56008b087e0030e1d9f8c549229438c05fce19c403195734b15fd4e585b6241cccc0a100947f5e8a85b5b051e37c9001ad505912df606fe610f95871e432c1ff7c8f6c55e0df42fcd5326443277d99e293a0a04281d21edd03e919172ed353d8782fd3b89e910d8d7463d7f53b63c429272f36ee62db33cc32ebc0ab1d1712a44135742eaf1e6abee8cde9b742e6b47b680a7e22d67dc25b591c4c6339233be334579d3ede18c776f0913ddd946e6719b1720fb000acd397fb3017bbdeb96ae537b06236ddb7aabbf56e7b40036bfdead07acded0b464c2cc6f57be765c8d541d4d045cdc82f68f0ceb0d09df6295833a1da66805747a65146af258fd569438ccc3136b2497c3b525196c698c66837107c4572616702a1442fc0b316f01e891a577df37d85bdd97f2c0afda7cec6b182f77b2fe2c49c3d39acb891f6d4e9f2493a87898c14c9e8d900043a4416e9796ce385e7366e52</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>web crawler-1</title>
    <url>/2020/02/13/web-crawler-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="网络爬虫的基本原理"><a href="#网络爬虫的基本原理" class="headerlink" title="网络爬虫的基本原理"></a>网络爬虫的基本原理</h3><p><strong>简述:</strong></p><ul><li>英文:web crawler/spider</li><li>用来自动浏览万维网的网络机器人</li><li>其目的一般为编纂网络索引</li><li>搜索引擎抓取的重要组成部分</li><li>爬虫的主要目的是将互联网上的网页下载到本地形成一个或联网内容的镜像内分</li><li>网络搜索引擎等站点通过爬虫软件更新自身的网站内容或其对其他网站的索引</li><li>网络爬虫可以将自己所访问的页面保存下来，以便搜索引擎事后生成索引供用户搜索</li><li>同一时间点的执行逻辑用同一语句描述</li></ul><p><strong>网络爬虫的基本结构及工作流程:</strong></p><ul><li>基本工作流程简述:</li></ul><ol><li>首选选取一部分经过挑选的种子URL</li><li>将这些种子URL放入待抓取URL队列</li><li>从待抓取URL队列中取出待抓取URL，解析其URL，并得到其主机的IP，并将URL对应的网页下载下来，存储到已下载的网页库中</li><li>同时，将这些URL放进已抓取URL队列</li><li>分析已抓取URL队列中的URL，分析其中的其他URL，并且将URL放入待抓取URL队列，从而进入下一个循环</li></ol><ul><li>逻辑简述:<blockquote><p>种子URL-&gt;待抓取URL-&gt;[已下载网页库内[读取URL，DNS解析，网页下载]]/[[已抓取URL内[将已下载URL放进已抓取URL队列]]-抽取新的URL放入待抓取URL队列-&gt;待抓取URL]<br>/符号代表同级关系，执行步骤相同</p></blockquote></li></ul><hr><ul><li>从爬虫的角度对互联网进行划分</li><li>爬虫可以将互联网页面大致划分为五个部分:</li></ul><ol><li>已下载未过期网页</li><li>已下载已过期网页: 抓取到的网页实际上是互联网内容的一个镜像与备份，互联网是动态变化的，一部分互联网上的内容已经发生了变化，这时，这部分抓取到的网页就已经过期了</li><li>待下载-&gt;若干个可知网页: 也就是待抓取URL队列中的那些页面</li><li>可知网页: 还没有抓取下来，也没有在待抓取URL队列中，但是可以通过对已抓取页面或者待抓取URL对应页面进行分析获取到的URL，认为是可知网页</li><li>不可知网页: 还有一部分网页，爬虫是无法直接抓取下载的，称为不可知网页</li></ol><hr><h3 id="抓取策略"><a href="#抓取策略" class="headerlink" title="抓取策略:"></a>抓取策略:</h3><ul><li>待抓取URL队列是构成爬虫系统中必不可失的一部分</li><li>待抓取URL队列中的URL以什么样的顺序排序，将会涉及到所选抓取页面的优先级问题</li><li>而决定这些URL排列顺序的方法，就被称为抓取策略</li></ul><hr><p><strong>几种常见的抓取策略:</strong></p><p><strong>深度优先遍历策略</strong></p><ol><li>深度优先遍历策略是指网络爬虫会从起始页开始，一个链接接一个链接的跟踪下去</li><li>处理完这条线路之后再转入下一个起始页，继续跟踪链接</li></ol><p><strong>逻辑简述:</strong></p><blockquote><p>起始页A，不同路线的链接页面B到I，链接关联:(<code>F-&gt;G，E-&gt;H-&gt;I，B，C，D</code>)</p></blockquote><ol><li><code>A-&gt;F-&gt;G</code></li><li><code>A-&gt;E-&gt;H-&gt;I</code></li><li><code>A-&gt;B</code></li><li><code>A-&gt;C</code></li><li><code>A-&gt;D</code></li></ol><hr><p><strong>宽度优先遍历策略</strong></p><p><strong>基本思路:</strong></p><ol><li>将新下载网页中发现的链接直接插入待抓取URL队列的末尾</li><li>也就是指网络爬虫会抓取起始网页中链接的所有网页</li><li>然后再选择其中的一个链接网页，继续抓取再次网页中链接的所有网页</li></ol><p><strong>逻辑简述:</strong></p><blockquote><p>起始页A，不同路线的链接页面B到I，(<code>F-&gt;G，E-&gt;H-&gt;I，B，C，D</code>)<br><code>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F，G，H，I</code></p></blockquote><hr><p><strong>反向链接数策略</strong></p><ol><li>反向链接数是指一个网页被其他网页链接指向的数量</li><li>反向链接数表示的是一个网页的内容受到其他人的推荐的程度</li><li>因此，很多时候搜索引擎的抓取系统会使用这个指标来评价网页的重要程度，从而决定不同网页的抓取先后顺序</li><li>在真实的网络环境中，由于广告链接、作弊链接的存在，反向链接数不能完全等同于所选链接重要程度</li><li>所以搜索引擎往往考虑一些可靠的反向链接数</li></ol><hr><p><strong>Partial PageRank策略</strong></p><ol><li>Partial PageRank算法借鉴了PageRank算法的思想：</li><li>对于已经下载的网页，连同待抓取URL队列中的URL，形成网页集合，计算每个页面的PageRank值</li><li>在计算完之后，将待抓取URL队列中的URL按照PageRank值的大小排列</li><li>最后按照该顺序抓取页面</li></ol><ul><li>每次抓取一个页面，就会重新计算PageRank值</li><li>一种折中方案是：每抓取K个页面后，重新计算一次PageRank值</li><li>但是这种情况还会衍生出另一个问题:对于已经下载下来的页面中分析出的链接，也就是之前提到的未知网页那一部分，暂时是没有PageRank值的</li><li>为了解决这个问题，会给这些页面一个临时的PageRank值:将这个网页所有入链传递进来的PageRank值进行汇总，这样就形成了该未知页面的PageRank值，从而参与排序</li></ul><hr><p><strong>OPIC策略策略</strong></p><ul><li>该算法实际上也是对页面进行一个重要性打分</li></ul><p><strong>基本思路:</strong></p><ol><li>在算法开始前，给所有页面一个相同的初始现金(cash)</li><li>当下载了某个页面P之后，将P的现金分摊给所有从P中分析出的链接，并且将P的现金清空</li><li>对于待抓取URL队列中的所有页面按照现金数进行排序</li></ol><hr><p><strong>大站优先策略</strong></p><p><strong>基本思路:</strong></p><ol><li>对于待抓取URL队列中的所有网页，根据所属的网站进行分类</li><li>对于待下载页面数多的网站，优先下载</li><li>这个策略也因此叫做大站优先策略</li></ol><hr><h3 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h3><p><strong>简述:</strong></p><ul><li>互联网是实时变化的，具有很强的动态性</li><li>网页更新策略主要是决定何时更新之前已经下载过的页面</li></ul><p><strong>常见的更新策略有以下三种:</strong></p><p><strong>历史参考策略</strong></p><p><strong>基本思路:</strong></p><ol><li>根据页面以往的历史更新数据，预测该页面未来何时会发生变化</li><li>一般来说，是通过泊松过程进行建模进行预测</li></ol><hr><p><strong>用户体验策略</strong></p><ul><li>索引擎针对于某个查询条件能够返回数量巨大的结果</li><li>但用户往往只关注前几页结果</li><li>所以抓取系统可以优先更新那些现实在查询结果前几页中的网页，而后再更新那些后面的网页</li><li>这种更新策略也是需要用到历史信息的</li></ul><p><strong>基本思路:</strong></p><ol><li>用户体验策略保留网页的多个历史版本</li><li>并且根据过去每次内容变化对搜索质量的影响</li><li>然后得出一个平均值，用这个值作为决定何时重新抓取的依据</li></ol><hr><p><strong>聚类抽样策略</strong></p><ul><li>前面提到的两种更新策略都有一个前提:需要网页的历史信息</li><li>这样就存在两个问题:</li></ul><ol><li>系统要是为每个系统保存多个版本的历史信息，无疑增加了很多的系统负担</li><li>要是新的网页完全没有历史信息，就无法确定更新策略</li></ol><p><strong>基本思路:</strong></p><ul><li>这种策略认为，网页具有很多属性，类似属性的网页，可以认为其更新频率也是类似的</li><li>要计算某一个类别网页的更新频率，只需要对这一类网页抽样，以他们的更新周期作为整个类别的更新周期</li></ul><p><strong>逻辑简述:</strong></p><blockquote><p>原始网页-网页聚类-&gt;[聚类一/聚类二/聚类三]-&gt;对不同类聚类分别抽样-&gt;分别确定更新周期</p></blockquote><hr><h3 id="分布式抓取结构"><a href="#分布式抓取结构" class="headerlink" title="分布式抓取结构"></a>分布式抓取结构</h3><p><strong>概述:</strong></p><ul><li>通常的抓取系统需要面对的是整个互联网上数以亿计的网页</li><li>因此单个抓取程序不可能完成这样的任务，所以往往需要多个抓取程序一起来处理</li><li>一般来说抓取系统往往是一个分布式的三层结构:1.网页，2.数据中心，3.网络爬虫</li></ul><p><strong>逻辑简述:</strong></p><blockquote><p><code>[原始网页&lt;-网络爬虫-&gt;[数据中心(远端服务器)]]&lt;-[所有的数据中心(Global)]</code></p></blockquote><ol><li>不同的数据中心分布在不同的地理位置</li><li>在每个数据中心内有若干台抓取服务器</li><li>而每台抓取服务器上可能部署了若干套爬虫程序</li><li>这就构成了一个基本的分布式抓取系统</li></ol><hr><ul><li>对于一个数据中心内的不同抓取服务器，有不同的协同工作方式</li><li>协同工作的方式有以下几种:</li></ul><ol><li>主从式(Master-Slave)</li></ol><p><strong>逻辑(同一时间点)简述:</strong></p><blockquote><p><code>[待抓取URL队列(若干数量)]-&gt;[(远端服务器)Master-&gt;Slave1/Slave2/Slave3]&lt;-下载-原始网页</code></p></blockquote><ol><li>对于主从式而言，有一台专门的Master服务器来维护待抓取URL队列</li><li>它负责每次将URL分发到不同的Slave服务器，而Slave服务器则负责实际的网页下载工作</li><li>Master服务器除了维护待抓取URL队列以及分发URL之外，还要负责调解各个Slave服务器的负载情况</li><li>以免某些Slave服务器过于清闲或者劳累</li><li>这种模式下，Master往往容易成为系统瓶颈</li></ol><hr><ol start="2"><li>对等式(Peer to Peer)<blockquote><p><code>[待抓取URL队列(若干数量)]-&gt;Hash-&gt;[(抓取服务器)server0/server1/server2]&lt;-原始网页</code></p></blockquote></li></ol><ul><li>在这种模式下，所有的抓取服务器在分工上没有不同</li></ul><ol><li>每一台抓取服务器都可以从待抓取在URL队列中获取URL</li><li>然后对该URL的主域名的hash值H</li><li>再计算H mod m(其中m是服务器的数量，此时设m为3)</li><li>最后计算得到的数就是处理该URL的主机编号</li></ol><p><strong>举例:</strong></p><ul><li><p>有server0，server1，server2分别为0，1，2号服务器</p></li><li><p>假设对于URL-<code>www.baidu.com</code>，计算器<code>hash</code>值<code>H=8</code>，<code>m=3</code>，则<code>H mod m=2</code>，因此由编号为2的服务器进行该链接的抓取</p></li><li><p>假设这时候是0号服务器拿到这个URL，那么它将该URL转给服务器2，由服务器2进行抓取</p></li><li><p>这种模式有一个问题，当有一台服务器死机或者添加新的服务器，那么所有URL的哈希求余的结果就都要变化</p></li><li><p>也就是说，这种方式的扩展性不佳</p></li><li><p>针对这种情况，又有一种改进方案被提出来</p></li><li><p>这种改进的方案是一致性哈希法来确定服务器分工</p></li><li><p>其基本结构流程:</p></li></ul><ol><li>一致性哈希将URL的主域名进行哈希运算，映射为一个范围在<code>0-2^32</code>之间的某个数</li><li>而将这个范围平均的分配给m台服务器，根据URL主域名哈希运算的值所处的范围判断是哪台服务器来进行抓取</li><li>如果某一台服务器出现问题，那么本该由该服务器负责的网页则按照顺时针顺延，由下一台服务器进行抓取</li><li>如此一来，即便某台服务器出现问题，也不会影响其他服务器的工作</li></ol><p><strong>逻辑简述:</strong></p><blockquote><p><code>URL-&gt;hash-&gt;1,2,3,4&lt;-hash&lt;-URL</code></p></blockquote><hr><p><strong>相关概念:</strong></p><ul><li>搜索引擎</li><li>网络爬虫</li><li>爬虫策略/抓取策略</li><li>爬虫，索引，检索，排序</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-2</title>
    <url>/2020/02/13/SQL-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="SQL-GURD"><a href="#SQL-GURD" class="headerlink" title="SQL-GURD"></a>SQL-GURD</h3><ul><li>增/删/改/查</li></ul><p><strong>增:</strong></p><ul><li>INSERT INTO 语句</li><li>基本插入语句</li><li>语法一(不指定列名):<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure></li><li>语法二(指定列名):<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">INSERT</span></span> INTO table_name (column1,column2,column3,...)</span><br><span class="line"><span class="function"><span class="title">VALUES</span></span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>删:</strong></p><ul><li>DELETE 语句</li><li>基本删除语句</li><li>语法:<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> some_column=some_value;</span><br></pre></td></tr></table></figure></li><li>如果未对WHERE语句进行规定，所有的记录都会被删除</li></ul><hr><p><strong>改:</strong></p><ul><li>UPDATE 语句</li><li>基本修改(更新)语句</li><li>语法:<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line"><span class="builtin-name">SET</span> <span class="attribute">column1</span>=value1,column2=value2,...</span><br><span class="line">WHERE <span class="attribute">some_column</span>=some_value;</span><br></pre></td></tr></table></figure><blockquote><p>uptate 表名<br>set 列名=指定值…<br>where 过滤规则</p></blockquote></li><li>如果未对WHERE语句进行规定，所有的记录都会被更新</li></ul><hr><p><strong>查:</strong></p><ul><li><p>SELECT 语句</p></li><li><p>基本查询语句</p></li><li><p>语法:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">column_name</span>,<span class="built_in">column_name</span> </span><br><span class="line"><span class="keyword">FROM</span> <span class="built_in">table_name</span>;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">SELECT</span> 表名 <span class="keyword">FROM</span> 表内指定列</span><br></pre></td></tr></table></figure></li><li><p>DISTINCT 关键字</p></li><li><p>常用于<code>SELECT DISTINCT</code></p></li><li><p>返回所选被查询列中唯一不同(distinct)的值(筛选列内重复值并进行排除)</p></li><li><p>语法:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="built_in">column_name</span>,<span class="built_in">column_name</span> </span><br><span class="line"><span class="keyword">FROM</span> <span class="built_in">table_name</span>;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句:"></a>条件语句:</h3><p><strong>WHERE 子句</strong></p><ul><li>用于配置所选执行语句的过滤条件</li><li>语法:<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">column_name</span>,<span class="built_in">column_name</span> </span><br><span class="line"><span class="keyword">FROM</span> <span class="built_in">table_name</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">column_name</span> <span class="keyword">operator</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure></li><li>WHERE子句中的运算符:</li></ul><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt;,!=</td><td align="left">不等于</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td></tr><tr><td align="left">BETWEEN</td><td align="left">在某个范围内</td></tr><tr><td align="left">LIKE</td><td align="left">搜索某种模式</td></tr><tr><td align="left">IN</td><td align="left">指定针对某个列的多个可能值</td></tr></tbody></table><hr><p><strong>LIKE 操作符</strong></p><ul><li>用于在WHERE子句中搜索列中搜索列的指定模式</li><li>语法:<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">column_name</span>(s)</span><br><span class="line"><span class="keyword">FROM</span> <span class="built_in">table_name</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">column_name</span> <span class="keyword">LIKE</span> pattern;</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>SQL函数参考:</strong></p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">AVG</td><td align="left">平均值</td></tr><tr><td align="left">COUNT</td><td align="left">计数(不含Null)</td></tr><tr><td align="left">FIRST</td><td align="left">第一个记录的值</td></tr><tr><td align="left">MAX</td><td align="left">最大值</td></tr><tr><td align="left">MIN</td><td align="left">最小值</td></tr><tr><td align="left">STDEV</td><td align="left">样本标准差</td></tr><tr><td align="left">STDEVP</td><td align="left">总体标准差</td></tr><tr><td align="left">SUM</td><td align="left">求和</td></tr><tr><td align="left">VAR</td><td align="left">样本方差</td></tr><tr><td align="left">VARP</td><td align="left">总体方差</td></tr><tr><td align="left">UCASE</td><td align="left">转化为全大写字母</td></tr><tr><td align="left">LCASE</td><td align="left">转化为全小写字母</td></tr><tr><td align="left">MID</td><td align="left">取中值</td></tr><tr><td align="left">LEN</td><td align="left">计算字符串长度</td></tr><tr><td align="left">INSTR</td><td align="left">获得子字符串在母字符串的起始位置</td></tr><tr><td align="left">LEFT</td><td align="left">取字符串左边子串</td></tr><tr><td align="left">RIGHT</td><td align="left">取字符串右边子串</td></tr><tr><td align="left">ROUND</td><td align="left">数值四舍五入取整</td></tr><tr><td align="left">MOD</td><td align="left">取余</td></tr><tr><td align="left">NOW</td><td align="left">获得当前时间的值</td></tr><tr><td align="left">FORMAT</td><td align="left">字符串格式化</td></tr><tr><td align="left">DATEDIFF</td><td align="left">获得两个时间的差值</td></tr></tbody></table><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-1</title>
    <url>/2020/02/12/SQL-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="结构化查询语言-SQL-1"><a href="#结构化查询语言-SQL-1" class="headerlink" title="结构化查询语言-SQL-1"></a>结构化查询语言-SQL-1</h3><p><strong>概述:</strong></p><ul><li>全称<code>Structured Query Language</code></li><li>是一种特定目的编程语言，用于管理关系型数据库管理系统(RDBMSR)，或在其中进行流处理</li><li>RDBMS全称<code>Relational Database Management System</code></li><li>SQL是高级的非过程化编程语言</li><li>允许用户在高层数据结构上工作</li><li>SQL同时也是数据库文件格式的扩展名</li><li>SQL基于关系代数和元组关系演算，包括一个数据定义语言和数据操纵语言</li><li>SQL在很大程度上是一种声明式编程(4GL)，但是其也含有过程式编程的元素</li><li>1986年的<code>SQL-86</code>/<code>SQL-87</code>是ANSI对于SQL的首次标准化</li><li>2016年的<code>SQL:2016</code>是现阶段最后一次标准化的更新</li><li>SQL的核心大致可分为DQL,DDL,DML,DCL四大部分</li><li>本篇只进行基本的体系整理与概念认识与理解</li></ul><hr><p><strong>SQL语言内存在要素简述:</strong></p><blockquote><p><code>子句</code>:基本构成条件，语句和查询的组成部分<br><code>语句</code>:由子句等任何其他元素构成的执行逻辑<br><code>查询</code>:基于特定条件检索数据<br><code>谓词</code>:限制语句和查询结果与控制流程<br><code>表达式</code>:用于产生任何标量值，标量值也可由列和行的数据库表构成<br><code>;</code>-<code>分号</code>:语句结束标志(终结符)，为SQL标准所定义<br>空格在SQL语句和查询中会被忽略</p></blockquote><hr><p><strong>SQL总体的构成包含五个部分:</strong></p><ul><li>数据查询语言(Data Query Language，DQL)</li><li>数据定义语言(Data Definition Language，DDL)</li><li>数据操控语言(Data Manipulation Language, DML)</li><li>数据控制语言(Data Control Language, DCL)</li><li>事务控制语言</li></ul><hr><p><strong>SQL语言构成模块简述:</strong></p><ol><li>DDL-数据定义语言</li></ol><ul><li>SQL语言集中负责数据结构定义与数据库对象定义的语言</li><li>主要由<code>CREATE</code>,<code>ALTER</code>,<code>DROP</code>(<code>create</code>,<code>alter</code>,<code>drop</code>)三个语法构成</li><li>SQL指令子的集之一</li></ul><ol start="2"><li>DML-数据操纵语言</li></ol><ul><li>SQL中用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句</li><li>以<code>INSERT</code>,<code>UPDATE</code>,<code>DELETE</code>(<code>insert</code>,<code>update</code>,<code>delete</code>)作为核心</li><li>分别代表创建，修改，删除</li><li>再加上SQL的<code>SELECT</code>(<code>select</code>查询)语句(属于DQL)</li><li>从而称其为<code>CRUD</code>即为<code>增删改查</code></li><li>SQL指令集的子集之一</li></ul><ol start="3"><li>DCL-数据控制语言</li></ol><ul><li>SQL中可对数据访问权进行控制的指令</li><li>由GRANT和REVOKE两个指令组成</li><li>SQL指令集的子集之一</li></ul><ol start="4"><li>DQL-数据查询语言</li></ol><ul><li>DQL的主要功能是查询数据</li><li>SQL中用于从数据库或信息系统中查询数据的计算机语言</li><li>由<code>SELECT</code>,<code>FROM</code>,<code>WHERE</code>,<code>GROUP BY</code>和<code>ORDER BY</code>这些语法构成</li><li>其核心指令为<code>SELECT</code>(<code>select</code>)</li></ul><hr><p><strong>其他概念:</strong></p><ul><li>语句，子句，关键字，运算符，操作符</li><li>通配符，连接，别名，约束，NULL，数据类型(通用/DB)</li></ul><hr><p><strong>参考:</strong></p><ul><li>SQL标准<a href="https://web.archive.org/web/20100304063252/http://structedtext.appspot.com/db/sql.html" target="_blank" rel="noopener">参考资料/CN</a><blockquote><p><code>https://web.archive.org/web/20100304063252/http://structedtext.appspot.com/db/sql.html</code></p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>DBMS-1</title>
    <url>/2020/02/12/DBMS-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="DBMS-1"><a href="#DBMS-1" class="headerlink" title="DBMS-1"></a>DBMS-1</h3><p><strong>概述:</strong></p><ul><li>本篇注重对知识体系的规划与系别的整理</li><li>别称:数据库管理系统(Database Management System)</li><li>简称:DBMS</li><li>一个数据库由多个表空间(Tablespace)构成</li><li>用于将数据以一定方式存储到同一个数据库内，能同时予以多个用户共享</li><li>让应用程序的数据集合彼此独立，并且具有尽可能小的冗余度</li><li>数据库管理系统指的是为管理数据库而设计的电脑软件(程序)系统</li><li>大多数具有存储，截取，安全保证，备份等基础功能</li><li>几乎所有的数据库管理系统都配备了一个开放式数据库连接（ODBC）驱动程序，令各个数据库之间得以互相集成</li><li>不涉及结构化查询语言/数据查询语言(SQL)相关内容</li></ul><hr><ul><li>数据库的类别一览</li></ul><table><thead><tr><th align="left">类别</th><th align="left">相关(与其相结合)</th></tr></thead><tbody><tr><td align="left">分布式数据库</td><td align="left">分布处理技术</td></tr><tr><td align="left">并行数据库</td><td align="left">并行处理技术</td></tr><tr><td align="left">演绎数据库</td><td align="left">人工智能</td></tr><tr><td align="left">多媒体数据库</td><td align="left">多媒体技术</td></tr><tr><td align="left">特定领域数据库</td><td align="left">统计/空间/工程/地理数据库等等</td></tr><tr><td align="left">关系型数据库</td><td align="left">MySQL,Oracle,postgreSQL等</td></tr><tr><td align="left">非关系型数据库</td><td align="left">NoSQL/Redis,MongoDB等</td></tr></tbody></table><hr><ul><li>关系型数据库简介<blockquote><p>MySQL<br>MariaDB (MySQL的代替品)<br>Percona Server (MySQL的代替品)<br>PostgreSQL<br>Microsoft Access<br>Microsoft SQL Server<br>Google Fusion Tables<br>FileMaker<br>Oracle数据库<br>Sybase<br>dBASE<br>Clipper<br>FoxPro<br>foshub</p></blockquote></li></ul><hr><ul><li>非关系型数据库(NoSQL)简介</li><li>NoSQL是对不同于传统的关系数据库的数据库管理系统的统称<blockquote><p>BigTable (Google)<br>Cassandra<br>MongoDB<br>CouchDB<br>Redis</p></blockquote></li></ul><hr><ul><li>键值数据库简介<blockquote><p>Apache Cassandra(为Facebook所使用)高度可扩展<br>Dynamo<br>LevelDB(Google)</p></blockquote></li></ul><hr><p><strong>数据库关系模型简述(数据结构):</strong></p><ol><li>对象模型</li></ol><ul><li>层次-层次模型<blockquote><p><code>Hierarchical database model</code><br>轻量级数据访问协议<br>用树形结构描述实体及其之间关系的数据模型</p></blockquote></li></ul><ol start="2"><li><p>网状-网状模型</p><blockquote><p><code>Network model</code><br>用于大型数据储存<br>由美国的<code>查尔斯·巴赫曼(Charles William Bachman)</code>发明</p></blockquote></li><li><p>平面-平面模型</p></li></ol><ul><li><code>Flat-file database</code></li><li>表格模型，一般在形式上是一个二维数组</li><li>如表格模型数据Excel</li><li>不同于平面文件系统<code>Flat file system</code></li></ul><ol start="4"><li><p>关系-关系模型</p><blockquote><p><code>Relational model</code><br>基于谓词逻辑和集合论的一种数据模型</p></blockquote></li><li><p>ER模型-增强实体关系模型</p><blockquote><p><code>Entity-relationship model</code><br>概念数据模型的高层描述所使用的数据模型或模式图</p></blockquote></li><li><p>图-图数据库</p><blockquote><p><code>graph database,GDB</code><br>使用图结构进行语义查询的数据库，它使用节点、边和属性来表示和存储数据<br>该系统的关键概念是图，它直接将存储中的数据项，与数据节点和节点间表示关系的边的集合相关联</p></blockquote></li><li><p>面向对象-面向对象模型</p><blockquote><p>面向对象数据库<br>对象数据库的数据库管理系统被称为<code>ODBMS</code>或<code>OODBMS</code><br>以对象形式表示信息的数据库</p></blockquote></li><li><p>实体-属性-值</p><blockquote><p><code>Entity–attribute–value model,EAV</code><br>EAV也称为对象属性值模型，垂直数据库模型和开放式架构<br>是一种数据模型，以节省空间的方式对实体进行编码，其中可以用来描述实体的属性(属性，参数)的数量可能很大，但是实际适用于给定的实体是相对适度的<br>这样的实体对应于稀疏矩阵的数学概念</p></blockquote></li><li><p>空间/纬度建模</p><blockquote><p><code>Dimensional modeling,DM</code></p></blockquote></li><li><p>半结构化模型</p></li></ol><hr><p><strong>其他模型:</strong></p><ol start="11"><li><p>关联-数据关联模型</p><blockquote><p><code>Associative model of data</code><br>数据的关联模型是一个数据模型的数据库系统</p></blockquote></li><li><p>多维-联机分析处理</p><blockquote><p><code>Online analytical processing,OLAP</code><br>是计算机技术中快速解决多维分析问题(MDA)的一种方法</p></blockquote></li><li><p>数组-矩阵数据库管理系统</p><blockquote><p><code>Array DBMS</code><br><code>Array database management systems</code>(array DBMSs)<br>矩阵数据库管理系统(Array DBMS)专门为矩阵(也称为栅格数据)提供数据库服务</p></blockquote></li><li><p>语义数据模型</p><blockquote><p><code>Semantic data model,SDM</code><br>基于高级语义的数据库描述和数据库的结构形式化(数据库模型)</p></blockquote></li><li><p>星模式</p><blockquote><p><code>Star schema</code><br>在计算中，星形模式是数据集市模式的最简单样式，并且是最广泛用于开发数据仓库和维度数据集市的方法</p></blockquote></li><li><p>XML数据库</p><blockquote><p><code>XML database</code><br>数据持久性软件系统，该系统允许数据被指定，有时存储在XML格式</p></blockquote></li></ol><p><strong>关于实现方法这里不做阐述</strong></p><hr><p><strong>架构:</strong></p><ul><li>数据库的架构可以大致区分为三个概括层次:内层,概念层和外层<blockquote><p>内层:最接近实际存储体，亦即有关数据的实际存储方式<br>外层:最接近用户，即有关个别用户观看数据的方式<br>概念层:介于两者之间的间接层</p></blockquote></li></ul><hr><p><strong>数据库事务</strong></p><ul><li>事务(transaction)包含一组数据库操作的逻辑工作单元，在事务中包含的数据库操作是不可分割的整体</li><li>这些操作要么一起做，要么一起回滚(Roll Back)到执行前的状态</li><li>事务的ACID特性：<blockquote><p>基元性 (atomicity)<br>一致性 (consistency)<br>隔离性 (isolation)<br>持续性 (durability)</p></blockquote></li><li>事务的并发性是指多个事务的并行操作轮流交叉运行，事务的并发可能会访问和存储不正确的数据，破坏交易的隔离性和数据库的一致性</li></ul><hr><ul><li>网状模型-网状数据模型的数据结构</li><li>满足下面两个条件的基本层次联系的集合为网状模型</li></ul><ol><li>允许一个以上的结点无双亲</li><li>一个结点可以有多于一个的双亲</li></ol><hr><p><strong>其他:</strong></p><ul><li><p>数据库管理系统是指管理数据库的程序</p></li><li><p>相关概念简述:</p><blockquote><p>数据库存储结构(Database storage structures)<br>数据模型(data model)<br>数据库模型(database model)<br>关系模型(Relational model)<br>数据结构(data structure)<br>数据类型</p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>协议概述-1</title>
    <url>/2020/02/12/%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h1 id="协议概述-1"><a href="#协议概述-1" class="headerlink" title="协议概述-1"></a>协议概述-1</h1><h3 id="TLS-Transport-Layer-Security"><a href="#TLS-Transport-Layer-Security" class="headerlink" title="TLS(Transport Layer Security)"></a>TLS(Transport Layer Security)</h3><p><strong>传输层安全协议</strong></p><p><strong>概要:</strong></p><ul><li>传输层协议</li><li>互联网上保密通信的工业标准协议</li><li>目的是为互联网通信提供安全及数据完整性保障</li><li>前身为安全套接层(Secure Sockets Layer)-SSL</li><li>IETF(互联网工程用户组)将SSL进行标准化</li><li>传输层安全协议使用X.509认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥(Session key)</li></ul><p><strong>简述:</strong></p><ul><li>TLS协议采用C/S架构，以便在两个应用程序间透过网络创建安全的传输通道，从而防止数据传输时受到窃听或篡改</li><li>TLS与高层的应用层协议(HTTP,FTP,Telnet等)无耦合</li><li>所以应用层协议能透明的运行在TLS协议之上，由TLS协议进行创建加密信道需要的协商和认证</li><li>应用层协议传送的数据在通过TLS协议时都会被加密，从而达到保证通信的私密性</li></ul><p><strong>逻辑:</strong></p><ul><li>TLS协议是可选的，必须配置客户端和服务器才能使用</li><li>主要有两种方式实现这一目标:<blockquote><p>一个是使用统一的TLS协议端口(例如:用于HTTPS的端口443)<br>另一个是客户端请求服务器连接到TLS时使用特定的协议机制</p></blockquote></li><li>一旦客户端和服务器都同意使用TLS协议，他们通过使用一个握手过程协商出一个有状态的连接以传输数据</li><li>通过握手，客户端和服务器协商各种参数用于创建安全连接，握手过程:</li></ul><ol><li>当客户端连接到支持TLS协议的服务器要求创建安全连接并列出了受支持的密码组合（加密密码算法和加密哈希函数），握手开始</li><li>服务器从该列表中决定加密和散列函数，并通知客户端</li><li>服务器发回其数字证书，此证书通常包含服务器的名称、受信任的证书颁发机构（CA）和服务器的公钥</li><li>客户端确认其颁发的证书的有效性</li><li>为了生成会话密钥用于安全连接，客户端使用服务器的公钥加密随机生成的密钥，并将其发送到服务器，只有服务器才能使用自己的私钥解密</li><li>利用随机数，双方生成用于加密和解密的对称密钥</li><li>这就是TLS协议的握手，握手完毕后的连接是安全的，直到连接（被）关闭</li><li>如果上述任何一个步骤失败，TLS握手过程就会失败，并且断开所有的连接</li></ol><h3 id="SSL-Secure-Sockets-Layer"><a href="#SSL-Secure-Sockets-Layer" class="headerlink" title="SSL(Secure Sockets Layer)"></a>SSL(Secure Sockets Layer)</h3><p><strong>安全套接层</strong></p><p><strong>概述:</strong></p><ul><li>SSL是最初是网景公司Netscape用于对HTTPS协议进行加密而退出的</li><li>SSL包含记录层(Record Layer)和传输层，记录层协议确定传输层数据的封装格式</li></ul><hr><h3 id="SSH-Secure-Shell"><a href="#SSH-Secure-Shell" class="headerlink" title="SSH(Secure Shell)"></a>SSH(Secure Shell)</h3><p><strong>安全外壳协议</strong></p><p><strong>概述:</strong></p><ul><li>网络层协议</li><li>是一种加密的网络传输协议</li><li>可在不安全的网络中为网络服务提供安全的传输环境</li><li>任何网络服务都可以通过SSH实现安全传输</li><li>在设计上，SSH是Telnet和非安全shell的替代品，而Telnet和Berkeley rlogin、rsh、rexec等协议采用明文传输，使用不可靠的密码，容易遭到监听、嗅探和中间人攻击</li></ul><p><strong>简述:</strong></p><ul><li>SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接</li><li>SSH最常见的用途是远程登录系统，通常利用SSH来传输命令行界面和远程执行命令</li><li>SSH旨在保证非安全网络环境（例如互联网）中信息加密完整可靠</li><li>SSH以非对称加密实现身份验证</li><li>SSH协议有两个主要版本，分别是SSH-1和SSH-2</li><li>SSH的经典用途是登录到远程电脑中执行命令</li><li>SSH也支持隧道协议、端口映射和X11连接。借助SFTP或SCP协议，SSH还可以传输文件</li><li>SSH使用客户端-服务器模型，标准端口为22</li></ul><p><strong>SSH协议框架中最主要的部分是三个协议:</strong></p><ul><li><p>传输层协议(The Transport Layer Protocol):传输层协议提供服务器认证，数据机密性，信息完整性等的支持</p></li><li><p>用户认证协议(The User Authentication Protocol):用户认证协议为服务器提供客户端的身份鉴别</p></li><li><p>连接协议(The Connection Protocol):连接协议将加密的信息隧道复用成若干个逻辑通道，提供给更高层的应用协议使用</p></li><li><p>同时还有为许多高层的网络安全应用协议提供扩展的支持</p></li><li><p>各种高层应用协议可以相对地独立于SSH基本体系之外，并依靠这个基本框架，通过连接协议使用SSH的安全机制</p></li></ul><hr><h3 id="PGP-Pretty-Good-Privacy"><a href="#PGP-Pretty-Good-Privacy" class="headerlink" title="PGP(Pretty Good Privacy)"></a>PGP(Pretty Good Privacy)</h3><p><strong>优良保密协议</strong></p><p><strong>概述:</strong></p><ul><li>是一套用于讯息加密、验证的应用程序，采用IDEA的散列算法作为加密和验证之用</li><li>1997年7月，PGP Inc.与齐默尔曼同意IETF制定一项公开的互联网标准，称作OpenPGP，任何支持这一标准的程序也被允许称作OpenPGP</li><li>PGP及其同类产品均遵守OpenPGP数据加解密标准<a href="https://tools.ietf.org/html/rfc4880" target="_blank" rel="noopener">RFC 4880</a><blockquote><p><code>https://tools.ietf.org/html/rfc4880</code></p></blockquote></li><li>官网<a href="https://web.archive.org/web/20041230152556/http://www.pgp.com/" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://web.archive.org/web/20041230152556/http://www.pgp.com/</code></p></blockquote></li></ul><hr><h3 id="IPsec-Internet-Protocol-Security"><a href="#IPsec-Internet-Protocol-Security" class="headerlink" title="IPsec(Internet Protocol Security)"></a>IPsec(Internet Protocol Security)</h3><p><strong>互联网安全协议</strong></p><p><strong>概述:</strong></p><ul><li>一个协议包，透过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议族(一些相互关联的协议的集合)</li></ul><p><strong>IPsec主要由以下协议组成</strong></p><ol><li>认证头(AH)，为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护</li><li>封装安全载荷(ESP)，提供机密性、数据源认证、无连接完整性、防重放和有限的传输流(traffic-flow)机密性</li><li>安全关联(SA)，提供算法和数据包，提供AH、ESP操作所需的参数</li></ol><hr><p><strong>其他</strong></p><ul><li><p>密码学无政府主义(Crypto-anarchism)</p></li><li><p>加密无政府<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%97%A0%E6%94%BF%E5%BA%9C%E4%B8%BB%E4%B9%89" target="_blank" rel="noopener">跳转至中文维基</a><br><code>https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%97%A0%E6%94%BF%E5%BA%9C%E4%B8%BB%E4%B9%89</code></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Encryption&amp;Decryption</title>
    <url>/2020/02/12/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h1 id="加密-解密-类型与算法概述"><a href="#加密-解密-类型与算法概述" class="headerlink" title="加密/解密-类型与算法概述"></a>加密/解密-类型与算法概述</h1><ul><li>整理范围为现代密码学中的密码学算法</li><li>主要注重于对各种加密算法的浅层了解，与基本使用</li><li>对于算法本质的刨析这里先不做阐述</li><li>对于加密也先不做阐述</li></ul><h2 id="对称密钥密码学"><a href="#对称密钥密码学" class="headerlink" title="对称密钥密码学"></a>对称密钥密码学</h2><p><strong>概述:</strong></p><ul><li>[Symmetric-key algorithm]</li><li>别称:对称加密，对称密钥加密，对称密钥算法</li><li>别称:私钥加密，共享密钥加密</li></ul><p><strong>定义:</strong></p><ul><li>加密和解密时使用相同的密钥</li><li>或者使用两个可以简单地进行互相推算的密钥</li><li>多用于维持多个成员之中的秘密通信</li></ul><p><strong>常用的对称加密算法:</strong></p><ul><li>DES(数据加密标准)</li><li>3DES</li><li>AES(高端加密标准)</li><li>Blowfish</li><li>IDEA</li><li>RC5(分组加密算法)</li><li>RC6</li></ul><hr><h3 id="分组加密"><a href="#分组加密" class="headerlink" title="分组加密"></a>分组加密</h3><p><strong>概述:</strong></p><ul><li>[Block cipher]</li><li>别称:分组密码，分块加密，块密码</li><li>属于一种对称加密算法</li><li>DES是现代分组加密设计的基础思想</li><li>IBM在20世纪70年代基于<code>Horst Feistel</code>工作完成的<code>Lucifer</code>被客观认为是第一个现代分组密码</li><li>分组密码取用明文的一个区块和密钥，输出相同大小的密文区块</li><li>DES和AES是美国联邦政府核定的分组密码标准(AES将取代DES)</li></ul><p><strong>定义:</strong></p><ul><li>先将明文分成多个等长的模块(blocak)，然后使用确定的算法和对称密钥对每组分别进行加密与解密</li></ul><hr><h3 id="流加密"><a href="#流加密" class="headerlink" title="流加密"></a>流加密</h3><p><strong>概述:</strong></p><ul><li>[Stream cipher]</li><li>别称:数据流加密，流密码</li><li>属于一种对称加密算法</li><li>该算法解决了对称加密完善保密性(perfect secrecy)的实际操作困难</li><li>RC4是流加密的实现</li><li>相对于区块加密，制造一段任意长的密钥原料，与明文依比特或字符结合，类似一次一密密码本(one-time pad)，输出的流根据加密时的内部状态而定</li><li>输出的流根据加密时的内部状态而定</li></ul><p><strong>定义:</strong></p><ul><li>先加密和解密双方使用相同伪随机加密数据流(pseudo-random stream)作为密钥</li><li>然后让明文数据每次与密钥数据流顺次对应加密，从而得到密文数据流</li><li>实践中数据通常是一个位(bit)并用异或(xor)操作加密</li></ul><hr><h2 id="非对称密钥密码学"><a href="#非对称密钥密码学" class="headerlink" title="非对称密钥密码学"></a>非对称密钥密码学</h2><p><strong>概述:</strong></p><ul><li>别称:公开密钥密码学 [Public-key cryptography]</li><li>别称:非对密钥码密码学 [Asymmetric cryptography]</li><li>别称:公开密钥加密算法，公钥密码学，非对称式密码学</li></ul><p><strong>定义:</strong></p><ul><li>拥有两个密钥，一个公开密钥，一个私有密钥，前者加密，后者解密</li><li>使用其中任一密钥用于加密，另一个则用于解密</li><li>经过密钥加密的密文只能通过对应的另一个密钥进行解密才能得到原文</li><li>曾用于加密的密钥也不能对其加密过的数据进行解密</li><li>因此加密和解密需要两个不同且互相对应的密钥，所以被称为非对称加密</li><li>不同于加密和解密都使用同一个密钥的对称加密</li><li>虽然这两个密钥于数学上相关，但依旧不同通过其中一个密钥来计算出另外一个密钥</li><li>因此其中一个可以公开，称为公钥，可以任意发布</li><li>不公开的密钥为私钥</li></ul><p><strong>简述:</strong></p><ol><li>加密过程d(c(x))=x</li><li>主机A撰写未加密明文x</li><li>主机B通过[密码学安全伪随机数生成器]生成一对密钥，其中一个公钥为c，另一个作为私钥d</li><li>而主机B要做的就是向主机A发送公钥c，即便任何主机于中间窃听到c也没关系</li><li>主机A用公钥c对明文x进行加密，得到密文c(x)</li><li>此时主机A向主机B发送密文c(x)</li><li>主机B在收到密文c(x)后，使用私钥d对密文c(x)进行解密d(c(x))，得到明文x</li><li>此时如果主机A没有私钥d时，它将无法透过主机A的公钥c和密文c(x)重新获得原文x</li></ol><hr><h2 id="密码散列函数"><a href="#密码散列函数" class="headerlink" title="密码散列函数"></a>密码散列函数</h2><p><strong>概述:</strong></p><ul><li>[Cryptographic hash function]</li><li>别称:加密散列函数，散列算法，哈希函数(hash)，消息摘要函数，杂凑函数</li><li>是散列函数(hash function)的一种</li><li>是一种单向函数(单向散列算法)</li><li>不一定使用到密钥，但和许多重要的密码算法相关</li><li>常用于数字签名/公钥数字签名(digital signature)</li><li>应用于<code>MD5</code>,<code>SHA-1</code>,<code>SHA-2</code>,<code>SHA-3/Keccak</code></li><li>数字签名标准内的数字签名算法</li><li>它将输入数据(通常是一整份文件)输出成较短的固定长度散列值，这个过程是单向的，逆向操作难以完成，而且碰撞(两个不同的输入产生相同的散列值)发生的几率非常小</li><li>消息认证码或押码(Message authentication codes, MACs)很类似密码散列函数，除了接收方额外使用秘密密钥来认证散列值</li></ul><h3 id="SHA类密码散列函数"><a href="#SHA类密码散列函数" class="headerlink" title="SHA类密码散列函数"></a>SHA类密码散列函数</h3><p><strong>概述:</strong></p><ul><li>[Secure Hash Algorithm]，缩写为SHA，常用于特指一整个密码散列函数系列</li><li>别称:安全散列算法，安全哈希算法</li><li>由FIPS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>认证的安全散列算法</li><li>由美国国家安全局(NSA)所设计</li><li>由美国国家标准与技术研究院(NIST)发布</li><li>是一种密码散列函数</li><li>用于计算出一个数字消息所对应到的，长度固定的字符串(又称信息摘要)的算法</li></ul><p><strong>系列成员:</strong></p><ul><li>SHA系列的五个算法:<blockquote><p><code>SHA-1,SHA-224,SHA-256,SHA-384,SHA-521</code></p></blockquote></li><li><code>SHA-256</code>到<code>SHA-512</code>有时被并称为<code>SHA-2</code></li><li><code>SHA-1</code>在许多安全协议中广为使用</li><li>包括<code>TLS</code>,<code>SSL</code>,<code>PGP</code>,<code>SSH</code>,<code>S/MIME</code>,<code>IPsec</code></li><li>最初的算法于1993年发布<code>SHA-0</code></li><li>也可称为[安全杂凑标准(secure hash standard)，<code>FIPS PUB 180</code></li><li>NSA于1995年发布<code>SHA-0</code>修订版本<code>FIPS PUB 180-1</code>(SHA-1)</li><li>最新的标准是FIPS PUB 180-3于2008年更新</li><li>规定了SHA-1，SHA-224，SHA-256，SHA-384，和SHA-512这几种单向散列算法</li><li><code>SHA-1</code>，<code>SHA-224</code>和<code>SHA-256</code>适用于长度不超过<code>2^64</code>二进制位的消息</li><li><code>SHA-384</code>和<code>SHA-512</code>适用于长度不超过<code>2^128</code>二进制位的消息</li></ul><p><strong>简述:</strong></p><ul><li>思想是接收一段明文，然后以一种不可逆的方式将它转换成一段(通常更小)的密文</li><li>或称为</li><li>取一串预映射或信息(输入码)，并将它们转化为长度较短，位数固定的输出序列</li><li>即散列值 也可以称为信息摘要或信息认证码 的过程</li></ul><p><strong>散列算法概述:</strong></p><ul><li>散列是信息的提炼，通常其长度要比原信息小的多，且为一个固定长度</li><li>加密性强的散列一定是不可逆的，所以说通过散列的结构将无法退出任何部分的原始信息</li><li>任何输出信息的变化，哪怕仅一位，都将导致散列结果的明显变化，即为雪崩效应</li><li>散列还应该是防冲突的，即找不出具有相同散列结果的两条信息，具有这些特性的散列结果就可以用于验证信息是否被修改</li><li>单向散列函数一般用于产生信息摘要，密匙加密等，常见的有MD系列(由RSA数据安全公司开发的一种单向散列算法)，SHA系列</li><li>散列算法可实现数字签名的实现</li></ul><p><strong>数字签名概述:</strong></p><ul><li>数字签名的原理是将要传送的明文通过一种函数运算(hash)转换成报文摘要(不同的明文对应不同的摘要)</li><li>报文摘要加密后与明文一种传送给接受方</li><li>接受方将接受的明文产生新的报文摘要与发送方发来的报文摘要解密比较</li><li>比较结果一致表示明文未被改动，反之则明文已被篡改</li></ul><hr><h3 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h3><p><strong>概述:</strong></p><ul><li>[Message authentication code，MAC]</li><li>别称:消息鉴别码、文件消息认证码、讯息鉴别码、信息认证码</li></ul><p><strong>简述:</strong></p><ul><li>是经过特定算法后产生的一小段信息，用于检查某段消息的完整性，以及作身份验证</li><li>用来检查在消息传递过程中，其内容是否被更改过，不管更改的原因是来自意外或是蓄意攻击</li><li>同时可以作为消息来源的身份验证，确认消息的来源</li><li>消息认证码的算法中，通常会使用带密钥的散列函数(HMAC)，或者块密码的带认证工作模式(如CBC-MAC)</li><li>信息鉴别码不能提供对信息的保密，若要同时实现保密认证，同时需要对信息进行加密</li></ul><p><strong>密钥散列消息认证码</strong></p><ul><li>Keyed-hash message authentication code</li><li>又称散列消息认证码(Hash-based message authentication code，HMAC)</li><li>是一种通过特别计算方式之后产生的消息认证码(MAC)，使用密码散列函数，同时结合一个加密密钥</li><li>它可以用来保证数据的完整性，同时可以用来作某个消息的身份验证</li></ul><hr><h3 id="密码学安全伪随机数生成器"><a href="#密码学安全伪随机数生成器" class="headerlink" title="密码学安全伪随机数生成器"></a>密码学安全伪随机数生成器</h3><p><strong>概述:</strong></p><ul><li>Cryptographically secure pseudo-random number generator</li><li>通称CSPRNG</li><li>亦作密码学伪随机数生成器</li><li>是一种能够通过运算得出密码学安全伪随机数的伪随机数生成器</li><li>相较于统计学伪随机数生成器和更弱的伪随机数生成器，CSPRNG所生成的密码学安全伪随机数具有额外的伪随机属性</li><li>CSPRNG常被作为密码学原件，用以搭建更复杂的密码学应用</li><li>如，可变长CSPRNG和XOR函数搭配即构成流密码的编解码方法</li></ul><hr><h3 id="对等加密-Reciprocal-cipher"><a href="#对等加密-Reciprocal-cipher" class="headerlink" title="对等加密(Reciprocal cipher)"></a>对等加密(Reciprocal cipher)</h3><p><strong>概述:</strong></p><ul><li>是对称密钥加密(Symmetric-key algorithm)的一个特例</li><li>该类密码的加密算法是它自己本身的逆反函数，所以其解密算法等同于加密算法</li><li>如果要还原对等加密的密文，套用加密同样的算法即可得到明文</li><li>换句话说，使用相同的密钥，两次连续的对等加密运算后会回复原始文字</li><li>在数学上，这有时称之为对合<blockquote><p>常见的对等加密算法有<code>ROT13</code>，<code>异或密码</code>，<code>RC4</code></p></blockquote></li></ul><hr><ul><li>几个重要的概念，公钥，私钥，加密，解密，对称，非对称，散列算法(hash)</li><li>所有的复杂的现代密码学算法都是基于对称加密或非对称加密算法与散列算法加密所建立的</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">联邦信息处理标准(Federal Information Processing Standards)</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Password</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔 2020-2-2.11</title>
    <url>/2020/02/11/%E9%9A%8F%E7%AC%94-2020-2-2-11/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="749578f2d8bf434728f294f9ddaf4b9582488f1c8fec92481ec3e34c4dd23c05"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-随笔</title>
    <url>/2020/02/09/Docker-%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Docker-随笔"><a href="#Docker-随笔" class="headerlink" title="Docker 随笔"></a>Docker 随笔</h3><ul><li><p>Docker 由Go语言编写</p></li><li><p>Docker 主要分支(三大项目)</p></li></ul><ol><li><p>Docker Engine-Community</p><blockquote><p>docker社区</p></blockquote></li><li><p>Docker Compose</p><blockquote><p>docker自动化操作-YAML/Go</p></blockquote></li><li><p>Docker Machine</p><blockquote><p>docker集群化管理</p></blockquote></li></ol><hr><ul><li>基本概念</li><li>dockerfile</li><li>容器集群网络</li><li>docker虚拟机</li><li>swarm集群</li></ul><hr><ul><li>绝对基本流程<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">images</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">search</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run</span></span><br><span class="line"><span class="attr">search</span> <span class="string">ps -a</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rmi</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm -f </span></span><br><span class="line"><span class="attr">docker</span> <span class="string">start/restart/stop</span></span><br></pre></td></tr></table></figure></li><li>能直接拉就直接拉，不到极端情况下最好别总想着整一些类似于dockerfile的花活</li></ul><hr><ul><li><p>docker hub<a href="https://hub.docker.com" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com</code></p></blockquote></li><li><p>文档<a href="https://docs.docker.com/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/</code></p></blockquote></li></ul><hr><h3 id="容器服务安装并启动实例"><a href="#容器服务安装并启动实例" class="headerlink" title="容器服务安装并启动实例"></a>容器服务安装并启动实例</h3><p><strong>容器-操作系统</strong></p><ul><li>Ubantu/Debian/CentOS</li><li>先<code>docker search</code>看一下镜像</li><li>直接<code>pull</code>过来然后<code>exec</code>就行</li><li>默认是最新版本<code>Ubantu/Debian/CentOS:latest</code></li><li>Docker Hub内点击<code>Sort by</code>选项卡查看其他版本</li><li>这里暂时不阐述通过Dockerfile构建的方法</li></ul><ol><li><p>Ubuntu 镜像库地址<a href="https://hub.docker.com/_/ubuntu?tab=tags&page=1" target="_blank" rel="noopener">跳转</a><br><code>https://hub.docker.com/_/ubuntu?tab=tags&amp;page=1</code></p></li><li><p>CentOS 镜像库地址<a href="https://hub.docker.com/_/centos?tab=tags&page=1" target="_blank" rel="noopener">跳转</a><br><code>https://hub.docker.com/_/centos?tab=tags&amp;page=1</code></p></li><li><p>Debian 镜像库地址<a href="https://hub.docker.com/_/debian?tab=tags&page=1" target="_blank" rel="noopener">跳转</a><br><code>https://hub.docker.com/_/debian?tab=tags&amp;page=1</code></p></li></ol><hr><p><strong>容器-web服务</strong></p><ul><li>Nginx/Apache/Node.js/Tomcat</li></ul><ol><li>Nginx</li></ol><ul><li><p>说明:Nginx是一个高性能的HTTP和反向代理web服务器，同时也提供了<code>IMAP/POP3/SMTP</code>服务</p></li><li><p>镜像库地址<a href="https://hub.docker.com/_/nginx?tab=tags" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com/_/nginx?tab=tags</code></p></blockquote></li><li><p>运行容器:</p><blockquote><p>$ docker run –name nginx-test -p 8080:80 -d nginx</p></blockquote></li><li><p>参数说明:</p><blockquote><p><code>--name nginx-test</code>:容器名称<br><code>-p 8080:80</code>:端口进行映射，将本地8080端口映射到容器内部的80端口<br><code>-d nginx</code>:设置容器在在后台一直运行</p></blockquote></li></ul><hr><ol start="2"><li>Apache-httpd</li></ol><ul><li><p>镜像库地址<a href="https://hub.docker.com/_/httpd?tab=tags" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com/_/httpd?tab=tags</code></p></blockquote></li><li><p>运行容器:</p><blockquote><p><code>$ docker run -p 80:80 -v $PWD/www/:/usr/local/apache2/htdocs/ -v $PWD/conf/httpd.conf:/usr/local/apache2/conf/httpd.conf -v $PWD/logs/:/usr/local/apache2/logs/ -d httpd</code></p></blockquote></li><li><p>参数说明:</p><blockquote><p><code>-p 80:80</code>:将容器的 80 端口映射到主机的 80 端口<br><code>-v $PWD/www/:/usr/local/apache2/htdocs/</code>:将主机中当前目录下的<code>www</code>目录挂载到容器的<code>/usr/local/apache2/htdocs/</code><br><code>-v $PWD/conf/httpd.conf:/usr/local/apache2/conf/httpd.conf</code>:将主机中当前目录下的<code>conf/httpd.conf</code>文件挂载到容器的<code>/usr/local/apache2/conf/httpd.conf</code><br><code>-v $PWD/logs/:/usr/local/apache2/logs/</code>:将主机中当前目录下的<code>logs</code>目录挂载到容器的<code>/usr/local/apache2/logs/</code></p></blockquote></li></ul><hr><ol start="3"><li>Node.js</li></ol><ul><li>镜像库地址<a href="https://hub.docker.com/_/node?tab=tags" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://hub.docker.com/_/node?tab=tags</code></p></blockquote></li><li>运行容器:<blockquote><p><code>docker run -itd --name node-test node</code></p></blockquote></li><li>进入容器内部查看其服务版本</li></ul><hr><ol start="4"><li>Tomcat</li></ol><ul><li>镜像库地址<a href="https://hub.docker.com/_/tomcat?tab=tags" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://hub.docker.com/_/tomcat?tab=tags</code></p></blockquote></li><li>运行容器:<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> --name tomcat -p 8080:8080 -v <span class="variable">$PWD</span>/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/tomcat/webapps/<span class="built_in">test</span> -d tomcat</span></span><br><span class="line">acb33fcb4beb8d7f1ebace6f50f5fc204b1dbe9d524881267aa715c61cf75320</span><br></pre></td></tr></table></figure></li><li>参数说明:<blockquote><p><code>-p 8080:8080</code>:将容器的8080端口映射到主机的8080端口<br><code>-v $PWD/test:/usr/local/tomcat/webapps/test</code>:将主机中当前目录下的<code>test</code>挂载到容器的<code>/test</code></p></blockquote></li></ul><hr><p><strong>容器-数据库</strong></p><ul><li><p>MySQL/MongoDB/Redis</p></li><li><p>MySQL</p></li><li><p>镜像库地址<a href="https://hub.docker.com/_/mysql?tab=tags" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com/_/mysql?tab=tags</code></p></blockquote></li><li><p>运行容器:</p><blockquote><p><code>$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></p></blockquote></li><li><p>参数说明:</p><blockquote><p><code>-p 3306:3306</code>:映射容器服务的3306端口到宿主机的3306端口，外部主机可以直接通过宿主机<code>ip:3306</code>访问到MySQL的服务<br><code>MYSQL_ROOT_PASSWORD=123456</code>:设置MySQL服务root用户的密码</p></blockquote></li></ul><hr><ul><li>MongoDB</li><li>简介:<code>MongoDB</code>是一个免费的开源跨平台面向文档的<code>NoSQL</code>数据库程序</li><li>镜像库地址:<a href="https://hub.docker.com/_/mongo?tab=tags&page=1" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://hub.docker.com/_/mongo?tab=tags&amp;page=1</code></p></blockquote></li><li>运行容器:<blockquote><p><code>$ docker run -itd --name mongo -p 27017:27017 mongo --auth</code></p></blockquote></li><li>参数说明:<blockquote><p><code>-p 27017:27017</code>:映射容器服务的27017端口到宿主机的27017端口，使外部可以直接通过宿主机<code>ip:27017</code>访问到<code>mongo</code>的服务<br><code>--auth</code>:需要密码才能访问容器服务</p></blockquote></li><li>接着使用以下命令添加用户和设置密码，并且尝试连接<blockquote><p><code>$ docker exec -it mongo mongo admin</code></p></blockquote></li><li>创建一个名为<code>admin</code>，密码为123456的用户<blockquote><p><code>db.createUser({ user:&#39;admin&#39;,pwd:&#39;123456&#39;,roles:[ { role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;}]});</code></p></blockquote></li><li>尝试使用上面创建的用户信息进行连接<blockquote><p><code>db.auth(&#39;admin&#39;, &#39;123456&#39;)</code></p></blockquote></li></ul><hr><ul><li>Redis</li><li>简介:是一个开源的使用<code>ANSI C</code>语言编写、支持网络、可基于内存亦可持久化的日志型,<code>Key-Value</code>的<code>NoSQL</code>数据库，并提供多种语言的<code>API</code></li><li>镜像库地址:<a href="https://hub.docker.com/_/redis?tab=tags" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://hub.docker.com/_/redis?tab=tags</code></p></blockquote></li><li>运行容器:<blockquote><p><code>$ docker run -itd --name redis-test -p 6379:6379 redis</code></p></blockquote></li><li>通过<code>redis-cli</code>连接测试使用<code>redis</code>服务<blockquote><p><code>$ docker exec -it redis-test /bin/bash</code></p></blockquote></li></ul><hr><ul><li><p>PHP<a href="https://hub.docker.com/_/php?tab=tags" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com/_/php?tab=tags</code></p></blockquote></li><li><p>Python<a href="https://hub.docker.com/_/python?tab=tags" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com/_/python?tab=tags</code></p></blockquote></li><li><p>redis.conf<a href="https://github.com/antirez/redis/blob/unstable/redis.conf" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/antirez/redis/blob/unstable/redis.conf</code></p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Machine/Swarm-1.1</title>
    <url>/2020/02/09/Docker-Machine-1-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="docker-machine-基本命令"><a href="#docker-machine-基本命令" class="headerlink" title="docker machine-基本命令"></a>docker machine-基本命令</h3><ul><li><p>虚拟机与容器的区别:虚拟机内可以定义容器</p></li><li><p>列出已有虚拟机</p><blockquote><p><code>docker-machine ls</code></p></blockquote></li><li><p>创建虚拟机</p><blockquote><p><code>docker-machine create --driver [virtualbox] [test]</code><br>参数–driver用于指定虚拟机驱动类型,这里是virtualbox</p></blockquote></li><li><p>虚拟机驱动一览<a href="https://docs.docker.com/machine/drivers/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/machine/drivers/</code></p></blockquote></li><li><p>查看虚拟器的ip</p><blockquote><p><code>docker-machine ip [test]</code></p></blockquote></li></ul><hr><ul><li><p>管理命令</p><blockquote><p><code>docker-machine start/restart/stop test</code></p></blockquote></li><li><p>帮助与检阅命令</p><blockquote><p><code>version/help/info</code></p></blockquote></li><li><p>官方文档<a href="https://docs.docker.com/machine/reference/create/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/machine/reference/create/</code></p></blockquote></li></ul><hr><p><strong>指令摘要</strong></p><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">kill</td><td align="left">杀死指定主机</td></tr><tr><td align="left">rm</td><td align="left">删除指定主机</td></tr><tr><td align="left">ssh</td><td align="left">连接主机</td></tr><tr><td align="left">upgrade</td><td align="left">更新</td></tr><tr><td align="left">url</td><td align="left">获取监听url</td></tr><tr><td align="left">scp</td><td align="left">复制</td></tr><tr><td align="left">regenerate-certs</td><td align="left">刷新TLS</td></tr></tbody></table><hr><ul><li><p>工作节点(worker node)</p></li><li><p>管理节点(manager node)</p></li><li><p>在VMware里安装虚拟机的虚拟机驱动时需要</p></li><li><p>点开虚拟机设置里的处理器选项卡</p></li><li><p>勾选虚拟化引擎选项卡</p></li></ul><hr><h3 id="Docker-Swarm集群-基本命令"><a href="#Docker-Swarm集群-基本命令" class="headerlink" title="Docker Swarm集群-基本命令"></a>Docker Swarm集群-基本命令</h3><ul><li><p>创建管理节点(manager node)</p><blockquote><p><code>docker-machine create -d virtualbox swarm-manager</code></p></blockquote></li><li><p>连入机器后执行</p><blockquote><p><code>docker swarm init --advertise-addr [创建机器时分配的 ip]</code></p></blockquote></li><li><p>然后拷贝输出指令</p></li><li><p>创建工作节点(worker node)</p></li><li><p>进入工作节点运行拷贝的指令将其设置为工作节点</p></li></ul><hr><ul><li><p>随机部署服务到集群中</p></li><li><p><code>alpine</code>是操作系统</p><blockquote><p><code>docker service create --replicas 1 --name 服务名 alpine ping docker.com</code></p></blockquote></li><li><p>查看部署情况</p><blockquote><p><code>docker service ps [服务名]</code></p></blockquote></li><li><p>查看具体信息</p><blockquote><p><code>docker service inspect --pretty [服务名]</code></p></blockquote></li><li><p>扩展服务到多节点(两个)</p><blockquote><p><code>docker service scale [服务名=2]</code></p></blockquote></li><li><p>删除服务</p><blockquote><p><code>docker service rm [服务名]</code></p></blockquote></li><li><p>查看所有节点</p><blockquote><p><code>docker node ls</code></p></blockquote></li><li><p>关闭服务节点</p><blockquote><p><code>docker node update --availability drain swarm-worker1</code></p></blockquote></li><li><p>开启服务节点</p><blockquote><p><code>docker node update --availability active swarm-worker1</code></p></blockquote></li><li><p><code>Active/Drain</code>分别代表开启与关闭</p></li></ul><hr><p><strong>滚动升级</strong></p><ul><li><p>前提是已存在指定服务</p></li><li><p>创建服务</p><blockquote><p><code>docker service create --replicas 1 --name redis --update-delay 10s redis:3.0.6</code></p></blockquote></li><li><p>滚动更新</p><blockquote><p><code>docker service update --image [服务名:版本号] [指定已有的服务镜像]</code></p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Swarm-集群</title>
    <url>/2020/02/09/Docker-Swarm-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Swarm-集群管理"><a href="#Swarm-集群管理" class="headerlink" title="Swarm 集群管理"></a>Swarm 集群管理</h3><p><strong>概述:</strong></p><ul><li><p><code>Docker Swarm</code>是Docker的集群管理工具</p></li><li><p>它将<code>Docker主机池</code>转变为单个虚拟Docker主机</p></li><li><p><code>Docker Swarm</code>提供了标准的<code>Docker API</code></p></li><li><p>目的是使所有任何已经与Docker守护程序通信的工具都可以使用Swarm轻松地扩展到多个主机</p></li><li><p>支持的工具包括但不限于以下各项：</p></li><li><p>Dokku</p></li><li><p>Docker Compose</p></li><li><p>Docker Machine</p></li><li><p>Jenkins</p></li></ul><p><strong>原理概述:</strong></p><ul><li><code>swarm集群</code>由管理节点(manager)和工作节点(work node)构成</li><li><code>swarm mananger</code>:负责整个集群的管理工作包括集群配置,服务管理等所有跟集群有关的工作</li><li><code>work node</code>:即为<code>available node</code>,主要负责运行相应的服务来执行任务(task)</li><li>逻辑简述</li><li>管理节点(swarm manager)内存储着若干个服务(service)的副本(replicas)文件</li><li>工作节点(available/worker node)内存储这服务的标识与服务的镜像文件(container)</li><li>管理节点将所有的服务副本都分配到工作节点内，并管理与控制工作节点内的任务执行<blockquote><p>[swarm manager[service replicas]]-&gt;[available node[task[container(service:latest)]]]<br>swarm manager-&gt;available node-1/available node-2/available node-3/available node-N</p></blockquote></li></ul><hr><p><strong>应用</strong></p><ul><li><p>以<code>Docker Machine</code>与<code>virtualbox</code>进行实践，需要先确保主机已安装<code>virtualbox</code></p></li><li><p>创建docker机器:</p><blockquote><p><code>$ docker-machine create -d virtualbox swarm-manager</code></p></blockquote></li></ul><hr><ul><li><p>创建管理节点(manager node)</p></li><li><p>初始化<code>swarm</code>集群，进行初始化的这台机器，就是集群的管理节点</p><blockquote><p><code>$ docker-machine ssh swarm-manager</code><br><code>$ docker swarm init --advertise-addr 192.168.99.101</code><br><code>--advertise-addr</code>后的IP为创建机器时分配的ip</p></blockquote></li><li><p>当为机器分配IP之后，命令行会输出向集群内添加工作节点的指令(连接令牌)</p><blockquote><p><code>To add a worker to this swarm，runthe following command</code><br><code>docker swarm join --token [...]</code></p></blockquote></li></ul><hr><ul><li>创建工作节点(worker node)</li><li>复制上面输出的指令(会被自动截断)<blockquote><p><code>$ docker swarm join --token [...]</code><br>输出<code>The node joined a swarm as a worker</code></p></blockquote></li></ul><hr><ul><li>查看集群信息<blockquote><p><code>docker info</code><br>输出内容中<code>Swarm active</code>内的<code>managers</code>与<code>node</code>即为节点信息</p></blockquote></li></ul><hr><ul><li><p>部署服务器到集群中</p></li><li><p>跟集群管理有关的任何操作，都是在管理节点上操作的</p></li><li><p>随机指派任一工作节点，并于工作节点上创建任意的一个服务</p><blockquote><p><code>docker@swarm-manager:~$ docker service create --replicas 1 --name [service name] alpine ping docker.com</code></p></blockquote></li><li><p>查看服务部署情况:</p><blockquote><p><code>docker@swarm-manager:~$ docker service ps [service name]</code></p></blockquote></li><li><p>查看<code>service</code>部署的具体信息:</p><blockquote><p><code>docker@swarm-manager:~$ docker service inspect --pretty [service name]</code></p></blockquote></li></ul><hr><ul><li><p>扩展集群服务</p></li><li><p>将service服务扩展到若干个节点</p><blockquote><p><code>docker@swarm-manager:~$ docker service scale [service name]=[节点数]</code></p></blockquote></li><li><p>查看服务部署情况:</p><blockquote><p><code>docker@swarm-manager:~$ docker service ps [service name]</code></p></blockquote></li></ul><hr><ul><li>删除服务<blockquote><p><code>docker@swarm-manager:~$ docker service rm [service name]</code></p></blockquote></li><li>查看服务部署情况:<blockquote><p><code>docker@swarm-manager:~$ docker service ps [service name]</code></p></blockquote></li></ul><hr><ul><li>滚动升级服务</li><li>将redis旧版本通过滚动升级至更高版本</li><li>创建一个3.0.6版本的redis<blockquote><p><code>docker@swarm-manager:~$ docker service create --replicas 1 --name redis --update-delay 10s redis:3.0.6</code></p></blockquote></li><li>滚动升级redis<blockquote><p><code>docker@swarm-manager:~$ docker service update --image redis:3.0.7 redis</code></p></blockquote></li><li>查看redis服务部署情况:<blockquote><p><code>docker@swarm-manager:~$ docker service ps redis</code></p></blockquote></li></ul><hr><ul><li><p>停止某个节点接收新的任务</p></li><li><p>查看所有的节点：</p><blockquote><p><code>docker@swarm-manager:~$ docker node ls</code></p></blockquote></li><li><p>默认所有的节点都是<code>Active</code>, 可以接收新的任务分配</p></li><li><p>停止节点<code>swarm-worker1</code>:</p><blockquote><p><code>docker node update --availability drain swarm-worker1</code></p></blockquote></li><li><p>此时<code>swarm-worker1</code>状态变为<code>Drain</code></p></li><li><p>不会影响到集群的服务，只是<code>swarm-worker1</code>节点不再接收新的任务</p></li><li><p>会使集群的负载能力有所下降</p></li><li><p>重新激活节点指令:</p><blockquote><p><code>docker@swarm-manager:~$ docker node update --availability active swarm-worker1</code></p></blockquote></li></ul><hr><p><strong>参考资料</strong></p><ul><li><p>虚拟机驱动<a href="https://docs.docker.com/machine/drivers/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/machine/drivers/</code></p></blockquote></li><li><p>官方文档<a href="https://docs.docker.com/machine/reference/create/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/machine/reference/create/</code></p></blockquote></li></ul><hr><p><strong>其他资源</strong></p><ul><li><p>Docker官方主页<a href="https://www.docker.com" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.docker.com</code></p></blockquote></li><li><p>Docker官方博客<a href="https://blog.docker.com/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://blog.docker.com/</code></p></blockquote></li><li><p>Docker官方文档<a href="https://docs.docker.com/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/</code></p></blockquote></li><li><p>Docker Store<a href="https://store.docker.com" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://store.docker.com</code></p></blockquote></li><li><p>Docker Cloud<a href="https://cloud.docker.com" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://cloud.docker.com</code></p></blockquote></li><li><p>Docker Hub<a href="https://hub.docker.com" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com</code></p></blockquote></li><li><p>Docker的源代码仓库<a href="https://github.com/moby/moby" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/moby/moby</code></p></blockquote></li><li><p>Docker发布版本历史<a href="https://docs.docker.com/release-notes/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/release-notes/</code></p></blockquote></li><li><p>Docker常见问题<a href="https://docs.docker.com/engine/faq/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/engine/faq/</code></p></blockquote></li><li><p>Docker远端应用 API<a href="https://docs.docker.com/develop/sdk/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/develop/sdk/</code></p></blockquote></li></ul><hr><p><strong>Docker国内镜像源</strong></p><ul><li><p>阿里云<a href="https://help.aliyun.com/document_detail/60750.html" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://help.aliyun.com/document_detail/60750.html</code></p></blockquote></li><li><p>网易云加速器</p><blockquote><p><code>http://hub-mirror.c.163.com</code></p></blockquote></li><li><p>中国官方加速器</p><blockquote><p><code>https://registry.docker-cn.com</code></p></blockquote></li><li><p>ustc的镜像</p><blockquote><p><code>https://docker.mirrors.ustc.edu.cn</code></p></blockquote></li><li><p>daocloud</p><blockquote><p><code>https://www.daocloud.io/mirror#accelerator-doc</code>(注册后使用)</p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-1.1</title>
    <url>/2020/02/09/Docker-1-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><ul><li><p>查看已有镜像</p><blockquote><p><code>docker images</code></p></blockquote></li><li><p>参数:仓库源/标签/ID/创建时间/空间</p><blockquote><p><code>debian tag [镜像ID]</code> # 添加标签</p></blockquote></li><li><p>查看仓库内所有镜像文件</p><blockquote><p><code>docker search debian</code></p></blockquote></li><li><p>拉取仓库内默认版本的debian镜像<code>(debian:latest)</code></p><blockquote><p><code>docker pull debian</code></p></blockquote></li><li><p>查看所有已创建容器</p><blockquote><p><code>docker ps -a</code></p></blockquote></li><li><p>用容器启动所选镜像</p><blockquote><p><code>docker run -it --name [自定义命名] debian /bin/bash</code></p></blockquote></li></ul><hr><ul><li>启动，停止，重启所选容器<blockquote><p><code>docker start/stop/restart [容器ID]</code><br>参数:<code>·-i交互式操作</code>，<code>-t终端</code>，<code>-d后台运行</code></p></blockquote></li></ul><hr><ul><li>删除操作<blockquote><p><code>docker rmi debian</code>删除镜像<br><code>docker rm -f</code>删除容器<br><code>docker container prune</code>删除所有停止的容器</p></blockquote></li><li>容器必须停止才能进行删除</li></ul><hr><ul><li>进入后台后使用<code>docker attach</code>或<code>docker exec [容器ID]</code>进入该容器</li><li>前者暂时性，后者永久性</li><li>重新进入容器时还必须加入原来设置的启动参数</li><li>比如<code>/bin/bash和-it</code></li></ul><hr><ul><li><p>设置[service]端口映射与绑定IP</p><blockquote><p><code>docker run -p [可选的IP绑定]:[映射端口]:[原端口]/(udp/tcp) [镜像名] [启动脚本]</code><br>参数:<code>-P</code>是随机映射，<code>-p</code>是指定映射</p></blockquote></li><li><p>查看端口绑定情况</p><blockquote><p><code>docker port [服务名]</code></p></blockquote></li></ul><hr><h3 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h3><ul><li><p>父子关系这里都称为上下层级关系，与阶级关系不同</p></li><li><p>上级容器可以看到下级容器的关系</p></li><li><p>建立容器网络</p><blockquote><p><code>docker network create -d bridge/overlay(网络类型) [网络命名]</code>overlay<code>应用于</code>swarm`</p></blockquote></li><li><p>后台运行一个命名为<code>test1</code>的容器并把它并入<code>test-net</code>内，并开启交互式终端系统</p><blockquote><p><code>docker run -itd --name test1 --network test-net debian /bin/bash</code></p></blockquote></li><li><p>任何加入此网络的容器都会达成互联的状态</p></li></ul><hr><ul><li><p>设定所有容器域名和DNS</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">$ vim <span class="meta-keyword">/etc/</span>docker/daemon.json</span><br><span class="line">&#123;<span class="string">"dns"</span> : [<span class="string">"111.111.111.111"</span>,<span class="string">"1.1.1.1"</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看是否生效</p><blockquote><p><code>docker run -it rm debian cat etc/resolv.conf</code></p></blockquote></li><li><p>指定容器设置域名和DNS服务器</p><blockquote><p><code>docker run -it --rm _hostname=HOSTNAME --dns=IP_ADDRESS --dns-search=DOMAIN(搜索域) debian</code></p></blockquote></li><li><p>没有指定<code>--dns</code>和<code>--dns-search</code>，Docker会默认用宿主主机上的<code>/etc/resolv.conf</code>来配置容器的DNS</p></li></ul><hr><ul><li><p>登陆<code>docker hub</code></p><blockquote><p><code>docker login</code></p></blockquote></li><li><p>退出<code>docker hub</code></p><blockquote><p><code>docker logout</code></p></blockquote></li><li><p>上传镜像</p><blockquote><p><code>docker tag 本地镜像名 username/远端镜像名</code></p></blockquote></li></ul><hr><ul><li><p>随笔</p><blockquote><p><code>Docker Engine</code> 引擎<br><code>REST API</code> 通用接口<br><code>Docker daemon</code> 守护进程</p></blockquote></li><li><p>自用简易指令集</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Machine</title>
    <url>/2020/02/08/Docker-Machine/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h3><p><strong>概述:</strong></p><ul><li>可以实现在虚拟主机上安装Docker</li><li>并且可以使用<code>docker-machine</code>命令来管理主机</li><li><code>Docker Machine</code>管理的虚拟主机可以是机上的，也可以是云供应商的</li><li>使用<code>docker-machine</code>命令，可以用于启动，检查，停止和重新启动托管主机，也可以升级Docker客户端和守护程序</li><li>以及配置Docker客户端与本地主机进行通信</li><li>用于实现使用本地主机便可以操控远端的镜像容器集群</li></ul><p><strong>逻辑简述:</strong><br>[Client docker-machine[Client docker CLI[REST APT]]]-docker-machine create-&gt;[REST API[Server docker daemon]]</p><hr><p><strong>基于Linux安装Docker Machine</strong></p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>base=<span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/machine/releases</span><span class="regexp">/download/v</span>0.<span class="number">16.0</span> &amp;&amp;</span><br><span class="line">  curl -L <span class="variable">$base</span>/docker-machine-<span class="variable">$(</span>uname -s)-<span class="variable">$(</span>uname -m) &gt;<span class="regexp">/tmp/docker</span>-machine &amp;&amp;</span><br><span class="line">  sudo mv /tmp/docker-machine /usr/local/bin/docker-machine &amp;&amp;</span><br><span class="line">  chmod +x /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure><ul><li>查看版本以验证是否安装成功<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ docker-machine version</span><br><span class="line">docker-machine version <span class="number">0.16</span><span class="number">.0</span>, build <span class="number">9371605</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>对于machine version的使用</strong></p><ol><li><p>列出可用的机器</p><blockquote><p><code>$ docker-machine ls</code></p></blockquote></li><li><p>创建机器</p></li></ol><ul><li>创建一个名为serow的机器<blockquote><p><code>$ docker-machine create --driver virtualbox serow</code></p></blockquote></li><li>参数<code>--driver</code>用于指定用来创建机器的驱动类型，这里是<code>virtualbox</code></li></ul><ol start="3"><li><p>查看机器的 ip</p><blockquote><p><code>$ docker-machine ip serow</code></p></blockquote></li><li><p>停止机器</p><blockquote><p><code>$ docker-machine stop serow</code></p></blockquote></li><li><p>启动机器*</p><blockquote><p><code>$ docker-machine start serow</code></p></blockquote></li><li><p>进入机器*</p><blockquote><p><code>$ docker-machine ssh serow</code></p></blockquote></li></ol><hr><p><strong>docker-machine 命令参数明细</strong></p><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">docker-machine active</td><td align="left">用于查看当前激活状态的Docker主机</td></tr><tr><td align="left">config</td><td align="left">查看当前激活状态Docker主机的连接信息</td></tr><tr><td align="left">creat</td><td align="left">创建Docker主机</td></tr><tr><td align="left">env</td><td align="left">显示连接到某个主机需要的环境变量</td></tr><tr><td align="left">inspect</td><td align="left">以<code>json</code>格式输出指定Docker的详细信息</td></tr><tr><td align="left">ip</td><td align="left">获取指定 Docker 主机的地址</td></tr><tr><td align="left">kill</td><td align="left">直接杀死指定的 Docker主机</td></tr><tr><td align="left">ls</td><td align="left">列出所有的管理主机</td></tr><tr><td align="left">provision</td><td align="left">重新配置指定主机</td></tr><tr><td align="left">regenerate-certs</td><td align="left">为某个主机重新生成TLS信息</td></tr><tr><td align="left">restart</td><td align="left">重启指定的主机</td></tr><tr><td align="left">rm</td><td align="left">删除某台Docker主机，对应的虚拟机也会被删除</td></tr><tr><td align="left">ssh</td><td align="left">通过SSH连接到主机上，执行命令</td></tr><tr><td align="left">scp</td><td align="left">在Docker主机之间以及Docker主机和本地主机之间通过<code>scp</code>远程复制数据</td></tr><tr><td align="left">mount</td><td align="left">使用SSHFS从计算机装载或卸载目录</td></tr><tr><td align="left">start</td><td align="left">启动一个指定的Docker主机，如果对象是个虚拟机，该虚拟机将被启动</td></tr><tr><td align="left">status</td><td align="left">获取指定Docker主机的状态(包括:<code>Running</code>,<code>Paused</code>,<code>Saved</code>,<code>Stopped</code>,<code>Stopping</code>,<code>Starting</code>,<code>Error</code>)等</td></tr><tr><td align="left">stop</td><td align="left">停止一个指定的Docker主机</td></tr><tr><td align="left">upgrade</td><td align="left">将一个指定主机的Docker版本更新为最新</td></tr><tr><td align="left">url</td><td align="left">获取指定Docker主机的监听URL</td></tr><tr><td align="left">version</td><td align="left">显示 Docker Machine 的版本或者主机Docker版本</td></tr><tr><td align="left">help</td><td align="left">显示帮助信息</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML-1</title>
    <url>/2020/02/08/YAML-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="YAML-基本语法与简述"><a href="#YAML-基本语法与简述" class="headerlink" title="YAML 基本语法与简述"></a>YAML 基本语法与简述</h3><p><strong>概述:</strong></p><ul><li>YAML是”YAML Ain’t a Markup Language”(YAML 不是一种标记语言)的递归缩写</li><li>在开发的这种语言时，YAML的意思其实是:”Yet Another Markup Language”(仍是一种标记语言)</li><li>YAML的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态</li><li>它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲</li><li>YAML的配置文件后缀为<code>.yml</code></li></ul><hr><p><strong>YAML的基本语法规则</strong></p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用<code>tab</code>，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li><code>&#39;#&#39;</code>表示注释</li></ul><hr><p><strong>YAML的数据类型</strong></p><ul><li>YAML支持以下几种数据类型：</li><li>对象:键值对的集合，又称为映射(mapping)/哈希(hashes) /字典(dictionary)</li><li>数组:一组按次序排列的值，又称为序列(sequence)/列表(list)</li><li>纯量(scalars):单个的、不可再分的值</li></ul><hr><p><strong>YAML对象</strong></p><ul><li><p>对象键值对使用冒号结构表示<code>key: value</code>，冒号后面要加一个空格</p></li><li><p>也可以使用<code>key:{key1: value1, key2: value2, ...}</code></p></li><li><p>还可以使用缩进表示层级关系:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">key:</span> </span><br><span class="line">    child-<span class="string">key:</span> value</span><br><span class="line">    child-<span class="string">key2:</span> value2</span><br></pre></td></tr></table></figure></li><li><p>较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的<code>key</code>，配合一个冒号加一个空格代表一个<code>value</code>:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">?  </span><br><span class="line"><span class="bullet">    - </span>complexkey1</span><br><span class="line"><span class="bullet">    - </span>complexkey2</span><br><span class="line">:</span><br><span class="line"><span class="bullet">    - </span>complexvalue1</span><br><span class="line"><span class="bullet">    - </span>complexvalue2</span><br></pre></td></tr></table></figure></li><li><p>意思即对象的属性是一个数组<code>[complexkey1,complexkey2]</code>，对应的值也是一个数组<code>[complexvalue1,complexvalue2]</code></p></li></ul><hr><p><strong>YAML数组</strong></p><ul><li>以<code>&#39;-&#39;</code>开头的行表示构成一个数组:<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>A</span><br><span class="line"><span class="bullet">- </span>B</span><br><span class="line"><span class="bullet">- </span>C</span><br></pre></td></tr></table></figure></li><li>YAML 支持多维数组，可以使用行内表示:<blockquote><p><code>key: [value1, value2, ...]</code></p></blockquote></li><li>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-</span><br><span class="line"><span class="ruby"> - A</span></span><br><span class="line"><span class="ruby"> - B</span></span><br><span class="line"><span class="ruby"> - C</span></span><br></pre></td></tr></table></figure></li><li>一个相对复杂的例子:<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">companies:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company1</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">200W</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company2</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">500W</span></span><br></pre></td></tr></table></figure></li><li>意思是<code>companies</code>属性是一个数组，每一个数组元素又是由<code>id</code>,<code>name</code>,<code>price</code>三个属性构成</li><li>数组也可以使用流式(flow)的方式表示:<blockquote><p><code>companies: [{id: 1,name: company1,price: 200W},{id: 2,name: company2,price: 500W}]</code></p></blockquote></li></ul><hr><p><strong>复合结构</strong></p><ul><li>数组和对象可以构成复合结构，例:<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">language</span><span class="variable">s:</span></span><br><span class="line">  - Ruby</span><br><span class="line">  - Perl</span><br><span class="line">  - Python </span><br><span class="line">website<span class="variable">s:</span></span><br><span class="line">  YAML: yaml.org </span><br><span class="line">  Ruby: <span class="keyword">ruby</span>-lang.org </span><br><span class="line">  Python: <span class="keyword">python</span>.org </span><br><span class="line">  Per<span class="variable">l:</span> use.<span class="keyword">perl</span>.org</span><br></pre></td></tr></table></figure></li><li>转换为 json 为：<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attribute">languages</span>: [ <span class="string">'Ruby'</span>, <span class="string">'Perl'</span>, <span class="string">'Python'</span>],</span><br><span class="line">  <span class="attribute">websites</span>: &#123;</span><br><span class="line">    <span class="attribute">YAML</span>: <span class="string">'yaml.org'</span>,</span><br><span class="line">    <span class="attribute">Ruby</span>: <span class="string">'ruby-lang.org'</span>,</span><br><span class="line">    <span class="attribute">Python</span>: <span class="string">'python.org'</span>,</span><br><span class="line">    <span class="attribute">Perl</span>: <span class="string">'use.perl.org'</span> </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>纯量</strong></p><ul><li><p>纯量是最基本的，不可再分的值，包括：</p></li><li><p>字符串</p></li><li><p>布尔值</p></li><li><p>整数</p></li><li><p>浮点数</p></li><li><p>Null</p></li><li><p>时间</p></li><li><p>日期</p></li><li><p>使用一个例子来快速了解纯量的基本使用：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">boolean:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="literal">TRUE</span>  <span class="comment">#true,True都可以</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">FALSE</span>  <span class="comment">#false，False都可以</span></span><br><span class="line"><span class="attr">float:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6.8523015e+5</span>  <span class="comment">#可以使用科学计数法</span></span><br><span class="line"><span class="attr">int:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">0b1010_0111_0100_1010_1110</span>    <span class="comment">#二进制表示</span></span><br><span class="line"><span class="attr">null:</span></span><br><span class="line">    <span class="attr">nodeName:</span> <span class="string">'node'</span></span><br><span class="line">    <span class="attr">parent:</span> <span class="string">~</span>  <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哈哈</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'Hello world'</span>  <span class="comment">#可以使用双引号或者单引号包裹特殊字符</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">newline</span></span><br><span class="line">      <span class="string">newline2</span>    <span class="comment">#字符串可以拆成多行，每一行会被转化成一个空格</span></span><br><span class="line"><span class="attr">date:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2018</span><span class="number">-02</span><span class="number">-17</span>    <span class="comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class="line"><span class="attr">datetime:</span> </span><br><span class="line">    <span class="bullet">-</span>  <span class="number">2018</span><span class="number">-02</span><span class="string">-17T15:02:31+08:00</span>    <span class="comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>引用</strong></p><ul><li><code>&amp;</code>锚点和<code>*</code>别名，可以用来引用:<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">defaults: &amp;defaults</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br><span class="line"></span><br><span class="line">development:</span><br><span class="line">  database: myapp_development</span><br><span class="line">  &lt;&lt;: *defaults</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  database: myapp_test</span><br><span class="line">  &lt;&lt;: *defaults</span><br></pre></td></tr></table></figure></li><li>相当于:<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">defaults:</span></span><br><span class="line"><span class="symbol">  adapter:</span>  postgres</span><br><span class="line"><span class="symbol">  host:</span>     localhost</span><br><span class="line"></span><br><span class="line"><span class="symbol">development:</span></span><br><span class="line"><span class="symbol">  database:</span> myapp_development</span><br><span class="line"><span class="symbol">  adapter:</span>  postgres</span><br><span class="line"><span class="symbol">  host:</span>     localhost</span><br><span class="line"></span><br><span class="line"><span class="symbol">test:</span></span><br><span class="line"><span class="symbol">  database:</span> myapp_test</span><br><span class="line"><span class="symbol">  adapter:</span>  postgres</span><br><span class="line"><span class="symbol">  host:</span>     localhost</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>&amp;</code>用来建立锚点(defaults)，<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点</p></blockquote><ul><li><p>下面是另一个例子:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>&amp;showell Steve </span><br><span class="line"><span class="bullet">- </span>Clark </span><br><span class="line"><span class="bullet">- </span>Brian </span><br><span class="line"><span class="bullet">- </span>Oren </span><br><span class="line"><span class="bullet">- </span><span class="strong">*showell</span></span><br></pre></td></tr></table></figure></li><li><p>转为<code>JavaScript</code>代码如下:</p><blockquote><p><code>[ &#39;Steve&#39;, &#39;Clark&#39;, &#39;Brian&#39;, &#39;Oren&#39;, &#39;Steve&#39; ]</code></p></blockquote></li></ul><hr><p><strong>参考资料:</strong></p><p>YMAL官方文档:<a href="https://yaml.org/" target="_blank" rel="noopener">跳转</a><br><code>https://yaml.org/</code></p><p>YMAL1.2规范文档:<a href="https://yaml.org/spec/1.2/spec.html" target="_blank" rel="noopener">跳转</a><br><code>https://yaml.org/spec/1.2/spec.html</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Compose-3</title>
    <url>/2020/02/08/Docker-Compose-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Compose内的YML指令参考"><a href="#Compose内的YML指令参考" class="headerlink" title="Compose内的YML指令参考"></a>Compose内的YML指令参考</h3><ul><li>接<a href="https://unit-serow.github.io/2020/02/08/Docker-Compose-2/">Docker Compose-2</a></li></ul><ol><li><strong>devices</strong></li></ol><ul><li>用于指定设备映射列表</li><li>实现语法:<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">devices:</span></span><br><span class="line">  - <span class="string">"/dev/ttyUSB0:/dev/ttyUSB0"</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li><strong>dns</strong></li></ol><ul><li>用于自定义 DNS 服务器，可以是单个值或列表的多个值</li><li>实现语法:<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="3"><li><strong>dns_search</strong></li></ol><ul><li>用于自定义 DNS 搜索域</li><li>可以是单个值或列表</li><li>实现语法:<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dns_search</span>: example.com</span><br><span class="line"></span><br><span class="line"><span class="attribute">dns_search:</span></span><br><span class="line"><span class="attribute">  - dc1.example.com</span></span><br><span class="line"><span class="attribute">  - dc2.example.com</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="4"><li><strong>entrypoint</strong></li></ol><ul><li>用于覆盖容器默认的<code>entrypoint</code></li><li>实现语法:<blockquote><p><code>entrypoint: /code/entrypoint.sh</code></p></blockquote></li><li>或以下的列表格式:<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">entrypoint:</span><br><span class="line">    -<span class="ruby"> php</span></span><br><span class="line"><span class="ruby">    - -d</span></span><br><span class="line"><span class="ruby">    - zend_extension=<span class="regexp">/usr/local</span><span class="regexp">/lib/php</span><span class="regexp">/extensions/no</span>-debug-non-zts-<span class="number">20100525</span>/xdebug.so</span></span><br><span class="line"><span class="ruby">    - -d</span></span><br><span class="line"><span class="ruby">    - memory_limit=-<span class="number">1</span></span></span><br><span class="line"><span class="ruby">    - vendor/bin/phpunit</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="5"><li><strong>env_file</strong></li></ol><ul><li>用于从文件添加环境变量</li><li>可以是单个值或列表的多个值</li><li>实现语法:<blockquote><p><code>env_file: .env</code></p></blockquote></li><li>也可以是列表格式：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">env_file:</span><br><span class="line"><span class="bullet">  - </span>./common.env</span><br><span class="line"><span class="bullet">  - </span>./apps/web.env</span><br><span class="line"><span class="bullet">  - </span>/opt/secrets.env</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="6"><li><strong>environment</strong></li></ol><ul><li>用于添加环境变量</li><li>可以使用数组或字典，任何布尔值，布尔值需要用引号引起来，以确保<code>YML解析器</code>不会将其转换为<code>True</code>或<code>False</code></li><li>实现语法:<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">environment</span>:</span><br><span class="line">  <span class="attribute">RACK_ENV</span>: development</span><br><span class="line">  <span class="attribute">SHOW</span>: <span class="string">'true'</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="7"><li><strong>expose</strong></li></ol><ul><li>用于暴露端口，但不映射到宿主机，只被连接的服务访问</li><li>实现语法(仅可以指定内部端口为参数)：<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">expose:</span><br><span class="line"> -<span class="ruby"> <span class="string">"3000"</span></span></span><br><span class="line"><span class="ruby"> - <span class="string">"8000"</span></span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="8"><li><strong>extra_hosts</strong></li></ol><ul><li>用于添加主机名映射</li><li>类似<code>docker client --add-host</code></li><li>实现语法:<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">extra_hosts:</span><br><span class="line"> -<span class="ruby"> <span class="string">"somehost:162.242.195.82"</span></span></span><br><span class="line"><span class="ruby"> - <span class="string">"otherhost:50.31.209.229"</span></span></span><br></pre></td></tr></table></figure></li><li>以上会在此服务的内部容器中<code>/etc/hosts</code>创建一个具有<code>ip地址</code>和主机名的映射关系:<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">162.242.195.82</span>  somehost</span><br><span class="line"><span class="number">50.31.209.229</span>   otherhost</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="9"><li><strong>healthcheck</strong></li></ol><ul><li>用于检测 docker 服务是否健康运行</li><li>实现语法:<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">healthcheck:</span></span><br><span class="line"><span class="symbol">  test:</span> [<span class="string">"CMD"</span>, <span class="string">"curl"</span>, <span class="string">"-f"</span>, <span class="string">"http://localhost"</span>] <span class="meta"># 设置检测程序</span></span><br><span class="line"><span class="symbol">  interval:</span> <span class="number">1</span>m30s <span class="meta"># 设置检测间隔</span></span><br><span class="line"><span class="symbol">  timeout:</span> <span class="number">10</span>s <span class="meta"># 设置检测超时时间</span></span><br><span class="line"><span class="symbol">  retries:</span> <span class="number">3</span> <span class="meta"># 设置重试次数</span></span><br><span class="line"><span class="symbol">  start_period:</span> <span class="number">40</span>s <span class="meta"># 启动后，多少秒开始启动检测程序</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="10"><li><strong>image</strong></li></ol><ul><li>用于指定容器运行的镜像</li><li>以下格式都可以:<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">image</span>: redis</span><br><span class="line"><span class="attribute">image</span>: <span class="attribute">ubuntu</span>:<span class="number">14.04</span></span><br><span class="line"><span class="attribute">image</span>: tutum/influxdb</span><br><span class="line"><span class="attribute">image</span>: example-registry.<span class="attribute">com</span>:<span class="number">4000</span>/postgresql</span><br><span class="line"><span class="attribute">image</span>: a4bc65fd # 镜像id</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="11"><li><strong>logging</strong></li></ol><ul><li><p>服务的日志记录配置</p></li><li><p><code>driver:</code>用于指定服务容器的日志记录驱动程序，默认值为<code>json-file</code></p></li><li><p>可以有以下这三种选项</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">driver:</span> <span class="string">"json-file"</span></span><br><span class="line"><span class="symbol">driver:</span> <span class="string">"syslog"</span></span><br><span class="line"><span class="symbol">driver:</span> <span class="string">"none"</span></span><br></pre></td></tr></table></figure></li><li><p>仅在<code>json-file</code>驱动程序下，可以使用以下参数，限制日志得数量和大小</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  driver: json-<span class="built_in">file</span></span><br><span class="line">  options:</span><br><span class="line">    <span class="built_in">max</span>-size: <span class="string">"200k"</span> <span class="comment"># 单个文件大小为200k</span></span><br><span class="line">    <span class="built_in">max</span>-<span class="built_in">file</span>: <span class="string">"10"</span> <span class="comment"># 最多10个文件</span></span><br></pre></td></tr></table></figure></li><li><p>当达到文件限制上限，会自动删除旧得文件</p></li><li><p><code>syslog</code>驱动程序下，可以使用<code>syslog-address</code>指定日志接收地址</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">logging</span>:</span><br><span class="line">  <span class="attribute">driver</span>: syslog</span><br><span class="line">  <span class="attribute">options</span>:</span><br><span class="line">    <span class="attribute">syslog-address</span>: <span class="string">"tcp://192.168.0.42:123"</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="12"><li><strong>network_mode</strong></li></ol><ul><li><p>用于设置网络模式</p></li><li><p>实现语法:</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">network_mode:</span> <span class="string">"bridge"</span></span><br><span class="line"><span class="symbol">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="symbol">network_mode:</span> <span class="string">"none"</span></span><br><span class="line"><span class="symbol">network_mode:</span> <span class="string">"service:[service name]"</span></span><br><span class="line"><span class="symbol">network_mode:</span> <span class="string">"container:[container name/id]"</span></span><br></pre></td></tr></table></figure></li><li><p>networks</p><blockquote><p>配置容器连接的网络，引用顶级<code>networks</code>下的条目</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">some-network:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">alias1</span></span><br><span class="line">      <span class="attr">other-network:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">alias2</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">    <span class="comment"># Use a custom driver</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-1</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br><span class="line">    <span class="comment"># Use a custom driver which takes special options</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-2</span></span><br></pre></td></tr></table></figure></li><li><p><code>aliases:</code>同一网络上的其他容器可以使用服务名称或此别名来连接到对应容器的服务</p></li></ul><hr><ol start="13"><li><strong>restart</strong></li></ol><ul><li><p>使用示例:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">restart</span>: "no"</span><br><span class="line"><span class="keyword">restart</span>: <span class="keyword">always</span></span><br><span class="line"><span class="keyword">restart</span>: <span class="keyword">on</span>-failure</span><br><span class="line"><span class="keyword">restart</span>: unless-stopped</span><br></pre></td></tr></table></figure></li><li><p>参数说明:</p><blockquote><p><code>no</code>:是默认的重启策略，在任何情况下都不会重启容器<br><code>always</code>:容器总是重新启动<br><code>on-failure</code>:在容器非正常退出时(退出状态非0)，才会重启容器<br><code>unless-stopped</code>:在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</p></blockquote></li><li><p><code>swarm集群</code>模式下，必须改用<code>restart_policy</code></p></li></ul><hr><ol start="14"><li><strong>secrets</strong></li></ol><ul><li>用于存储敏感数据</li><li>例如密码：<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">mysql:</span></span><br><span class="line"><span class="symbol">  image:</span> mysql</span><br><span class="line"><span class="symbol">  environment:</span></span><br><span class="line"><span class="symbol">    MYSQL_ROOT_PASSWORD_FILE:</span> <span class="meta-keyword">/run/</span>secrets/my_secret</span><br><span class="line"><span class="symbol">  secrets:</span></span><br><span class="line">    - my_secret</span><br><span class="line"></span><br><span class="line"><span class="symbol">secrets:</span></span><br><span class="line"><span class="symbol">  my_secret:</span></span><br><span class="line"><span class="symbol">    file:</span> ./my_secret.txt</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="15"><li><strong>security_opt</strong></li></ol><ul><li>修改容器默认的<code>schema</code>标签</li><li>使用说明:<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">security-opt：</span><br><span class="line">  - <span class="keyword">label</span><span class="bash">:user:USER   <span class="comment"># 设置容器的用户标签</span></span></span><br><span class="line">  - <span class="keyword">label</span><span class="bash">:role:ROLE   <span class="comment"># 设置容器的角色标签</span></span></span><br><span class="line">  - <span class="keyword">label</span><span class="bash">:<span class="built_in">type</span>:TYPE   <span class="comment"># 设置容器的安全策略标签</span></span></span><br><span class="line">  - <span class="keyword">label</span><span class="bash">:level:LEVEL  <span class="comment"># 设置容器的安全等级标签</span></span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="16"><li><strong>stop_grace_period</strong></li></ol><ul><li>指定在容器无法处理<code>SIGTERM</code>(或者任何<code>stop_signal</code>的信号)，等待多久后发送<code>SIGKILL</code>信号关闭容器</li><li>实现语法:<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">stop_grace_period: <span class="number">1</span>s # 等待 <span class="number">1</span> 秒</span><br><span class="line">stop_grace_period: <span class="number">1</span>m30s # 等待 <span class="number">1</span> 分 <span class="number">30</span> 秒</span><br></pre></td></tr></table></figure></li><li>默认的等待时间是 10 秒</li></ul><hr><ol start="17"><li><strong>stop_signal</strong></li></ol><ul><li>设置停止容器的替代信号</li><li>默认情况下使用<code>SIGTERM</code></li><li>以下示例，使用<code>SIGUSR1</code>替代信号<code>SIGTERM</code>来停止容器<blockquote><p><code>stop_signal: SIGUSR1</code></p></blockquote></li></ul><hr><ol start="18"><li><strong>sysctls</strong></li></ol><ul><li>设置容器中的内核参数，可以使用数组或字典格式</li><li>实现语法:<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sysctls:</span><br><span class="line">  net<span class="selector-class">.core</span><span class="selector-class">.somaxconn</span>: <span class="number">1024</span></span><br><span class="line">  net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_syncookies</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">sysctls:</span><br><span class="line">  - net<span class="selector-class">.core</span>.somaxconn=<span class="number">1024</span></span><br><span class="line">  - net<span class="selector-class">.ipv4</span>.tcp_syncookies=<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="19"><li><strong>tmpfs</strong></li></ol><ul><li>在容器内安装一个临时文件系统</li><li>可以是单个值或列表的多个值</li><li>实现语法:<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">tmpfs: /<span class="keyword">run</span></span><br><span class="line"></span><br><span class="line"><span class="bash">tmpfs:</span></span><br><span class="line">  - /<span class="keyword">run</span></span><br><span class="line"><span class="bash">  - /tmp</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="20"><li><strong>ulimits</strong></li></ol><ul><li>覆盖容器默认的<code>ulimit</code></li><li>实现语法:<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">  <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">  <span class="attr">nofile:</span></span><br><span class="line">    <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure></li></ul><hr><ol start="21"><li><strong>volumes</strong></li></ol><ul><li>将主机的数据卷或着文件挂载到容器里</li><li>实现语法:<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">"3.7"</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">db</span>:</span><br><span class="line">    <span class="attribute">image</span>: <span class="attribute">postgres</span>:latest</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - <span class="string">"/localhost/postgres.sock:/var/run/postgres/postgres.sock"</span></span><br><span class="line">      - <span class="string">"/localhost/data:/var/lib/postgresql/data"</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Compose-2</title>
    <url>/2020/02/08/Docker-Compose-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Compose内的YML指令参考"><a href="#Compose内的YML指令参考" class="headerlink" title="Compose内的YML指令参考"></a>Compose内的YML指令参考</h3><ul><li>为了通过使用compose，来让docker自动化配置程序与服务，必须编写YML文件(脚本)</li></ul><ol><li><strong>version</strong></li></ol><ul><li>指定本yml依从于compose哪个版本制定的</li></ul><ol start="2"><li><strong>build</strong></li></ol><ul><li>指定为构建镜像上下文路径</li><li>例如nginx服务，指定为从上下文路径./dir/Dockerfile 所构建的镜像</li><li>参数明细:</li></ul><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">context</td><td align="left">上下文路径</td></tr><tr><td align="left">dockerfile</td><td align="left">指定构建镜像的Dockerfile文件命</td></tr><tr><td align="left">args</td><td align="left">添加构建参数，这是只能在构建过程中访问的环境变量</td></tr><tr><td align="left">labels</td><td align="left">设置构建镜像的标签</td></tr><tr><td align="left">target</td><td align="left">多层构建，可以指定构建哪一层</td></tr></tbody></table><hr><ol start="3"><li><strong>cap_add，cap_drop</strong><br>添加或删除容器拥有的宿主机的内核功能<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">cap_add:</span></span><br><span class="line">  - ALL <span class="meta"># 开启全部权限</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">cap_drop:</span></span><br><span class="line">  - SYS_PTRACE <span class="meta"># 关闭 ptrace权限</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><strong>cgroup_parent</strong></li></ol><ul><li>为容器指定父<code>cgroup</code>组，意味着将继承该组的资源限制<blockquote><p><code>cgroup_parent: m-executor-abcd</code></p></blockquote></li></ul><ol start="5"><li><strong>command</strong></li></ol><ul><li>覆盖容器启动的默认命令<blockquote><p><code>cmmand: [&quot;bundle&quot;, &quot;exec&quot;, &quot;thin&quot;, &quot;-p&quot;, &quot;3000&quot;]</code></p></blockquote></li></ul><ol start="6"><li><strong>container_name</strong></li></ol><ul><li>指定自定义容器名称，而不是生成的默认名称<blockquote><p><code>container_name: my-web-container</code></p></blockquote></li></ul><hr><ol start="7"><li><strong>depends_on</strong></li></ol><ul><li>设置依赖关系</li></ul><blockquote><p><code>docker-compose up</code>:以依赖性顺序启动服务，在以下示例中，先启动<code>db</code>和<code>redis</code>，才会启动<code>web</code><br><code>docker-compose up SERVICE</code>:自动包含<code>SERVICE</code>的依赖项，在以下示例中，<code>docker-compose up web</code>还将创建并启动<code>db</code>和<code>redis</code><br><code>docker-compose stop</code>:按依赖关系顺序停止服务，在以下示例中，<code>web</code>在<code>db</code>和<code>redis</code>之前停止</p></blockquote><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  web:</span></span><br><span class="line"><span class="symbol">    build:</span> .</span><br><span class="line"><span class="symbol">    depends_on:</span></span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line"><span class="symbol">  redis:</span></span><br><span class="line"><span class="symbol">    image:</span> redis</span><br><span class="line"><span class="symbol">  db:</span></span><br><span class="line"><span class="symbol">    image:</span> postgres</span><br></pre></td></tr></table></figure><ul><li>此时的<code>web</code>服务不会等待<code>redis</code>和<code>db</code>完全启动之后才启动</li></ul><hr><ol start="8"><li><strong>deploy</strong></li></ol><ul><li>指定与服务的部署和运行有关的配置</li><li>只在 swarm 模式下才会有用<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"xxx"</span>  <span class="comment"># 服务版本</span></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 服务配置</span></span><br><span class="line">  <span class="attr">redis:</span>  <span class="comment"># redis服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span>  <span class="comment"># 指定容器运行的镜像</span></span><br><span class="line">    <span class="attr">deploy:</span>  <span class="comment"># 开始定义与该镜像有关的配置</span></span><br><span class="line">      <span class="string">mode：replicated</span>  <span class="comment"># 定义需要使用此参数配置具体运行的节点数量</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">6</span>  </span><br><span class="line">      <span class="attr">endpoint_mode:</span> <span class="string">dnsrr</span>  <span class="comment"># 访问集群服务的方式，这里是dns轮询(DNSRR)</span></span><br><span class="line">      <span class="attr">labels:</span>  <span class="comment"># 给服务设上标签</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">"This redis service label"</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="comment">#配置服务器资源使用的限制，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用，从而避免占用资源过高出现异常</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">'0.50'</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">'0.25'</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">      <span class="attr">restart_policy:</span>  <span class="comment"># 配置如何在退出容器时重新启动容器</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>可选参数一览与对上述参数解释:</strong></p><ul><li><code>endpoint_mode</code>:访问集群服务的方式<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">endpoint_mode</span>: vip</span><br><span class="line"># Docker 集群服务一个对外的虚拟<span class="built_in">ip</span>，所有的请求都会通过这个虚拟<span class="built_in">ip</span>到达集群服务内部的机器</span><br><span class="line"><span class="symbol">endpoint_mode</span>: dnsrr</span><br><span class="line"># DNS 轮询(DNSRR)，所有的请求会自动轮询获取到集群<span class="built_in">ip</span>列表中的一个<span class="built_in">ip</span>地址</span><br></pre></td></tr></table></figure></li><li><code>labels</code>:在服务上设置标签，可以用容器上的<code>labels</code>(跟<code>deploy</code>同级的配置)覆盖<code>deploy</code>下的<code>labels</code></li><li><code>mode</code>:指定服务提供的模式<blockquote><p><code>replicated</code>:复制服务，复制指定服务到集群的机器上<br><code>global</code>:全局服务，服务将部署至集群的每个节点</p></blockquote></li></ul><p><strong><code>replicated</code>与<code>global</code>的区别</strong></p><ul><li>逻辑简述:</li><li>所有的节点副本都处于本地主机的集群网络内</li><li>当选择<code>replicated</code>时，服务的副本只会被复制到所选节点的机器上</li><li>而选择<code>global</code>时，服务的副本会被复制到节点的每一个机器上，包括控制节点(manager node)</li><li>工作节点(worker node)，控制节点(manager node)</li></ul><hr><ol start="9"><li><strong><code>replicas: mode</code></strong></li></ol><ul><li>当此选项后的参数为<code>replicated</code>时，需要使用此参数配置具体运行的节点数量</li></ul><ol start="10"><li><strong><code>resources:</code></strong></li></ol><ul><li>用于配置服务器资源使用的限制，例如上例子，配置<code>redis</code>集群运行需要的<code>cpu</code>的百分比和内存的占用，避免占用资源过高出现异常</li></ul><hr><ol start="11"><li><strong><code>restart_policy:</code></strong></li></ol><ul><li>用于配置如何在退出容器时重新启动容器</li><li>参数明细<blockquote><p><code>condition</code>:可选<code>none</code>，<code>on-failure</code>或者<code>any</code>(默认值:<code>any</code>)<br><code>delay</code>:设置多久之后重启(默认值:0)<br><code>max_attempts</code>:尝试重新启动容器的次数，超出次数，则不再尝试(默认值:一直重试)<br><code>window</code>:设置容器重启超时时间(默认值:0)</p></blockquote></li></ul><hr><ol start="12"><li><strong><code>rollback_config</code></strong></li></ol><ul><li>用于配置在更新失败的情况下应如何回滚服务</li><li>参数明细:<blockquote><p><code>parallelism</code>:一次要回滚的容器数，如果设置为0，则所有容器将同时回滚<br><code>delay</code>:每个容器组回滚之间等待的时间(默认为0s)<br><code>failure_action</code>:如果回滚失败的处理方法(下一条所描述的内容)，其中一个<code>continue</code>或者<code>pause</code>(默认<code>pause</code>)<br><code>monitor</code>:每个容器更新后，持续观察是否失败了的时间(<code>ns|us|ms|s|m|h</code>)(默认为0s)<br><code>max_failure_ratio</code>:在回滚期间可以容忍的故障率(默认为0)<br><code>order</code>:回滚期间的操作顺序，其中一个<code>stop-first</code>(串行回滚)，或者<code>start-first</code>(并行回滚)(默认<code>stop-first</code>)</p></blockquote></li></ul><hr><ol start="13"><li><strong><code>update_config</code></strong></li></ol><ul><li><p>用于配置应如何更新服务，对于配置滚动更新很有用</p></li><li><p>参数明细:</p><blockquote><p><code>parallelism</code>:一次更新的容器数<br><code>delay</code>:在更新一组容器之间等待的时间<br><code>failure_action</code>:如果更新失败的解决办法依旧是下一条所描述的内容，其中一个<code>continue</code>，<code>rollback</code>或者<code>pause</code>(默认:<code>pause</code>)<br><code>monitor</code>:每个容器更新后，持续观察是否失败了的时间(<code>ns|us|ms|s|m|h</code>)(默认为0s)<br><code>max_failure_ratio</code>:在更新过程中可以容忍的故障率<br><code>order</code>:回滚期间的操作顺序，其中一个<code>stop-first</code>(串行回滚)，或者<code>start-first</code>(并行回滚)(默认stop-first)</p></blockquote></li><li><p>有些低版本的服务可能不支持<code>docker compose</code>所提供的服务</p></li><li><p>还有一半，放在下一篇写</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Compose-1</title>
    <url>/2020/02/07/Docker-Compose-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p><strong>概述:</strong></p><ul><li>Compose是用于定义和运行多容器Docker应用程序的工具</li><li>通过Compose，可以使用YML文件来配置应用程序需要的所有服务</li><li>最后通过使用一个命令，就可以从 YML 文件配置中创建并启动所有服务</li><li><a href="https://yaml.org/" target="_blank" rel="noopener">YAML</a>官方文档</li></ul><hr><p><strong>安装 Compose</strong></p><ul><li><p>Github地址:<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/docker/compose/releases</code></p></blockquote></li><li><p>下载源码包(二进制文件)</p></li><li><p>Docker Compose当前的稳定版本：</p><blockquote><p><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></p></blockquote></li><li><p>其中的1.25.4为版本号，可用于指定版本</p></li><li><p>提权至可执行文件</p><blockquote><p><code>$ sudo chmod +x /usr/local/bin/docker-compose</code></p></blockquote></li><li><p>设置环境变量的软链接</p><blockquote><p><code>$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></p></blockquote></li><li><p>查看版本，以测试是否安装成功</p><blockquote><p><code>$ docker-compose --version</code></p></blockquote></li><li><p>对于Alpine/Linux发行版，需要安装依赖包:<code>py-pip</code>，<code>python-dev</code>，<code>libffi-dev</code>，<code>openssl-dev</code>，<code>gcc</code>，<code>libc-dev</code>，以及<code>make</code></p></li></ul><hr><p><strong>使用</strong></p><ul><li>对Compose进行使用大概可分为三个步骤:<blockquote><p>使用Dockerfile定义应用程序的环境<br>使用<code>docker-compose.yml</code>文件定义构成应用程序的服务，使其可以在隔离环境中一起运行<br>最后，执行<code>docker-compose up</code>命令来启动并运行整个应用程序</p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Dockefile-1</title>
    <url>/2020/02/07/Docker-Dockefile-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p><strong>概述:</strong></p><ul><li>Dockerfile是用于构建镜像的文本文件</li><li>文本内容包含构建镜像所需的指令和说明</li></ul><p><strong>关于上下文的概念:</strong></p><ul><li>上下文路径，是指Docker在构建镜像时如果需要使用到本机内的文件(比如复制)，<code>docker build</code>命令得知所指定的路径后，会将该路径下的所有内容打包</li><li>Docker的运行模式是C/S，主机为C，Docker引擎是S</li><li>实际的构建过程是在Docker引擎内完成的，所以此时无法调用到本机内的文件，此时就需要人为的把本机指定目录下的所有文件打包，并提供给Docker引擎进行调用</li><li>如果未说明最后一个参数(未指定上下文所在路径)，那么默认上下文路径就是Dockerfile所在的目录下</li><li>上下文路径下所有的文件都会打包给Docker引擎，如果无用文件过多的话会造成执行过程缓慢</li></ul><hr><p><strong>Dockerfile内的基本指令</strong></p><ol><li><strong>FROM</strong></li></ol><ul><li>定制的镜像都是基于FROM的镜像，在选择完要定义的基础镜像之后，后续的操作都是基于该基础镜像的</li><li>格式:<blockquote><p><code>FROM &lt;所选基础镜像名&gt;</code></p></blockquote></li></ul><hr><ol start="2"><li><strong>RUN</strong></li></ol><ul><li>用于执行后面跟着的命令行命令，有两种格式<blockquote><p>Shell格式: RUN [命令行命令]<br>Exec格式: RUN [“可执行文件”, “参数一”, “参数二”]</p></blockquote></li><li>Dockefile每次执行指令都会在docker上新建一层，多余的层会造成镜像膨胀</li><li>可以用&amp;&amp;符号来连接命令，从而不进行指令的线性执行，目的就是让所有的指令都集成到一层内<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">RUN</span> <span class="string">xxx \</span></span><br><span class="line">   <span class="meta">&amp;&amp;</span> <span class="string">xxx \</span></span><br><span class="line">   <span class="meta">&amp;&amp;</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>CMD</strong></li></ol><ul><li>类似于<code>RUN</code>指令，用于运行程序</li><li>二者的区别在于其运行的时间点不同:<blockquote><p><code>CMD</code>在<code>docker run</code>时运行<br><code>RUN</code>是在<code>docker build</code>时运行</p></blockquote></li><li>作用:<blockquote><p>为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束<br><code>CMD</code>指令指定的程序可被<code>docker run</code>命令行参数中指定要运行的程序所覆盖</p></blockquote></li><li>格式:<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;shell 命令&gt; </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"&lt;可执行文件或命令&gt;"</span>,<span class="string">"&lt;param1&gt;"</span>,<span class="string">"&lt;param2&gt;"</span>,...] </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"&lt;param1&gt;"</span>,<span class="string">"&lt;param2&gt;"</span>,...]</span></span><br></pre></td></tr></table></figure><blockquote><p>第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是<code>.sh</code>，所以可以直接使用第二种格式<br><code>最后一种写法是为</code>ENTRYPOINT<code>指令指定的程序提供默认参数</code></p></blockquote></li></ul><ol start="4"><li><strong>ENTRYPOINT</strong></li></ol><ul><li><p>类似于<code>CMD</code>指令，但其不会被<code>docker run</code>的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给<code>ENTRYPOINT</code>指令指定的程序</p></li><li><p>但如果运行<code>docker run</code>时使用了<code>--entrypoint</code>选项，此选项的参数可当作要运行的程序覆盖<code>ENTRYPOINT</code>指令指定的程序</p></li><li><p>特点就是在执行<code>docker run</code>的时候可以指定<code>ENTRYPOINT</code>运行所需的参数</p></li><li><p>但如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效</p></li><li><p>格式:</p><blockquote><p><code>ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]</code></p></blockquote></li><li><p>还可以搭配<code>CMD</code>命令使用:一般是变参才会使用<code>CMD</code>，这里的<code>CMD</code>等于是在给<code>ENTRYPOINT</code>传参</p></li><li><p>这里假设已有了某镜像</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 某镜像</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"&lt;某镜像&gt;"</span>, <span class="string">"-c"</span>] <span class="comment">#定参</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"&lt;/执行脚本所在文件目录&gt;"</span>] <span class="comment">#变参</span></span></span><br></pre></td></tr></table></figure></li><li><p>不传参运行</p><blockquote><p><code>$ docker run &lt;某镜像&gt;</code></p></blockquote></li><li><p>此时容器内会默认(等于)运行以下命令，启动主进程</p><blockquote><p><code>&lt;某镜像&gt; -c &lt;/执行脚本所在文件目录&gt;</code></p></blockquote></li><li><p>传参运行</p><blockquote><p><code>$ docker run &lt;某镜像&gt; -c &lt;/执行脚本所在文件目录&gt;</code></p></blockquote></li><li><p>容器内会默认(等于)运行以下命令，启动主进程<code>(/执行脚本所在文件目录:假设容器内已有此文件)</code></p><blockquote><p><code>&lt;某镜像&gt; -c &lt;/执行脚本所在文件目录&gt;</code></p></blockquote></li><li><p>简述</p><blockquote><p>指定了参数以后可以选择以传参或不传参的模式启动<br>不用传参就是直接启动所键入命令，用传参就是使用已指定的参数</p></blockquote></li></ul><hr><ol start="5"><li><strong>COPY</strong></li></ol><ul><li>用于复制的指令，可以从上下文目录复制文件或者目录到容器内的指定路径</li><li>使用格式:<blockquote><p><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;... &lt;目标路径&gt;</code><br><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></p></blockquote></li><li>参数说明:<blockquote><p><code>[--chown=&lt;user&gt;:&lt;group&gt;]</code>为可选参数，可以让用户改变复制到容器内文件的拥有者和属组<br><code>&lt;源路径&gt;</code>用于表示源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足Go的<code>filepath.Match</code>规则<br><code>&lt;目标路径&gt;</code>用于在容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建</p></blockquote></li></ul><ol start="6"><li><strong>ADD</strong></li></ol><ul><li>ADD和COPY的使用格式一致</li><li>同样需求下，官方推荐使用COPY</li><li>ADD的优缺点:<blockquote><p>ADD的优点:在执行<code>&lt;源文件&gt;</code>为<code>tar</code>压缩文件的话，压缩格式为<code>gzip</code>，<code>bzip2</code>以及<code>xz</code>的情况下，会自动复制并解压到<code>&lt;目标路径&gt;</code><br>ADD的缺点:在不解压的前提下，无法复制<code>tar</code>压缩文件，会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢</p></blockquote></li><li>具体是否使用，可以根据所处情况是否需要自动解压来决定</li></ul><hr><ol start="7"><li><strong>ENV</strong></li></ol><ul><li><p>用于设置与定义环境变量，定义之后可以直接使用环境变量</p></li><li><p>使用格式:</p><blockquote><p><code>ENV &lt;key&gt; &lt;value&gt;</code><br><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></p></blockquote></li><li><p>以下示例设置<code>NODE_VERSION = 7.2.0</code>，在后续的指令中可以直接通过<code>$NODE_VERSION</code>进行引用</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc"</span></span></span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li><strong>ARG</strong></li></ol><ul><li>构建参数，与<code>ENV</code>作用一致，不过作用域不一样，<code>ARG</code>设置的环境变量仅对<code>Dockerfile</code>内有效，也就是说只有<code>docker build</code>的过程中有效，构建好的镜像内不存在此环境变量</li><li>构建命令<code>docker build</code>中可以用<code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code>来覆盖</li><li>使用格式：<blockquote><p><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p></blockquote></li></ul><hr><ol start="9"><li><strong>VOLUME</strong></li></ol><ul><li>定义匿名数据卷</li><li>在启动容器时忘记挂载数据卷，会自动挂载到匿名卷</li><li>可以避免重要的数据因容器重启而丢失</li><li>还可以避免容器不断变大</li><li>使用格式:<blockquote><p><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code><br><code>VOLUME &lt;路径&gt;</code></p></blockquote></li><li>在启动容器<code>docker run</code>的时候，可以使用参数<code>-v</code>修改挂载点</li></ul><hr><ol start="10"><li><strong>EXPOSE</strong></li></ol><ul><li>用于声明端口</li><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</li><li>在运行时使用随机端口映射时，也就是<code>docker run -P</code>时，会自动随机映射<code>EXPOSE</code>的端口</li><li>使用格式:<blockquote><p><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p></blockquote></li></ul><hr><ol start="11"><li><strong>WORKDIR</strong></li></ol><ul><li>用于指定工作目录</li><li>用<code>WORKDIR</code>指定的工作目录，会在构建镜像的每一层中都存在(<code>WORKDIR</code>指定的工作目录，必须是提前创建好的)</li><li>在使用<code>docker build</code>构建镜像过程中的，每一个<code>RUN</code>命令都是新建的一层，只有通过<code>WORKDIR</code>创建的目录才会一直存在</li><li>使用格式:<blockquote><p><code>WORKDIR &lt;工作目录路径&gt;</code></p></blockquote></li></ul><ol start="12"><li><strong>USER</strong></li></ol><ul><li>用于指定执行后续命令的用户和用户组，用于切换后续命令执行的用户(用户和用户组必须提前已经存在)</li><li>使用格式:<blockquote><p><code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p></blockquote></li></ul><hr><ol start="13"><li><strong>HEALTHCHECK</strong></li></ol><ul><li>用于指定某个程序或者指令来监控Docker容器服务的运行状态</li><li>使用格式:<blockquote><p><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>:设置检查容器健康状况的命令<br><code>HEALTHCHECK NONE</code>:如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令<br><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code> : 这个<code>CMD</code>后面跟随的命令使用，可以参考<code>CMD</code>的用法</p></blockquote></li></ul><hr><ol start="14"><li><strong>ONBUILD</strong></li></ol><ul><li>用于延迟构建命令的执行</li><li>简述:<blockquote><p>在<code>Dockerfile</code>里用<code>ONBUILD</code>指定的命令，在本次构建镜像的过程中不会执行(假设镜像为test-build)<br>当有新的<code>Dockerfile</code>使用了之前构建的镜像<code>FROM test-build</code>，这是执行新镜像的<code>Dockerfile</code>构建时候，<code>会执行 test-build</code>的<code>Dockerfile</code>里的<code>ONBUILD</code>指定的命令</p></blockquote></li><li>使用格式:<blockquote><p><code>ONBUILD &lt;其它指令&gt;</code></p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-4</title>
    <url>/2020/02/06/Docker-4/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Docker-镜像，网络，连接以及仓库的使用"><a href="#Docker-镜像，网络，连接以及仓库的使用" class="headerlink" title="Docker-镜像，网络，连接以及仓库的使用"></a>Docker-镜像，网络，连接以及仓库的使用</h3><p><strong>Docker 容器镜像的使用</strong></p><ul><li>管理和使用本地的docker镜像</li><li>查看本地主机已有镜像<blockquote><p><code>$ docker images</code></p></blockquote></li><li>各参数说明:</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">REPOSITORY</td><td align="left">表示镜像的仓库源</td></tr><tr><td align="left">TAG</td><td align="left">镜像的标签</td></tr><tr><td align="left">IMAGE ID</td><td align="left">镜像ID</td></tr><tr><td align="left">CREATED</td><td align="left">镜像创建时间</td></tr><tr><td align="left">SIZE</td><td align="left">镜像大小</td></tr></tbody></table><ul><li>同一仓库源可以有多个<code>TAG</code>，代表这个仓库源的不同个版本</li><li><code>REPOSITORY:TAG</code>用于定义不同的镜像</li><li>例如使用<code>debian</code>，如果不指定一个镜像的版本标签，Docker 将默认使用<code>debian:latest</code>镜像</li></ul><p><strong>获取镜像</strong></p><ul><li>执行命令拉取10.2.0版本的debian镜像<br><code>$ docker pull debian:10.2.0</code><blockquote><p>获取之后可直接基于此镜像来运行容器<br>还可以从<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>上获取镜像<br><code>https://hub.docker.com/</code></p></blockquote></li></ul><p><strong>搜索镜像</strong></p><ul><li><p>执行命令搜索指定镜像名的镜像</p><blockquote><p><code>$ docker search [镜像名]</code><br>比如搜索一个httpd的镜像来用作web服务<br><code>$ docker search httpd</code></p></blockquote></li><li><p>各参数说明:</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NAME</td><td align="left">镜像仓库源的名称</td></tr><tr><td align="left">DESCRIPTION</td><td align="left">镜像的描述</td></tr><tr><td align="left">OFFICIAL</td><td align="left">是否 docker 官方发布</td></tr><tr><td align="left">stars</td><td align="left">类似 Github 里面的star</td></tr><tr><td align="left">AUTOMATED</td><td align="left">是否支持自动构建</td></tr></tbody></table></li></ul><blockquote><p>然后直接拉取镜像<br><code>$ docker pull httpd</code></p></blockquote><p><strong>删除镜像</strong></p><ul><li>执行以下命令:<blockquote><p><code>$ docker rmi 镜像名</code></p></blockquote></li></ul><hr><p><strong>创建镜像/制作镜像</strong></p><ul><li>当docker的镜像仓库中没有所需求的docker镜像时，可以制作镜像或对镜像进行修改再上传</li></ul><p><strong>更新镜像</strong></p><ul><li>从已经创建的容器中更新镜像，并且提交此镜像<blockquote><p>更新镜像之前，基于所选镜像来创建一个容器<br><code>$ docker run -t -i debian:10.2.0 /bin/bash</code><br>在容器内使用<code>apt-get update</code>命令来进行更新<br>操作完成之后，键入<code>exit</code>退出容器</p></blockquote></li><li>使用<code>docker commit</code>来提交容器副本<br><code>$ docker commit -m=&quot;has update&quot; -a=&quot;name&quot; [Containers ID] /debian:v2</code><blockquote><p><code>参数-m</code>用于指定提交的描述信息<br><code>参数-a</code>用于指定镜像作者<br><code>Containers ID</code>:容器 ID<br><code>debian:v2:</code>指定要创建的目标镜像名</p></blockquote></li><li>最后<code>docker images</code>查看新镜像，并用其启动容器</li></ul><p><strong>构建镜像</strong></p><ul><li>使用命令<code>docker build</code>，创建一个新的镜像</li><li>创建名为<code>Dockerfile</code>的文件，其中包含的指令用来指示Docker如何构建所选镜像</li><li>编写完Dockerfile之后通过docker build命令来构建一个新的镜像<blockquote><p><code>docker build -t [目标镜像名] [指定绝对路径]</code><br><code>参数-t</code>用于指定要创建的目标镜像名<br><code>参数.</code>用于指定Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</p></blockquote></li></ul><p><strong>设置镜像标签</strong></p><ul><li><code>docker tag</code>命令，为镜像添加一个新的标签<blockquote><p><code>docker tag [镜像ID] [用户名称/镜像源名(repository name)]:[新的标签名(tag)]</code></p></blockquote></li></ul><hr><p><strong>Docker 容器连接</strong></p><ul><li>容器中可以运行一些网络应用，从实现而让任意机器可以通过网络端口访问运行在docker容器内部的服务</li><li>要实现让任意机器(内部与外部)可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射</li><li>还可以指定容器绑定的网络地址，比如绑定本地主机的<code>127.0.0.1</code></li></ul><p><strong>网络端口映射的管理</strong></p><blockquote><p><code>docker run -d -P [网络服务名称] [服务的启动脚本]</code></p></blockquote><ul><li>参数说明:</li><li>参数-P用于创建容器，此时该网络服务绑定本地主机的默认端口</li><li>参数-p用于指定容器端口所绑定的主机端口</li><li>具体区别<blockquote><p>参数-P是让容器内部端口随机映射到主机的高端口<br>参数-p是让容器内部端口绑定到指定的主机端口</p></blockquote></li></ul><blockquote><p><code>docker run -d -p [原端口:指定绑定端口] [应用程序名称] [程序的启动脚本]</code></p></blockquote><ul><li>然后执行docker ps 就会发现服务已改变端口映射</li></ul><p><strong>指定容器绑定的网络地址</strong></p><ul><li>这里绑定127.0.0.1:<blockquote><p><code>docker run -d -p [127.0.0.1:原端口:指定绑定端口] [应用程序名称] [程序的启动脚本]</code></p></blockquote></li><li>此时就可以通过绑定的IP地址，来访问容器被指定绑定的接口</li><li>默认都是绑定TCP端口，如果要绑定UDP端口，可以在端口后面加上<code>/udp</code></li><li><code>docker port</code>命令可以让我们快捷地查看端口的绑定情况</li></ul><hr><h3 id="Docker-容器互连"><a href="#Docker-容器互连" class="headerlink" title="Docker 容器互连"></a>Docker 容器互连</h3><ul><li>端口映射不是唯一把Docker连接到另一个容器的方法</li><li>Docker内有一个连接系统允许将多个容器进行连通，以此共享被连接容器的信息</li><li>Docker连接会创建一个子父关系，其中父容器可以看到子容器的信息</li><li>先给容器进行统一的命名，以方便管理<blockquote><p><code>docker run -d -P --name [自定义容器名] [应用程序名称] [程序的启动脚本]</code><br><code>参数--name</code>用于定义容器名</p></blockquote></li></ul><p><strong>创建docker网络</strong></p><blockquote><p><code>docker network create -d bridge [Containers-net]</code><br><code>参数-d</code>用于指定Docker的网络类型，有<code>bridge</code>与<code>overlay</code><br>其中<code>overlay</code>网络类型用于<code>Swarm mode</code></p></blockquote><p><strong>连接容器</strong></p><ul><li>运行一个容器并连接到新建的<code>Containers-net</code>网络<blockquote><p><code>$ docker run -itd --name test1 --network Containers-net debian /bin/bash</code></p></blockquote></li><li>打开新的终端，再运行一个容器并加入到 test-net 网络:<blockquote><p><code>$ docker run -itd --name test2 --network Containers-net debian /bin/bash</code></p></blockquote></li><li>使用test1和test2两个容器互相ping一下以测试是否建立联系，如果没有ping命令就进行安装<blockquote><p><code>apt install iputils-ping</code></p></blockquote></li><li>可以在一个容器里安装好之后把容器包装成镜像，再以新的镜像重新运行以上两个容器</li><li>如果有多个容器之间需要互相连接，可以使用<code>Docker Compose</code></li></ul><p><strong>配置容器DNS</strong></p><ul><li><p><code>/etc/docker/daemon.json</code>文件中增加以下内容来设置全部容器的DNS:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dns"</span> : [</span><br><span class="line">    <span class="string">"111.111.111.111"</span>,</span><br><span class="line">    <span class="string">"3.3.3.3"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置后，启动容器的DNS会自动配置为<code>111.111.111.111 和 3.3.3.3</code></p></li><li><p>配置完，需要重启Docker服务才能生效</p><blockquote><p><code>/etc/init.d/docker restart</code></p></blockquote></li><li><p>查看容器的DNS是否生效可以使用以下命令，它会输出容器的DNS信息:</p><blockquote><p><code>$ docker run -it --rm debian cat etc/resolv.conf</code></p></blockquote></li><li><p>只想在指定的容器设置 DNS，则可以使用以下命令</p><blockquote><p><code>docker run -it --rm host_debian --dns=111.111.111.111 --dns-search=test.com debian</code></p></blockquote></li><li><p>参数说明：</p><blockquote><p>参数<code>-h HOSTNAME</code>或<code>--hostname=HOSTNAME:</code>设定容器的主机名，它会被写到容器内的<code>/etc/hostname</code>和<code>/etc/hosts</code><br>参数<code>--dns=IP_ADDRESS:</code>添加DNS服务器到容器的<code>/etc/resolv.conf</code>中，让容器用这个服务器来解析所有不在<code>/etc/hosts</code>中的主机名<br>参数<code>--dns-search=DOMAIN:</code>设定容器的搜索域，当设定搜索域为<code>.example.com</code>时，在搜索一个名为<code>host</code>的主机时，DNS不仅搜索<code>host</code>，还会搜索<code>host.example.com</code><br>如果在容器启动时没有指定<code>--dns</code>和<code>--dns-search</code>，Docker会默认用宿主主机上的<code>/etc/resolv.conf</code>来配置容器的DNS</p></blockquote></li></ul><hr><p><strong>仓库管理</strong></p><ul><li><p>仓库(Repository)用于集中存放镜像</p></li><li><p>目前Docker官方维护了一个公共仓库Docker Hub</p></li><li><p>大部分需求都可以通过在Docker Hub中直接下载镜像来实现</p></li><li><p>网址为<code>https://hub.docker.com</code>，<a href="https://hub.docker.com" target="_blank" rel="noopener">跳转</a></p></li><li><p>使用之前需要注册账户</p></li><li><p>登陆Docker hub执行</p><blockquote><p><code>$ docker login</code></p></blockquote></li><li><p>退出 docker hub执行</p><blockquote><p><code>$ docker logout</code></p></blockquote></li><li><p>查找镜像</p><blockquote><p><code>$ docker search [镜像名]</code></p></blockquote></li><li><p>拉取镜像</p><blockquote><p><code>$ docker pull [镜像名]</code></p></blockquote></li></ul><p><strong>推送镜像</strong></p><ul><li>把本地的镜像推送到Docker Hub</li><li><code>username</code>为Docker账号的用户名<blockquote><p><code>$ docker tag [镜像名]:[版本] [username/镜像名:版本]</code><br><code>$ docker image ls</code><br><code>$ docker push [username/镜像名:版本]</code></p></blockquote></li><li>最后查看一下<blockquote><p><code>$ docker search [username/镜像名]</code></p></blockquote></li></ul><hr><p><strong>参考资料</strong></p><p>官方文档:<a href="https://docs.docker.com/" target="_blank" rel="noopener">跳转</a><br><code>https://docs.docker.com/</code></p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Docker-3</title>
    <url>/2020/02/06/Docker-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Docker容器的基本命令与基本应用"><a href="#Docker容器的基本命令与基本应用" class="headerlink" title="Docker容器的基本命令与基本应用"></a>Docker容器的基本命令与基本应用</h3><p><strong>基本操作命令</strong></p><p><strong>拉取镜像</strong><br><code>$ docker pull --help</code><br><code>$ docker pull [OPTIONS] NAME:[:TAG|@DIGEST]</code><br>如果本地没有镜像，用pull从仓库里拉个镜像用<br><code>$ docker pull debian</code></p><p><strong>基于已有镜像启动容器服务</strong><br><code>$ docker run --help</code><br><code>$ docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code><br><code>$ docker run -i -t debian /bin/bash</code></p><ul><li><code>参数-i</code>启动交互式选项，<code>参数-t</code>启动终端选项</li><li><code>debian</code>:也就是debian镜像</li><li><code>/bin/bash</code>:放在镜像后的是被执行指令，这里用<code>/bin/bash</code>来启动交互式<code>Shell</code></li><li>退出当前容器内终端执行<code>exit</code></li></ul><hr><p><strong>查看所有容器</strong><br><code>$ docker ps -a</code></p><ul><li>查询最后一次创建的容器<br><code>$ docker ps -l</code></li><li>输出参数说明</li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">CONTAINER ID</td><td align="left">容器ID</td></tr><tr><td align="left">IMAGE</td><td align="left">使用的镜像</td></tr><tr><td align="left">COMMAND</td><td align="left">启动容器时运行的命令</td></tr><tr><td align="left">CREATED</td><td align="left">容器的创建时间</td></tr><tr><td align="left">STATUS</td><td align="left">容器状态</td></tr><tr><td align="left">NAMES</td><td align="left">自动分配的容器名称</td></tr></tbody></table><ul><li>其中状态有七种<blockquote><p>created:已创建<br>restarting:重启中<br>running:运行中<br>removing:迁移中<br>paused:暂停<br>exited:停止<br>dead:死亡<br>PORTS:容器的端口信息和使用的连接类型(tcp\udp)</p></blockquote></li></ul><hr><p><strong>启动一个已停止的容器</strong><br><code>$ docker start [容器ID]</code></p><ul><li><code>参数-d</code>用于指定容器的运行模式，加了此参数的程序默认不会进入程序，进入容器需要使用指令<code>docker exec</code></li><li>在后台内利用容器debian运行debian-test程序</li><li><code>$ docker run -i -t -d --name debian-test debian /bin/bash</code></li></ul><p><strong>停止容器</strong><br><code>$ docker stop [容器 ID]</code></p><p><strong>重启容器</strong><br><code>$ docker restart [容器 ID]</code></p><p><strong>进入容器</strong><br><code>$ docker attach/exec --help</code></p><ul><li>在执行<code>参数-d</code>后，容器启动后会进入后台</li><li>此时想要进入容器，可以通过以下指令进入：<blockquote><p>docker attach<br>docker exec(使用docker exec命令时退出容器终端，不会导致容器的停止)<br><code>$ docker attach 容器ID</code>(如果从这个容器退出，会导致容器的停止)<br><code>$ docker exec -i -t 容器ID /bin/bash</code>(从这个容器退出，不会导致容器的停止)</p></blockquote></li></ul><p><strong>导出本地的某个容器</strong><br><code>$ docker export [容器ID] &gt; [生成的文件名(可以是tar或其他压缩文件)]</code></p><blockquote><p>把指定ID的容器快照导入到本地文件，保存地址是现在所处目录</p></blockquote><p><strong>导入容器快照</strong><br><code>$ docker import --help</code><br><code>$ docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</code></p><blockquote><p>将快照文件<code>debian.tar</code>导入到镜像<code>image-file/debian:v1</code>内<br><code>$ cat docket/debian.tar | docker import - image-test/debian:v1</code><br>还可以通过指定URL或者某个目录来导入<br><code>$ docker import http://example.com/exampleimage.tgz example/imagerepo</code></p></blockquote><p><strong>删除容器</strong><br><code>$ docker rm -f [容器ID]</code></p><ul><li>清理所有已中止容器<br><code>$ docker container prune</code></li></ul><hr><p><strong>利用docker运行某个应用程序</strong></p><ul><li>拉取某个应用程序<br><code>$ docker pull [应用程序名]</code><br><code>$ docker run -d -P [被拉取的程序名] [运行脚本]</code><blockquote><p><code>参数-d</code>让容器在后台运行<br><code>参数-P</code>将容器内部使用的网络端口映射到我们使用的主机上<br>如果程序占用了某一端口，<code>docker ps</code>的时候会显示占用端口以及映射信息(PORST)</p></blockquote></li><li>通过<code>-p参数</code>来设置不一样的端口<br><code>$ docker run -d -p [原端口:指定端口] [被拉取的程序名] [运行脚本]</code></li></ul><p><strong>查看应用程序或容器使用的端口以及映射情况</strong><br><code>$ docker ps</code><br><code>$ docker port [容器ID/程序名]</code></p><p><strong>查看应用程序日志</strong><br><code>docker logs [容器ID/程序名]</code></p><blockquote><p>用于查看容器内部的标准输出<br><code>参数-f</code>用于让<code>docker logs</code>输出容器内部的标准输出，类似于Linux内的<code>tail -f</code>命令</p></blockquote><p><strong>查看应用程序进程</strong><br><code>$ docker top [容器ID/程序名]</code></p><p><strong>检查应用程序底层信息</strong><br><code>$ docker inspect [容器ID/程序名]</code></p><blockquote><p>会返回一个记录着关于选中应用程序的Docker容器配置和状态信息的文本</p></blockquote><p><strong>停止应用程序所在容器</strong><br><code>$ docker stop [容器ID/程序名]</code></p><p><strong>重启应用程序所在容器</strong><br><code>$ docker start [容器ID/程序名]</code></p><p><strong>移除应用程序所在容器</strong><br><code>$ docker rm [容器ID/程序名]</code></p><blockquote><p>删除容器时，容器必须是停止状态</p></blockquote><hr><p><strong>帮助命令:</strong></p><ul><li>直接执行<code>docker</code>，查看Docker客户端的所有可用指令选项</li><li>docker command –help，查看所选命令的帮助文件</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-2</title>
    <url>/2020/02/06/Docker-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="Docker-Engine-Community-install"><a href="#Docker-Engine-Community-install" class="headerlink" title="Docker Engine-Community install"></a>Docker Engine-Community install</h3><p><strong>Debian Docker 安装</strong></p><ul><li>Docker Engine-Community 支持版本:<br><code>Buster 10与Stretch 9 (stable) / Raspbian Stretch</code></li><li>Docker Engine-Community 支持架构:<br><code>x86_64(或amd64)armhf，和 arm64</code></li></ul><blockquote><p>选定主机的首次安装需要设置Docker仓库，用以从仓库安装和更新Docker，而Raspbian系统必须使用shell脚本安装</p></blockquote><p><strong>设置仓库</strong></p><p>安装apt依赖包，以通过HTTPS来获取仓库</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install <span class="string">\</span></span><br><span class="line">   apt-transport-https <span class="string">\</span></span><br><span class="line">   ca-certificates <span class="string">\</span></span><br><span class="line">   curl <span class="string">\</span></span><br><span class="line">   gnupg2 <span class="string">\</span></span><br><span class="line">   software-properties-common</span><br></pre></td></tr></table></figure><p><strong>添加Docker的官方GPG密钥</strong><br><code>$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</code></p><blockquote><p>通过搜索指纹的最后八个字符，验证目前主机是否拥有带指纹的密匙<br>密匙:<code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code><br>执行:<code>$ sudo apt-key fingerprint 0EBFCD88</code></p></blockquote><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">pub   <span class="number">4096</span>R/<span class="number">0</span>EBFCD88 <span class="number">2017</span><span class="number">-02</span><span class="number">-22</span></span><br><span class="line">      Key fingerprint = <span class="number">9</span>DC8 <span class="number">5822</span> <span class="number">9</span>FC7 DD38 <span class="number">854</span>A  E2D8 <span class="number">8</span>D81 <span class="number">803</span>C <span class="number">0</span>EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;<span class="symbol">docker@</span>docker.com&gt;</span><br><span class="line">sub   <span class="number">4096</span>R/F273FCD8 <span class="number">2017</span><span class="number">-02</span><span class="number">-22</span></span><br></pre></td></tr></table></figure><p><strong>设置稳定版仓库</strong></p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>\</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">   $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure><ul><li><code>lsb_release -cs</code>子命令用于返回Debian发行版的名称</li><li>Docker对未经测试和不受支持的Debian发行版不提供任何保证</li></ul><hr><p><strong>安装 Docker Engine-Community</strong></p><ul><li><p>更新apt包索引<br><code>$ sudo apt-get update</code></p></li><li><p>安装最新版本的 Docker Engine-Community和containerd<br><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p></li><li><p>安装指定版本的 Docker Engine-Community</p></li><li><p>列出仓库中的可用版本<br><code>apt-cache madison docker-ce</code></p></li><li><p>使用<code>docker-ce |</code>后所输出的字符串安装指定版本，然后执行:<br><code>$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</code></p></li></ul><p><strong>卸载主机上Docker的旧版本</strong></p><ul><li>Docker的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code><br><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></li></ul><p><strong>帮助指令</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">command</span> --<span class="built_in">help</span></span><br><span class="line">man docker</span><br></pre></td></tr></table></figure><hr><p><strong>docker 镜像配置</strong></p><ul><li><p>Docker官方提供的中国镜像库:<code>https://registry.docker-cn.com</code></p></li><li><p>以添加Docker官方镜像库地址<code>https://registry.docker-cn.com</code>为例</p></li><li><p>upstart系统<br><code>$ emacs /etc/default/docker</code></p></li><li><p>修改其中<code>DOCKER_OPTS</code>的配置<br><code>DOCKER_OPTS=&quot;--registry-mirror=https://registry.docker-cn.com&quot;</code></p></li><li><p>重启服务<br><code>$ sudo service docker restart</code></p></li><li><p>systemd系统<br><code>emacs /etc/docker/daemon.json</code></p></li><li><p>如果没有就创建，在文件内添加:<br><code>{&quot;registry-mirrors&quot;:[&quot;https://registry.docker-cn.com&quot;]}</code></p></li><li><p>重启服务<br><code>$ sudo systemctl daemon-reload</code><br><code>$ sudo systemctl restart docker</code></p></li><li><p>检查配置是否生效<br><code>$ docker info</code></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Registry Mirror<span class="variable">s:</span></span><br><span class="line">   http<span class="variable">s:</span>//registry.docker-<span class="keyword">cn</span>.<span class="keyword">com</span>/</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>参考资料:</strong></p><p>官方手册:<a href="https://docs.docker.com/" target="_blank" rel="noopener">跳转</a><br><code>https://docs.docker.com/</code></p><p>官方安装手册:<a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">跳转</a><br><code>https://docs.docker.com/install/linux/docker-ce/debian/</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-1</title>
    <url>/2020/02/06/Docker-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="Docker的基本概述与原理简述"><a href="#Docker的基本概述与原理简述" class="headerlink" title="Docker的基本概述与原理简述"></a>Docker的基本概述与原理简述</h3><p><strong>概述:</strong></p><ul><li>基于google公司退出的Go语言实现</li><li>基于apache2.0协议，项目代码在github上进行维护</li><li>Docker项目的目标是实现轻量级的操作系统虚拟化解决方案</li><li>Docker的基础是linux容器(LXC)等技术，Docker在LXC<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的基础上Docter进行了进一步的封装，让用户不需要去关心容器的管理，从而使其操作更为简便</li></ul><p><strong>docker和传统虚拟化方式的不同之处</strong></p><ul><li>可见容器技术Docker是在操作系统层面上实现虚拟化，直接对本机的操作系统进行复用</li><li>而传统方式则是在硬件层面上实现虚拟化</li><li>引用自官方文档:<blockquote><p>传统的(virtual machines)虚拟化技术不仅需要包含应用程序本身和必要的依赖所需要的存储空间以及容量，还需要承受若干个完整的操作系统所占有的存储空间，这些操作系统所占有的存储空间往往以GB为单位<br>Docker容器引擎只包含了其应用程序以及依赖项，它在主机操作系统的用户空间内作为一个完全被隔离且独立的进程去运行，同时与其他容器共享内核，所以说它不仅拥有VM内资源隔离和分配技术所带来的优点，还拥有更强的可移植性和效率等优势</p></blockquote></li></ul><p><strong>Docker与传统虚拟化方式相比，所拥有的优势</strong></p><ul><li>拥有更快速的交付和部署<br>Docker允许开发者在装有应用和服务本地容器做开发，从而直接集成到可持续开发流程中，以在整个开发周期中都可以完美的辅助开发者实现快速交付</li><li>高效的部署和扩容<br>因docker容器引擎的高可移植性，使其可以在任何软硬件平台上运行<br>这种可兼容的移植性可以让开发者把任何应用程序从一个硬件平台上直接迁移到另外一个硬件平台上<br>Docker的可兼容移植性和轻量特性可以很轻松的实现负载的动态管理，使开发者可以快速扩容或方便的下线某一应用和服务，这种速度将趋近实时</li><li>更高的资源利用率<br>Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小<br>以传统虚拟机的方式运行10个不同的应用就要起10个虚拟机，而Docker 只需要启动10个相互隔离的应用即可</li><li>更简单的管理<br>使用 Docker，只需要简易的修改，就可以替代以往大量的更新工作<br>所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理</li></ul><hr><p><strong>Docker引擎简述</strong></p><ul><li>Docker引擎是一个C/S结构的程序</li><li>简要流程:</li><li><code>(contiainer-manages/image-manages/network-manages/network-manages)-&gt;client docker CLI</code></li><li><code>client docker CLI-&gt;REST API-&gt;server doceker deamon</code></li><li>Server是一个常驻进程</li><li>REST API 实现了client和server间的交互协议</li><li>CLI 实现容器和镜像的管理，为用户提供统一的操作界面</li></ul><p><strong>Docker架构简述</strong></p><ul><li>Docker使用C/S架构</li><li>客户端，Docker程序与主机程序镜像由接口通信</li><li>指令由客户端发出，而Docker内部的镜像由主机经由接口提供</li><li>任何指令对镜像的操作都在Docker程序内部的独立化容器服务内完成</li></ul><p><strong>逻辑简述</strong></p><ul><li>最初由client发出管理指令</li><li>经由<code>DOCKER_HOST</code>接口操作docker daemon(程序)内的容器以及程序镜像(包括操作系统)</li><li>docker deamon中已存在其注册表内的程序由<code>DOCKER_HOST</code>接口返回给docker deamon内作为镜像使用</li><li>而程序及系统的镜像再被分布给docker deamon内部的独立容器服务所管理</li><li>简而言之就是命令最后被传输到所指定镜像的容器服务内，进入其容器，对其程序进行操作</li><li>简要流程:</li><li><code>Client(指令)-DOCKER_HOST-&gt;Docker deamon&lt;-DOCKER_HOST-Registry(注册表内已有程序)</code></li><li><code>Docker-&gt;Images(Rigistry)-&gt;Containers</code></li><li><code>从而实现Client-&gt;Containers</code></li></ul><hr><p><strong>关于Docker最基本的核心概念</strong></p><ul><li>镜像(Image)<br>Docker镜像(Image)，镜像其实就是一个只读的模板文件<br>例如：一个镜像可以包含一个完整的操作系统环境，里面仅安装了Apache或用户需要的其它应用程序<br>镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器<br>Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户可以直接从其他人那里下载一个已经做好的镜像来直接使用<br>镜像(Image)就是一堆只读层(read-only layer)的统一视角<br>这些只读层堆叠在一起，除了最下面的只读层，其它的只读层都会由指针指向它所对应的下一层<br>这些层是Docker内部的实现细节，并且能够在docker宿主机统一的的文件系统<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>上访问到</li></ul><p>简要结构流程:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">read</span>-<span class="keyword">only</span> layer:</span><br><span class="line">Images(union <span class="keyword">file</span> <span class="built_in">system</span>):</span><br><span class="line"><span class="keyword">read</span>-<span class="keyword">only</span> layer-(指针)-&gt;<span class="keyword">read</span>-<span class="keyword">only</span> layer-(指针)-&gt;<span class="keyword">read</span>-<span class="keyword">only</span> layer-(指针)-&gt;<span class="keyword">read</span>-<span class="keyword">only</span> layer-&gt;...</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">read-write <span class="symbol">layer:</span></span><br><span class="line">Images(<span class="class"><span class="keyword">union</span> <span class="title">file</span> <span class="title">system</span>):</span></span><br><span class="line">bash/process-&gt;RW <span class="class"><span class="keyword">union</span> <span class="title">file</span> <span class="title">system</span></span></span><br><span class="line">read-write layer-(指针)-&gt;read-only layer-(指针)-&gt;read-only layer-(指针)-&gt;read-only layer-&gt;...</span><br></pre></td></tr></table></figure><ul><li><p>仓库(repository)<br>仓库(Repository)是集中存放镜像文件的目录<br>仓库和仓库注册服务器(Registry)的区别不大<br>仓库注册服务器上通常存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签(tag)<br>仓库分为公开仓库(Public)和私有仓库(Private)两种形式，最大的公开仓库是Docker Hub，存放了数量庞大的镜像供用户下载<br>国内公开的镜像仓库有很多，在我设置的友情连接里有几个我常用的镜像源的地址<br>用户也可以在本地网络内创建一个私有仓库<br>当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了<br>Docker 仓库的概念跟 Git 类似，注册服务器可以理解为 GitHub 这样的托管服务平台</p></li><li><p>容器(container)<br>Docker 利用容器(Container)来运行应用，容器是从镜像创建的运行实例<br>它可以被启动、开始、停止、删除，每个容器都是相互隔离的、保证安全的平台<br>容器的定义和镜像近乎相同，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的<br>一个运行态容器被定义为一个可读写的统一文件系统加上隔离的进程空间和包含其中的进程<br>所以说一个容器中的进程可以对文件进行修改、删除、创建，这些改变都将作用于可读写层</p></li><li><p>Docker 客户端(Client)<br>Docker 客户端通过命令行或者其他工具与Docker的守护进程通信<br><a href="https://docs.docker.com/develop/sdk/" target="_blank" rel="noopener">Docker SDK</a><br><code>https://docs.docker.com/develop/sdk/</code></p></li><li><p>Docker 主机(Host)<br>一个物理或者虚拟的机器用于执行Docker守护进程和容器</p></li></ul><hr><p><strong>参考文献与获取方式</strong></p><ul><li><p>官网<a href="https://www.docker.com/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://www.docker.com/</code></p></blockquote></li><li><p>文档<a href="https://docs.docker.com/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/</code></p></blockquote></li><li><p>Docker中国区镜像源</p><blockquote><p><code>https://registry.docker-cn.com</code></p></blockquote></li><li><p>获取<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://docs.docker.com/get-docker/</code></p></blockquote></li><li><p>获取Docker Engine-Debian<a href="https://hub.docker.com/editions/community/docker-ce-server-debian" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://hub.docker.com/editions/community/docker-ce-server-debian</code></p></blockquote></li></ul><hr><h2 id="Docker-debian安装-补充内容"><a href="#Docker-debian安装-补充内容" class="headerlink" title="Docker-debian安装(补充内容)"></a>Docker-debian安装(补充内容)</h2><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><p><strong>使用 Docker仓库进行安装</strong></p><ul><li>首次安装Docker Engine-Community的主机需要先设置Docker仓库</li><li>以便之后可以从Docker官方的远端仓库安装和更新Docker</li><li>Raspbian 用户不能使用此方法</li><li>对于Raspbian，尚不支持使用仓库进行安装且必须改为使用shell脚本方式</li></ul><p><strong>设置仓库步骤:</strong></p><ol><li><ul><li>更新apt包索引:<blockquote><p><code>$ sudo apt-get update</code></p></blockquote></li></ul></li></ol><hr><ol start="2"><li><ul><li>安装 apt 依赖包，用于通过HTTPS来获取仓库:<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install <span class="string">\</span></span><br><span class="line">    apt-transport-https <span class="string">\</span></span><br><span class="line">    ca-certificates <span class="string">\</span></span><br><span class="line">    curl <span class="string">\</span></span><br><span class="line">    gnupg2 <span class="string">\</span></span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><ol start="3"><li><ul><li>添加Docker的官方GPG密钥:<blockquote><p><code>$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</code></p></blockquote></li></ul></li></ol><hr><ol start="4"><li><ul><li>验证本地主机现在是否拥有带有指纹的密钥:<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ sudo apt-key fingerprint <span class="number">0</span>EBFCD88</span><br><span class="line"></span><br><span class="line">pub   <span class="number">4096</span>R/<span class="number">0</span>EBFCD88 <span class="number">2017</span><span class="number">-02</span><span class="number">-22</span></span><br><span class="line">      Key fingerprint = <span class="number">9</span>DC8 <span class="number">5822</span> <span class="number">9</span>FC7 DD38 <span class="number">854</span>A  E2D8 <span class="number">8</span>D81 <span class="number">803</span>C <span class="number">0</span>EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;<span class="symbol">docker@</span>docker.com&gt;</span><br><span class="line">sub   <span class="number">4096</span>R/F273FCD8 <span class="number">2017</span><span class="number">-02</span><span class="number">-22</span></span><br></pre></td></tr></table></figure><blockquote><p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符</p></blockquote></li></ul></li></ol><hr><ol start="5"><li><ul><li>执行指令以设置稳定版仓库:<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>\</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">  $(lsb_release -cs) \</span></span><br><span class="line"><span class="string">  stable"</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><p><strong>安装Docker Engine-Community</strong></p><ol><li><ul><li>更新 apt 包索引:<blockquote><p><code>$ sudo apt-get update</code></p></blockquote></li></ul></li></ol><hr><ol start="2"><li><ul><li>安装最新版本的Docker Engine-Community和containerd:<blockquote><p><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p></blockquote></li></ul></li></ol><hr><ol start="3"><li><ul><li>安装特定版本:<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br><span class="line">  docker-ce | <span class="number">5</span>:<span class="number">18.09</span><span class="number">.1</span>~<span class="number">3</span><span class="number">-0</span>~debian-stretch | https:<span class="comment">//download.docker.com/linux/debian stretch/stable amd64 Packages</span></span><br><span class="line">  docker-ce | <span class="number">5</span>:<span class="number">18.09</span><span class="number">.0</span>~<span class="number">3</span><span class="number">-0</span>~debian-stretch | https:<span class="comment">//download.docker.com/linux/debian stretch/stable amd64 Packages</span></span><br><span class="line">  docker-ce | <span class="number">18.06</span><span class="number">.1</span>~ce~<span class="number">3</span><span class="number">-0</span>~debian        | https:<span class="comment">//download.docker.com/linux/debian stretch/stable amd64 Packages</span></span><br><span class="line">  docker-ce | <span class="number">18.06</span><span class="number">.0</span>~ce~<span class="number">3</span><span class="number">-0</span>~debian        | https:<span class="comment">//download.docker.com/linux/debian stretch/stable amd64 Packages</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><ul><li>使用第二列中的版本字符串安装特定版本，例如<code>5:18.09.1~3-0~debian-stretch</code></li></ul><ol start="4"><li><blockquote><p>$ sudo apt-get install docker-ce=<version_string>docker-ce-cli=<version_string>containerd.io</version_string></version_string></p></blockquote></li></ol><hr><p><strong>卸载旧版本:</strong></p><ul><li>Docker 的旧版本被称为docker，docker.io或docker-engine<blockquote><p><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></p></blockquote></li></ul><hr><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><ul><li><p>源代码(二进制)包地址<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">跳转</a></p><blockquote><p><code>https://github.com/docker/compose/releases</code></p></blockquote></li><li><p>获取方式(执行):</p><blockquote><p><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code><br>1.24.1为版本号，可修改以下载其它版本</p></blockquote></li></ul><hr><h3 id="安装Docker-Machine"><a href="#安装Docker-Machine" class="headerlink" title="安装Docker Machine"></a>安装Docker Machine</h3><ul><li><p>获取方式(执行):</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>base=<span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/machine/releases</span><span class="regexp">/download/v</span>0.<span class="number">16.0</span> &amp;&amp;</span><br><span class="line">  curl -L <span class="variable">$base</span>/docker-machine-<span class="variable">$(</span>uname -s)-<span class="variable">$(</span>uname -m) &gt;<span class="regexp">/tmp/docker</span>-machine &amp;&amp;</span><br><span class="line">  sudo mv /tmp/docker-machine /usr/local/bin/docker-machine &amp;&amp;</span><br><span class="line">  chmod +x /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure></li><li><p>版本检索</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ docker-machine version</span><br><span class="line">docker-machine version <span class="number">0.16</span><span class="number">.0</span>, build <span class="number">9371605</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>Docker 支持以下的Debian版本:</strong></p><blockquote><p>Buster 10<br>Stretch 9 (stable) / Raspbian Stretch<br>Docker Engine-Community 在 <code>x86_64</code> (或 <code>amd64</code> ) <code>armhf</code>，和 <code>arm64</code> 体系结构上受支持</p></blockquote><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">LXC，其名称来自Linux软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为Linux内核容器功能的一个用户空间接口，关于LXC更详细的内容这里先不做阐述</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top">统一文件系统(Union File System)技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>makedown流程图-flowchart</title>
    <url>/2020/02/05/flowchart/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><p><strong>概述:</strong></p><ul><li>流程图的语法大概可以分为两部分:定义元素与连接元素</li><li>定义变量所使用的语句大概结构是X=Y: Z</li><li>X是变量名，Y是操作模块名，Z是具体显示的文字内容，注意冒号后的空格，有空格的时候才能被识别</li></ul><p><strong>基本语法:</strong></p><ul><li>由于渲染的问题，这里用<code>&lt;.&gt;</code>代替</li></ul><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">···flow</span><br><span class="line"><span class="built_in">tag</span>=&gt;<span class="keyword">type</span>: content:&gt;url</span><br><span class="line"><span class="params">...</span></span><br></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">ta<span class="name">g1</span><span class="comment">(...)</span>-&gt;ta<span class="name">g2</span><span class="comment">(...)</span>-&gt;ta<span class="name">g3</span><span class="comment">(...)</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure><ul><li>括号内语句用逗号分隔</li></ul><p><strong>定义元素语法:</strong></p><ul><li><code>tag=&gt;type: content:&gt;url</code></li><li>tag：标签，用于连接元素时使用</li><li>type：该标签的类型，共有6种类型如下</li><li>content：流程语句中放置的内容</li><li>type:与content之间有一个空格</li><li>url：链接，与流程语句绑定</li></ul><p><strong>连接元素语法:</strong></p><ul><li>使用-&gt;符号，-&gt;表示下一步要执行的操作：</li><li><code>st-&gt;in-&gt;op-&gt;cond</code></li><li>表示的是先从st转到in，然后再到op，最后到cond</li><li>可以连续写，也可以分开写</li></ul><p><strong>判断分支语法:</strong></p><ul><li>condition是判断，可以取yes和no两种结果，对于不同结果可以有不同走向</li><li><code>cond(yes)-&gt;out</code>表示condition成立时转向out执行</li><li><code>cond(no)-&gt;op</code>表示condition不成立时转向op执行</li></ul><p><strong>操作模块说明:</strong><br>操作模块一共有以下六种:</p><table><thead><tr><th align="left">操作模块名</th><th align="left">表示含义说明</th></tr></thead><tbody><tr><td align="left">start</td><td align="left">开始</td></tr><tr><td align="left">end</td><td align="left">结束</td></tr><tr><td align="left">operation</td><td align="left">普通操作块</td></tr><tr><td align="left">subroutine</td><td align="left">子任务块</td></tr><tr><td align="left">condition</td><td align="left">判断块</td></tr><tr><td align="left">inputoutput</td><td align="left">输入输出块</td></tr></tbody></table><hr><p><strong>示例说明-1:</strong><br>竖向:</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">···flow</span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond<span class="function"><span class="params">(<span class="literal">yes</span>)</span>-&gt;</span>io-&gt;e</span><br><span class="line">cond<span class="function"><span class="params">(<span class="literal">no</span>)</span>-&gt;</span>sub1<span class="function"><span class="params">(right)</span>-&gt;</span>op</span><br><span class="line">···</span><br></pre></td></tr></table></figure><div id="flowchart-0" class="flow-chart"></div><hr><p>示例说明-2:<br>横向:</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">···flow</span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st<span class="function"><span class="params">(right)</span>-&gt;</span>op<span class="function"><span class="params">(right)</span>-&gt;</span>cond</span><br><span class="line">cond<span class="function"><span class="params">(<span class="literal">yes</span>)</span>-&gt;</span>io<span class="function"><span class="params">(bottom)</span>-&gt;</span>e</span><br><span class="line">cond<span class="function"><span class="params">(<span class="literal">no</span>)</span>-&gt;</span>sub1<span class="function"><span class="params">(right)</span>-&gt;</span>op</span><br><span class="line">···</span><br></pre></td></tr></table></figure><div id="flowchart-1" class="flow-chart"></div><hr><p>实例说明-3:</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">···flow   </span><br><span class="line">st=&gt;start: 开始语句</span><br><span class="line"><span class="keyword">in</span>=&gt;inputoutput: 输入值</span><br><span class="line">e=&gt;end: 结束语句</span><br><span class="line">op=&gt;operation: 执行操作</span><br><span class="line">cond=&gt;condition: 是否成立？</span><br><span class="line">out=&gt;inputoutput: 输出值</span><br><span class="line"></span><br><span class="line">st-&gt;<span class="keyword">in</span>-&gt;op-&gt;cond</span><br><span class="line">cond<span class="function"><span class="params">(<span class="literal">yes</span>)</span>-&gt;</span>out</span><br><span class="line">cond<span class="function"><span class="params">(<span class="literal">no</span>)</span>-&gt;</span>op</span><br><span class="line">out-&gt;e</span><br><span class="line">···</span><br></pre></td></tr></table></figure><div id="flowchart-2" class="flow-chart"></div><hr><p>示例说明-4:</p><figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">···flow</span><br><span class="line">st=&gt;start: <span class="type">Start</span></span><br><span class="line">e=&gt;<span class="keyword">end</span>: <span class="type">Why</span> are you worried?</span><br><span class="line">cond1=&gt;condition: <span class="type">Do</span> you have a problem?</span><br><span class="line">cond2=&gt;condition: <span class="type">Can</span> you solve it?</span><br><span class="line"><span class="keyword">op</span>=&gt;operation: <span class="type">Since</span> you can't solve it,</span><br><span class="line"></span><br><span class="line">st-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;cond2</span><br><span class="line">cond1(no)-&gt;e</span><br><span class="line">cond2(yes)-&gt;e</span><br><span class="line">cond2(no)-&gt;<span class="keyword">op</span>-&gt;e</span><br><span class="line">···</span><br></pre></td></tr></table></figure><div id="flowchart-3" class="flow-chart"></div><hr><p><strong>示例说明-5:</strong></p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">···flow</span><br><span class="line">st=&gt;start: Start|<span class="type">past</span>:&gt;http://www.baidu.com</span><br><span class="line">e=&gt;<span class="keyword">end</span>: <span class="keyword">End</span>:&gt;http://www.baidu.com</span><br><span class="line">op1=&gt;operation: My Operation|<span class="type">past</span></span><br><span class="line">op2=&gt;operation: Stuff|<span class="type">current</span></span><br><span class="line">sub1=&gt;subroutine: My Subroutine|<span class="type">invalid</span></span><br><span class="line">cond=&gt;condition: Yes or No?|<span class="type">approved</span>:&gt;http://www.baidu.com</span><br><span class="line">c2=&gt;condition: Good idea|<span class="type">rejected</span></span><br><span class="line">io=&gt;inputoutput: catch something...|<span class="type">request</span></span><br><span class="line"></span><br><span class="line">st-&gt;op1(<span class="built_in">right</span>)-&gt;cond</span><br><span class="line">cond(yes, <span class="built_in">right</span>)-&gt;c2</span><br><span class="line">cond(no)-&gt;sub1(<span class="built_in">left</span>)-&gt;op1</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br><span class="line">···</span><br></pre></td></tr></table></figure><div id="flowchart-4" class="flow-chart"></div><hr><p>参考资料:</p><p>参考资料:<a href="http://flowchart.js.org/" target="_blank" rel="noopener">跳转</a><br><code>http://flowchart.js.org/</code></p><p>获取方式:<br><code>npm install --save hexo-filter-flowchart</code></p><p>配置方式：<br>安装完成后进入根目录修改配置文件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flowchart</span>: </span><br><span class="line"><span class="selector-id">#raphael</span>:<span class="selector-id">#optional</span>, <span class="selector-tag">the</span> <span class="selector-tag">source</span> <span class="selector-tag">url</span> <span class="selector-tag">of</span> <span class="selector-tag">raphael</span><span class="selector-class">.js</span> </span><br><span class="line"><span class="selector-id">#flowchart</span>:<span class="selector-id">#optional</span>, <span class="selector-tag">the</span> <span class="selector-tag">source</span> <span class="selector-tag">url</span> <span class="selector-tag">of</span> <span class="selector-tag">flowchart</span><span class="selector-class">.js</span></span><br><span class="line"><span class="selector-tag">options</span>:<span class="selector-id">#options</span> <span class="selector-tag">used</span> <span class="selector-tag">for</span> `<span class="selector-tag">drawSVG</span>`</span><br></pre></td></tr></table></figure><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display:none">st=>start: 开始框
op=>operation: 处理框
cond=>condition: 判断框(是或否?)
sub1=>subroutine: 子流程
io=>inputoutput: 输入输出框
e=>end: 结束框

st->op->cond
cond(yes)->io->e
cond(no)->sub1(right)->op</textarea><textarea id="flowchart-0-options" style="display:none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>var code=document.getElementById("flowchart-0-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)),diagram=flowchart.parse(code);diagram.drawSVG("flowchart-0",options)</script><textarea id="flowchart-1-code" style="display:none">st=>start: 开始框
op=>operation: 处理框
cond=>condition: 判断框(是或否?)
sub1=>subroutine: 子流程
io=>inputoutput: 输入输出框
e=>end: 结束框

st(right)->op(right)->cond
cond(yes)->io(bottom)->e
cond(no)->sub1(right)->op</textarea><textarea id="flowchart-1-options" style="display:none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>var code=document.getElementById("flowchart-1-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value)),diagram=flowchart.parse(code);diagram.drawSVG("flowchart-1",options)</script><textarea id="flowchart-2-code" style="display:none">st=>start: 开始语句
in=>inputoutput: 输入值
e=>end: 结束语句
op=>operation: 执行操作
cond=>condition: 是否成立？
out=>inputoutput: 输出值

st->in->op->cond
cond(yes)->out
cond(no)->op
out->e</textarea><textarea id="flowchart-2-options" style="display:none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>var code=document.getElementById("flowchart-2-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value)),diagram=flowchart.parse(code);diagram.drawSVG("flowchart-2",options)</script><textarea id="flowchart-3-code" style="display:none">st=>start: Start
e=>end: Why are you worried?
cond1=>condition: Do you have a problem?
cond2=>condition: Can you solve it?
op=>operation: Since you can't solve it,

st->cond1
cond1(yes)->cond2
cond1(no)->e
cond2(yes)->e
cond2(no)->op->e</textarea><textarea id="flowchart-3-options" style="display:none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>var code=document.getElementById("flowchart-3-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("flowchart-3-options").value)),diagram=flowchart.parse(code);diagram.drawSVG("flowchart-3",options)</script><textarea id="flowchart-4-code" style="display:none">st=>start: Start|past:>http://www.baidu.com
e=>end: End:>http://www.baidu.com
op1=>operation: My Operation|past
op2=>operation: Stuff|current
sub1=>subroutine: My Subroutine|invalid
cond=>condition: Yes or No?|approved:>http://www.baidu.com
c2=>condition: Good idea|rejected
io=>inputoutput: catch something...|request

st->op1(right)->cond
cond(yes, right)->c2
cond(no)->sub1(left)->op1
c2(yes)->io->e
c2(no)->op2->e</textarea><textarea id="flowchart-4-options" style="display:none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>var code=document.getElementById("flowchart-4-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("flowchart-4-options").value)),diagram=flowchart.parse(code);diagram.drawSVG("flowchart-4",options)</script><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式版本控制系统-Git-2</title>
    <url>/2020/02/04/Git-3/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="分布式版本控制系统-Distributed-Version-Control-Git-第二章节"><a href="#分布式版本控制系统-Distributed-Version-Control-Git-第二章节" class="headerlink" title="分布式版本控制系统(Distributed Version Control) Git-第二章节"></a>分布式版本控制系统(Distributed Version Control) Git-第二章节</h3><p><strong>基本操作</strong></p><ul><li>上篇文章的末尾写了一点关于git创建新仓库和克隆项目的基本操作</li><li>这一章着重对暂存区内快照的管理与操作和分支的管理与操作进行说明</li><li>在<code>git init</code>后，在工作区的根目录会生成<code>.git</code>子目录，它就是本地主机的Git仓库，所有关于工作区项目的快照数据都存放在此目录下</li><li>Git主要工作就是创建和保存工作区中项目的快照及与其他时间段的快照进行对比</li></ul><ol><li><p><code>git add</code><br>用于将工作区修改或进行操作的任何文件添加到缓存目录，也就是暂存区<br><code>git add .</code><br>添加当前项目的所有文件</p></li><li><p><code>git status</code><br>用于查看工作区当前的状态，执行完<code>git status</code>就能看到工作区向暂存区进行的任何操作<br>可以添加参数，比如添加<code>-s参数</code>，以输出经过简化的结果<br><code>A/M filename</code>的意思是这个文件在添加到暂存区之后又有改动了</p></li><li><p><code>git diff</code><br>用以查看执行git status 输出结果的详细信息<br>参数信息</p></li></ol><ul><li><code>git diff</code>命令会输出暂存区以修改但尚未写入暂存区的改动的区别</li><li><code>git diff</code>尚未写入暂存区的改动</li><li><code>git diff --cached</code>查看已写如暂存区的改动</li><li><code>git diff HEAD</code>查看已写入暂存区的与未写入暂存区的所有改动</li><li><code>git diff --stat</code>输出简明的diff结果</li></ul><ol start="4"><li><p><code>git commit</code><br>将暂存区的内容添加到仓库中<br>因为每一次提交都要输入一次github的用户名和邮箱地址，所以可以先配置一下用户名和邮箱地址</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">'用户名'</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email 邮箱地址</span><br></pre></td></tr></table></figure><p><code>参数-m</code>在命令行中提供提交注释，如果没有此参数，Git就会自动打开一个编辑器以填写提交信息<br><code>参数-a</code>可以跳过<code>git add</code>提交至暂存区</p></li><li><p><code>git reset HEAD filename</code><br><code>filename</code>是指已提交到暂存区的内容<br>用于取消已缓存的内容<br>执行<code>git reset HEAD</code>以取消之前的<code>git add</code>，并且不包含下一个提交完成后的暂存区快照</p></li><li><p><code>git rm</code><br>从工作区删除某个文件，需要从已跟踪文件的清单中移除，然后再去提交<br><code>git rm filename</code><br>如果该文件修改过并且已经提交到暂存区而还要删除的话，必须使用强制删除<code>参数-f</code><br><code>git rm -f filename</code><br>把文件从暂存区删除，或者说是从跟踪清单中删除，使用<code>--cached</code>参数<br><code>git rm --cached filename</code><br>使用<code>-r</code>参数用以递归删除，删除该目录下的所有文件和子目录<br><code>git rm -r</code>文件目录</p></li><li><p><code>git mv</code><br>用于移动或重命名一个文件夹，目录或软链接<br><code>git mv filename newfilename</code></p></li><li><p><code>git push</code><br>用于将本地工作区的最新消息推送到远端仓库</p></li><li><p><code>git pull</code><br>用于从远端仓库拉取最新的版本到本地工作区，并且自动与工作区内部的项目与数据自动合并(merge)</p></li><li><p><code>git fetch</code><br>用于是从远端仓库拉取最新版本到本地工作区，并且不会自动合并</p></li><li><p><code>git merge</code><br>用于从指定的分支合并到当前的分支，从而合并两个分支<br><code>git pull</code>相当于<code>git fetch + git merge</code></p></li></ol><hr><p><strong>Git查看提交日志</strong><br>12. <code>git log</code></p><ul><li><code>参数--oneline</code>查看简明版本</li><li><code>参数--graph</code>查看分支，合并等操作的日志，并显示拓扑图</li><li><code>参数--reverse</code>逆向输入所有日志</li><li><code>参数--author=用户名</code>查看指定用户的提交日志</li><li><code>参数--since，--before，--after，--until</code>查看指定日期<br>日志命令参考<a href="https://git-scm.com/docs/git-log" target="_blank" rel="noopener">跳转</a><br><code>https://git-scm.com/docs/git-log</code></li></ul><ol start="13"><li>git 标签<br><code>git tag -a 标签名</code><br>用于给当前快照打上标签</li></ol><hr><p><strong>使用Git连接远端的Github仓库</strong></p><p>添加一个新的远程仓库<br>14. <code>git remote add shortname url</code></p><p>查看当前的远程库<br>15. <code>git remote</code></p><p>拉取远程库<br>从远程仓库克隆新分支与数据<br>16. <code>git fetch alias</code><br>然后执行git merge 将远程分支到本地工作区所在的分支<br>17. <code>git merge alias/branch</code><br>从远端仓库提取更新数据并尝试合并到当前分支<br>一般执行完<code>git fetch</code>之后就会紧接着执行<code>git merge</code>，前者去对数据进行过滤，获取当前工作区没有的新数据，后者用于将新数据合并到本地工作区当前分支的项目</p><p>推送到远程仓库<br>18. <code>git push alias branch</code><br>将本地(branch)分支中的暂存区文件推到(alias)远端仓库上的(branch)分支<br>用于将本地暂存区的新数据推到某个远端仓库</p><p>删除远端仓库<br>19. <code>git remote rm [别名]</code></p><p><strong>生成ssh key</strong><br>20. * <code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p><ul><li>会在<code>/root/.ssh</code>目录生成密匙文件，打开<code>id_rsa.pub</code>，复制里面的key</li><li>然后进入Github并登入Github，点击头像内的<code>setting</code>选项卡内的<code>SSH and GPG keys</code>中的<code>SSH Keys</code>选项卡</li><li>将文件里的key拷贝到key中，title随意，然后<code>add ssh key</code></li><li>验证是否成功<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Hi <span class="keyword">Unit</span>-serow<span class="comment">! You've successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>具体可以参考一下<a href="https://help.github.com/articles/generating-ssh-keys" target="_blank" rel="noopener">跳转</a><br><code>https://help.github.com/articles/generating-ssh-keys</code></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>2.应用与拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式版本控制系统-Git-1</title>
    <url>/2020/02/04/Git-2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="分布式版本控制系统-Distributed-Version-Control-Git-第一章节"><a href="#分布式版本控制系统-Distributed-Version-Control-Git-第一章节" class="headerlink" title="分布式版本控制系统(Distributed Version Control) Git-第一章节"></a>分布式版本控制系统(Distributed Version Control) Git-第一章节</h3><p><strong>概述:</strong></p><ul><li>Git 是一个开源的分布式版本控制系统，用于帮助以群为单位的开发者们处理任何相同类型的项目(或称为同一项目)</li><li>Git 还可以指 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件</li><li>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持</li><li>Git 的性质使他不仅用于版本控制，还可用于内容管理 CMS 与工作管理等</li></ul><p><strong>关于 Git 的分布式</strong></p><ul><li>Git把内容按元数据的方式去存储，分布式的版本控制就是每个人都可以创建一个独立的代码仓库用于管理，各种版本的操作都可以再本地完成，每个人修改的代码都可以经过推送合并到另外一个代码仓库中，所以Git这种分布式的版本控制系统更适合个人的开发</li><li>因为分散式版本控制系统本质的关系，使得此类系统更重视对分支(branch)的支持，它们通常有较好的分支及合并的能力</li><li>在分散式版本控制系统中，开发者可以进行推(push)的动作，其意义是将自身档案库中的变更送至其他的档案库，也可以进行拉(pull)的动作，其意义是获取其他档案库的变更</li><li>处于分布式版本控制系统中的每个个体之间的关系是完全独立且自由的，他们完全自由并且完全可以参照自己的意愿来对远端的代码仓库进行实时的操作</li><li>学习Git时最重要的是对其分支管理系统的了解，这是它的本质与执行的逻辑核心</li></ul><p><strong>使用Git进行工作的通常流程</strong></p><ul><li>从远端仓库克隆代码到本地并作为工作目录</li><li>对克隆的资源进行操作</li><li>如果有人已经对其修改了，可以在本地更新资源</li><li>在提交前查看修改内容并提交修改内容</li><li>在修改完成后，如果发现错误，可以撤回并再次修改并提交</li></ul><hr><p><strong>最基本的使用</strong></p><p><code>git init</code><br>使用git init 创建或初始化一个仓库，通常是使用git的第一个命令<br>在执行完成git init命令后，git仓库会生成一个.git目录，该目录包含了所有资源的元数据，而其它项目的目录保持不变</p><p><code>git clone</code><br>从指定以存在的Git远端仓库中克隆项目<br><code>git clone repo(Git 仓库名)</code><br>还可以指定克隆的目录<br><code>git clone repo directory(本地目录)</code></p><hr><p><strong>Github域名解析地址</strong></p><blockquote><p><code>$vim /etc/hosts</code></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">192<span class="selector-class">.30</span><span class="selector-class">.253</span><span class="selector-class">.113</span>    <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">192<span class="selector-class">.30</span><span class="selector-class">.252</span><span class="selector-class">.131</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">185<span class="selector-class">.31</span><span class="selector-class">.16</span><span class="selector-class">.185</span> <span class="selector-tag">github</span><span class="selector-class">.global</span><span class="selector-class">.ssl</span><span class="selector-class">.fastly</span><span class="selector-class">.net</span></span><br><span class="line">74<span class="selector-class">.125</span><span class="selector-class">.237</span><span class="selector-class">.1</span> <span class="selector-tag">dl-ssl</span><span class="selector-class">.google</span><span class="selector-class">.com</span></span><br><span class="line">173<span class="selector-class">.194</span><span class="selector-class">.127</span><span class="selector-class">.200</span> <span class="selector-tag">groups</span><span class="selector-class">.google</span><span class="selector-class">.com</span></span><br><span class="line">192<span class="selector-class">.30</span><span class="selector-class">.252</span><span class="selector-class">.131</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">185<span class="selector-class">.31</span><span class="selector-class">.16</span><span class="selector-class">.185</span> <span class="selector-tag">github</span><span class="selector-class">.global</span><span class="selector-class">.ssl</span><span class="selector-class">.fastly</span><span class="selector-class">.net</span></span><br><span class="line">74<span class="selector-class">.125</span><span class="selector-class">.128</span><span class="selector-class">.95</span> <span class="selector-tag">ajax</span><span class="selector-class">.googleapis</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客文件远端备份与恢复</title>
    <url>/2020/02/03/hexo%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="hexo博客文件远端备份与恢复"><a href="#hexo博客文件远端备份与恢复" class="headerlink" title="hexo博客文件远端备份与恢复"></a>hexo博客文件远端备份与恢复</h3><ul><li>其实就是将本地工作区的数据上传到远端仓库</li><li>因为再创建一个代码仓库有点浪费，所以用再原仓库内建立新分支的方法去备份博客</li><li>在创建新分支之前先确保博客内有默认主分支master</li></ul><p><strong>按顺序执行以下指令:</strong></p><ul><li><code>git init //创建一个新的Git仓库或初始化一个现有的仓库</code><br>该命令创建一个空的Git版本库和暂存区，基本上具有对象库，指针(HEAD)库和模板文件等等的隐藏目录.git<br>现有存储库中运行git init命令是安全的，所以不会覆盖已经存在的数据</li><li><code>git add .</code><br>将本地文件依次添加到暂存区</li><li><code>git commit -m &#39;hexo&#39;(需要进行备份的文件名，比如说hexo的根目录)</code><br>将文件数据提交至本地暂存区文件内，然后再将暂存区的改动提交到本地的版本库</li><li><code>git branch hexo</code><br>创建一个名为hexo的新分支</li><li><code>git checkout hexo</code><br>切换到hexo分支上</li><li><code>git remote add origin Github仓库地址</code><br>让仓库地址/URL实现本地与远程Github仓库的对接</li><li><code>git push origin hexo(推送文件目录)</code><br>推送本地工作区(仓库)内容到远程仓库的hexo分支，远程仓库的默认命名是origin</li></ul><p>创建新的仓库时会默认建立.gitignore文件，用于将不需要备份的文件屏蔽</p><p>以后备份的时候只需要</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">add .</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit -m "Backname"</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push origin hexo</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g与hexo d</span></span><br></pre></td></tr></table></figure><hr><p><strong>恢复博客</strong></p><p>在本地机器上克隆博客文件的hexo分支<br><code>git clone https://github.com/yourgithubname/yourgithubname.github.io</code></p><p>分别执行以恢复博客</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-cli</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git</span><br></pre></td></tr></table></figure><hr><p><strong>其他指令</strong></p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">git branch --<span class="keyword">set</span>-upstream-to=origin/分支名称 <span class="comment">//在所选仓库内设置默认分支</span></span><br><span class="line">git remote <span class="comment">//查看所有远程仓库</span></span><br><span class="line">gir remote <span class="keyword">rm</span> origin <span class="comment">//删除所关联的远程仓库地址</span></span><br><span class="line">git remote add origin 新仓库地址 <span class="comment">//添加新仓库地址</span></span><br><span class="line">git push orign master <span class="comment">//提交到新仓库中的默认分支</span></span><br><span class="line">git submodule init <span class="comment">//初始化本地配置文件</span></span><br><span class="line">git submodule <span class="keyword">update</span> <span class="comment">//抓取所有数据并检出项目中列出的合适的提交</span></span><br><span class="line">git <span class="keyword">rm</span> --cached <span class="keyword">file</span> <span class="comment">//从暂存区删除文件，工作区不做出改变</span></span><br><span class="line">git checkout . <span class="comment">//重新指定本地分支，用暂存区全部或指定的文件替换工作区的文件</span></span><br><span class="line">git pull 参数[options]  仓库名[repository]  分支名[refspec...] <span class="comment">//从一个仓库或者本地的分支拉取并合并代码，相当于 git fetch 跟着一个 git merge FETCH_HEAD</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制系统 Git-分支</title>
    <url>/2020/02/03/Git-1/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h2 id="Git-版本控制系统"><a href="#Git-版本控制系统" class="headerlink" title="Git 版本控制系统"></a>Git 版本控制系统</h2><h3 id="远端分支的上传与本地分支的处理的执行逻辑与原理"><a href="#远端分支的上传与本地分支的处理的执行逻辑与原理" class="headerlink" title="远端分支的上传与本地分支的处理的执行逻辑与原理"></a>远端分支的上传与本地分支的处理的执行逻辑与原理</h3><p><strong>远端分支</strong></p><ul><li>在本地进行任何连接Git远端服务器或远端服务器分支的操作时，远端服务器内会创建一个默认分支，之后在本地会生成一个对应该默认分支的分支</li><li>下文描述说明:服务器的分支被称为<code>origin/master</code>，而本地的分支被称为<code>master</code></li></ul><p><strong>执行原理:</strong></p><ul><li>在本地执行<code>git clone</code>命令克隆远端数据之后，git的clone会自动将所连接远端服务器命名为origin(执行该命令就是克隆URL所指定服务器内的所有数据)</li><li>同时在远端origin服务器内创建了指向它默认主分支(master)的指针，并在远端的服务器内为分支命名为<code>origin/master</code>(默认仓库名与此仓库内的默认分支名)</li><li>然后远端的git服务器也会给本地主机添加本地的master指针，该指针与远端服务器origin的master分支指向同的目标</li><li>从而从本地就可以操作远程服务器origin的分支了(origin的任何分支-这里指master分支)，进而实现数据推送</li></ul><p><strong>逻辑关系的链接表示:</strong></p><blockquote><p>-表示线性执行的逻辑关系<br>本地主机-远程仓库-远程仓库内的若干个分支(分支也可以拥有分支)<br>默认远程仓库被命名为origin，而其下默认分支被默认命名为master<br>一般情况下，远程仓库内拥有最少一个默认分支，并将其默认定义为主分支，对主分支的定义可以进行改动</p></blockquote><hr><p><strong>本地分支</strong></p><p><strong>工作区，暂存区与版本库的概念与其中的关系介绍:</strong></p><ul><li>工作区就是本地主机的文件文件目录</li><li>暂存区(stage或index)，一般存放在隐藏目录.git下的<code>index</code>文件中,暂存区也可以被叫做索引(index)</li><li>版本库 工作区内的隐藏目录<code>.git</code>就被称之为版本库，其中包含了暂存区文件，对象库，游标(HEAD)文件与本地分支等等</li><li>正常情况下的操作都是由工作区发出命令然后传于版本库内进行各级执行</li></ul><p><strong>逻辑关系表示:</strong></p><blockquote><p>工作区-[版本库-(暂存区-本地分支/对象库)]-远端服务器<br>这里的-用于表示包含，链接与单向执行逻辑</p></blockquote><p><strong>逻辑关系:</strong></p><ul><li>当工作区内修改或新增文件之后执行git add 命令之后，暂存区的目录会被更新</li><li>同时工作区修改或新增文件的内容也被写入对象库中的一个新的对象库中，而该对象的ID也被记录在暂存区的文件索引中</li><li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库中的对象库中</li><li>之后默认分支master或设置的本地分支经由游标(HEAD)的指向会对所选分支作出相应的更新</li><li>默认分支master或设置的本地分支指向的目录树就是提交至远端时暂存区的目录树</li><li>进而推送暂存区的目录树(也就是本地存储于所选分支内暂存区的所有数据)至远端</li></ul><p><strong>命令原理与版本库内目录简要介绍:</strong></p><ul><li><p>执行<code>git reset HEAD(游标名)</code>命令时，更新暂存区操作，暂存区的目录会被重写，而被master分支的游标所指向的目录树所交换，工作区不受影响</p></li><li><p>执行<code>git rm --cached filename</code>命令时 ，从暂存区删除文件，而工作区不做出改变</p></li><li><p>执行<code>git checkout .</code>命令时重新指定本地分支，用暂存区全部或指定的文件替换工作区的文件，会清除工作区中未添加到暂存区的改动</p></li><li><p>执行<code>git checkout HEAD .</code>或<code>git checkout HEAD filename</code>命令时，会用游标(HEAD)指向的master分支中的全部或者部分文件替换暂存区和以及工作区中的文件，不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动</p></li><li><p>执行<code>git fetch origin</code>命令用于同步数据，原理就是从中抓取本地没有的数据并且更新本地数据，同时游标(HEAD)也会更新</p></li><li><p>对象库位于<code>.git/objects</code>目录下，里面包含了创建的各种对象及内容</p></li><li><p>暂存库位于<code>.git/index</code>目录下</p></li><li><p>游标位于<code>.git/HEAD</code>目录下</p></li></ul><p>本文所描述的游标，也可以称之为指针，用指针去理解会更简单</p><h2 id="论题由Git的连接机制而引出，因为是完全性的主观理解，执行与结构的逻辑关系可能别有出入，仅供参考"><a href="#论题由Git的连接机制而引出，因为是完全性的主观理解，执行与结构的逻辑关系可能别有出入，仅供参考" class="headerlink" title="论题由Git的连接机制而引出，因为是完全性的主观理解，执行与结构的逻辑关系可能别有出入，仅供参考"></a>论题由Git的连接机制而引出，因为是完全性的主观理解，执行与结构的逻辑关系可能别有出入，仅供参考</h2><p>参考文案:</p><p>Git官网:<a href="https://git-scm.com/" target="_blank" rel="noopener">跳转</a><br><code>https://git-scm.com/</code></p><p>CN-Git 分支简介:<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">跳转</a><br><code>https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B</code></p><p>CN-Git 分支使用:<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6" target="_blank" rel="noopener">跳转</a><br><code>https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Binary File Descriptor/BFD</title>
    <url>/2020/02/02/BFD/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Binary-File-Descriptor"><a href="#GNU-Binary-File-Descriptor" class="headerlink" title="GNU Binary File Descriptor"></a>GNU Binary File Descriptor</h3><p><strong>GNU 二进制文件描述 BFD</strong></p><p><strong>概述:</strong></p><ul><li>目的是用于解决GNU项目中不同的目标文件的可移植性的主要机制</li><li>在GNU项目中对于不同目标文件可移植EFL<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>性问题的主要解决机制</li><li>BFD库还可以用来读取核心转储的结构化数据</li><li>截至至2003年，它支持25中不同体系结构的CPU上的大约50中文件格式</li></ul><p><strong>BFD的设计逻辑与执行逻辑:</strong></p><ul><li>BFD通过对目标文件<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>提供抽象视图来达成工作</li><li>BFD在内部将数据从抽象视图转到目标处理器所规定的文件格式所要求的节与数据结构/字节布局等细节</li><li>它关键的作用是处理字节序的差异<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>,包括寻址<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>算术等细节</li><li>BFD最初的设计目的是可以成为被各种工具所使用的通用库，但为了达成这一目的就需要频繁修补API来解决系统所带来的影响与容纳新系统的功能，从而限制了它的使用模式与功能</li><li>DFD的主要用户是<a href="https://unit-serow.github.io/2020/02/01/Binutils/">GAS</a>，<a href="https://unit-serow.github.io/2020/02/01/Binutils/">GDL</a>，<a href="https://unit-serow.github.io/2020/02/01/Binutils/">GNU Binutils</a>和<a href="https://unit-serow.github.io/2020/02/01/Debugger/">GDB</a>，因此BFD不单独发行，所以它通常包括在Binutils和GDB的发行之中</li></ul><hr><p><strong>参考资料:</strong></p><p>参考网站-BFD的历史与故事<a href="https://www.oreilly.com/openbook/opensources/book/tiemans.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.oreilly.com/openbook/opensources/book/tiemans.html</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">ELF-可执行与可链接格式，Executable and Linkable Format简称为ELF ---</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top">目标文件的结构:有一个有描述信息的“头”，可变量目的“段”，每个段都有一个名字，一些属性和一块数据，一个符号表，一组重定位入口顶等等</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display:inline-block;vertical-align:top;padding-right:10px">3.</span><span style="display:inline-block;vertical-align:top">比如在小端序主机和大端序目标之间，在32-bit和64-bit数据之间的正确转换和重定位入口项所指定的寻址算术的细节</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display:inline-block;vertical-align:top;padding-right:10px">4.</span><span style="display:inline-block;vertical-align:top">寻址是每种计算机中央处理器的指令集架构中的一部分，各个指令集下有不同的寻址模式，寻址模式决定了此架构下计算机语言指令所对应的运算数</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU AutoGen</title>
    <url>/2020/02/02/AutoGen/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-AutoGen"><a href="#GNU-AutoGen" class="headerlink" title="GNU AutoGen"></a>GNU AutoGen</h3><p><strong>GNU 代码维护工具</strong></p><p><strong>概述:</strong></p><ul><li>AutoGen用于简化包含大量重复文本，指令集与宏定义的程序的创建和维护，所以在必须完全保持多个文本块同步的程序中，它能发挥很大的作用</li><li>除了CGL数据与已有的AutoGen定义之外，AutoGen还可以自定义格式或将XML文件作为输入定义</li><li>它经常被用于创建和维护处理程序选项所需的代码，处理选项需要在程序之间的不同位置同时维护多个构造，所以对于选件的维护是没有尽头的</li><li>因此，autogen带有一个名为autoopts的附加软件包，它用于简化程序选项的维护和文档编制</li><li>已知autogen可在GNU/Linux，BSD，OS/X，等其他操作系统上工作</li><li>它的最终目的是在任何具有ANSI C编译器的现代UNIX系统上运行</li></ul><hr><p><strong>参考资料:</strong></p><p>源码获取:<a href="http://autogen.sourceforge.net/data/" target="_blank" rel="noopener">跳转</a><br><code>http://autogen.sourceforge.net/data/</code></p><p>手册<a href="https://www.gnu.org/software/autogen/manual/html_node/autogen.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/autogen/manual/html_node/autogen.html</code></p><p>快捷参考<a href="https://www.gnu.org/software/autogen/man1-autogen.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/autogen/man1-autogen.html</code></p><p>autogen官网<a href="https://www.gnu.org/savannah-checkouts/gnu/autogen/autogen.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/savannah-checkouts/gnu/autogen/autogen.html</code></p><p>开发者社区<a href="http://savannah.gnu.org/projects/autogen" target="_blank" rel="noopener">跳转</a><br><code>http://savannah.gnu.org/projects/autogen</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Data Display Debugger</title>
    <url>/2020/02/02/DDD/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Data-Display-Debugger"><a href="#GNU-Data-Display-Debugger" class="headerlink" title="GNU Data Display Debugger"></a>GNU Data Display Debugger</h3><p><strong>GNU 调试器前端 DDD</strong></p><p><strong>概述:</strong></p><p>DDD:</p><ul><li>DDD基于GPL许可证发行</li><li>DDD是GNU计划的一个重要的组成部分</li><li>DDD主要用于Unix系统,并且有许多开源插件对其使用性的补充</li><li>GNU DDD是一个用于数据显示的调试器前端(Debugger front-end)，它使用motif工具包实现GUI</li><li>应用于诸如GDB,DBX,JDB,XDB,多种语言调试器和bash等命令行调试器的调试器前端，也包括GNU Make调试器等用于调试器的调试器前端</li><li>DDD拥有GUI前端的功能，可以查看源文本及其交互式图形数据的显示，将数据结构以图形化显示</li></ul><p>GCL:</p><ul><li>调试器前端就是所指调试器所使用的命令行解释器/命令行界面(CLI)，这里所指的调试器前端就是DDD</li><li>一个好的CLI可以最大程度的提高可移植性并最大程度地减少资源消耗</li><li>而最让开发者们青睐的还得是具备GUI的CLI，所以有一些GUI调试器的前端被设计成与各种GLI相兼容，还有一些GUI则针对某一个特定的GLI</li></ul><hr><p><strong>参考资料:</strong></p><p>文档<a href="https://www.gnu.org/software/ddd/manual/html_mono/ddd.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/ddd/manual/html_mono/ddd.html</code></p><p>官网<a href="https://www.gnu.org/software/ddd/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/ddd/</code></p><p>社区<a href="http://savannah.gnu.org/svn/?group=ddd" target="_blank" rel="noopener">跳转</a><br><code>http://savannah.gnu.org/svn/?group=ddd</code></p><p><a href="https://lists.gnu.org/archive/html/ddd/2009-02/msg00001.html" target="_blank" rel="noopener">参考资料:</a><br><code>https://lists.gnu.org/archive/html/ddd/2009-02/msg00001.html</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Common Lisp</title>
    <url>/2020/02/02/GCL/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Common-Lisp"><a href="#GNU-Common-Lisp" class="headerlink" title="GNU Common Lisp"></a>GNU Common Lisp</h3><p><strong>GNU Common Lisp编译器 GCL</strong></p><p><strong>概述:</strong></p><ul><li>不要与GNU CLISP和Common Lisp的概念混淆</li><li>GNU Common Lisp（GCL）是GNU计划中ANSI Common Lisp的编译器</li><li>它是Kyoto Common Lisp的演化版</li><li>它的执行过程通常是先生成C代码然后调用C的编译器来生成本机的目标代码</li><li>GCL是包括数学工具maxima，AXIOM,HOL88和ACL2在内的几个大型项目的首选实现</li><li>GCL可以在Linux或FreeBSD，microsoft windows等11种不同体系架构的系统下运行</li></ul><hr><p><strong>参考资料:</strong></p><p>FSF的GCL社区<a href="https://directory.fsf.org/wiki/Gcl" target="_blank" rel="noopener">跳转</a><br><code>https://directory.fsf.org/wiki/Gcl</code></p><p>官网社区<a href="https://www.gnu.org/software/gcl/gcl.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gcl/gcl.html</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU CLISP</title>
    <url>/2020/02/02/CLISP/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-ANSI-Common-Lisp"><a href="#GNU-ANSI-Common-Lisp" class="headerlink" title="GNU ANSI Common Lisp"></a>GNU ANSI Common Lisp</h3><p><strong>概述:</strong></p><p>摘要:</p><blockquote><p>用于实现 ANSI Common Lisp <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>中所描述的语言标准，并且拥有许多拓展<br>CLISP于大多数GNU与Unix系统上运行，还包括windows NT,ME等等，只需要4MB的RAM<br>common lisp是一种面向对象的通用高级编程语言<br>common lisp算是lisp语言的一种方言吧</p></blockquote><p>参考文献:<br>ANSI Common Lisp 中文翻译版<a href="https://acl.readthedocs.io/en/latest/" target="_blank" rel="noopener">跳转</a><br><code>https://acl.readthedocs.io/en/latest/</code></p><p>电子书版本<a href="https://web.archive.org/web/20020805060924/http://www.lisp.org/HyperSpec/FrontMatter/index.html" target="_blank" rel="noopener">跳转</a><br><code>https://web.archive.org/web/20020805060924/http://www.lisp.org/HyperSpec/FrontMatter/index.html</code></p><p>官方网站<a href="https://clisp.sourceforge.io/summary.html" target="_blank" rel="noopener">跳转</a></p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//clisp.sourceforge.io/summary.html</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.gnu.org/software/clisp/</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//clisp.sourceforge.io/</span></span><br></pre></td></tr></table></figure><p>参考手册<a href="https://clisp.sourceforge.io/impnotes/clisp.html" target="_blank" rel="noopener">跳转</a><br><code>https://clisp.sourceforge.io/impnotes/clisp.html</code></p><p>获取:<br><a href="http/SF">跳转</a>/<a href="http://ftp.gnu.org/pub/gnu/clisp/" target="_blank" rel="noopener">跳转</a></p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">http</span>/SF</span><br><span class="line"><span class="keyword">http</span>://<span class="keyword">ftp</span>.gnu.org/pub/gnu/clisp/</span><br></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">基于ANSI标准的common lisp语言的实现(编译器、调试器和解释器) ---</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Gettext</title>
    <url>/2020/02/02/Gettext/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Gettext-第一章节"><a href="#GNU-Gettext-第一章节" class="headerlink" title="GNU Gettext 第一章节"></a>GNU Gettext 第一章节</h3><p><strong>GNU 国际化(i18n)库</strong></p><p><strong>概述:</strong></p><ul><li>国际化与本地化函数库</li><li>GNU gettext是GNU translation project中最重要的一步</li><li>GNU通用性翻译计划</li><li>这个项目的达成将会让GNU拥有更大的经济与用户结构，从而拥有更多的资本</li></ul><p><strong>引用自官方文档:</strong></p><blockquote><p>在以前，通常GNU内部或大量其它的自由软件中的程序源代码都是拿英文编写或记录的，并且在与用户交互的界面所使用的也是英语<br>当世界上所有的开发人员之间使用一种通用的语言去交流会让开发的过程变得极为方便<br>但是，在全世界范围内的大多数人对于英文的理解能力和学习深度远不如母语，所以它们更愿意使用母语进行日常工作<br>并且大多数人只是希望让屏幕上其它晦涩难懂的语言少一点，而自己的母语多一点<br>所以就有了GNU Gettext<br>该软件包为程序员，翻译人员与用户提供了一套完善的工具和文档集<br>更准确的说，gnu gettext所使用的程序是一组工具，提供了一个框架来帮助其他GNU软件包生成多语言的消息</p></blockquote><p><strong>这个工具包括了以下的一组程序:</strong></p><ul><li>一套如何编写程序，从而让消息目录支持的规则</li><li>一套如何为目录本身和文件命名的规则</li><li>一个运行时库，用于支持检索翻译后的消息</li><li>一些独立程序，以各种方式处理可翻译的字符串或已翻译字符串的集合</li></ul><p>GNU Emacs拥有实现这套程序的插件或拓展，感兴趣的可以去查询有关GNU Emacs的消息</p><hr><p>逻辑简述:<br>以下内容参考自:<a href="https://www.gnu.org/software/gettext/manual/html_node/Program-Index.html#Program-Index" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gettext/manual/html_node/Program-Index.html#Program-Index</code></p><ul><li>xgettext程序从源代码生成.pot文件，作为源代码中序翻译内容的模板</li><li>而翻译者需要工作的对象是.po文件，它是有msginit程序从.pot模板文件生成的</li><li>翻译者用maginit初始化中文翻译文件时可以执行<code>msginit --locale=cn --input=name.pot</code></li><li>然后编辑所生成的.po文件</li><li>最后.po文件需要使用msgfmt编译为.mo文件以用作发布</li><li>使其运行需要使用UNIX操作系统中的用户需要修改环境变量中的<code>LC_MESSAGES</code>或<code>LANG</code>，程序将自动从相应的.mo文件中读取语言信息</li></ul><p>使用方法:</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">在使用gettext()方法的时候通常以标记别名<span class="symbol">_</span>的形式使用</span><br><span class="line">如<span class="built_in">printf</span>(gettext(<span class="string">"name is %s. \n"</span>), first_name);</span><br><span class="line">可以写作<span class="built_in">printf</span>(<span class="symbol">_</span>(<span class="string">"name is %s.\n"</span>), first_name);</span><br></pre></td></tr></table></figure><hr><p>参考资料:<br>官方网站<a href="https://www.gnu.org/software/gettext/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gettext/</code><br>获取<a href="https://ftp.gnu.org/pub/gnu/gettext/gettext-0.20.1.tar.gz" target="_blank" rel="noopener">跳转</a><br><code>https://ftp.gnu.org/pub/gnu/gettext/gettext-0.20.1.tar.gz</code><br>社区<a href="https://savannah.gnu.org/projects/gettext/" target="_blank" rel="noopener">跳转</a><br><code>https://savannah.gnu.org/projects/gettext/</code><br>文档<a href="https://www.gnu.org/software/gettext/manual/gettext.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gettext/manual/gettext.html</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Portable Threads/Pth</title>
    <url>/2020/02/02/Pth/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Portable-Threads-第一章节"><a href="#GNU-Portable-Threads-第一章节" class="headerlink" title="GNU Portable Threads 第一章节"></a>GNU Portable Threads 第一章节</h3><p><strong>GNU 可移植线程库 Pth</strong></p><p><strong>概述:</strong></p><ul><li>GNU计划重要的一部分</li><li>GNU Pth 是用于UNIX平台下基于POSIX与ANSI C的用户空间线程库</li><li>GNU Pth还包含了POSIX线程的API，以达成向后兼容的目的</li></ul><p>GNU Pth使用到内核空间线程的N:1映射，所以说调度完全将完全由GNU Pth库进行<br>内核将不会干涉用户空间中任何数量的线程，所以利用不到SMP<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所拥有的机制，因为SMP必须由内核派遣</p><p><strong>存在目的:</strong></p><ul><li>GNU Pth的目的是针对任意线程的处理达到高度的可移植性</li><li>其次是为了让多线程应用提供基于优先级的调度</li></ul><hr><p><strong>参考资料:</strong></p><p>官方网站<a href="https://www.gnu.org/software/pth/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/pth</code></p><p>官方手册<a href="https://www.gnu.org/software/pth/pth-manual.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/pth/pth-manual.html</code></p><p>多线程库列表<a href="https://www.gnu.org/software/pth/related.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/pth/related.html</code></p><p><a href="https://www.gnu.org/software/pth/related.html" target="_blank" rel="noopener">多线程库文档，包含了Unix系统中所有对于已知多线程库的调用</a><br><code>https://www.gnu.org/software/pth/related.html</code></p><p>关于OSSP pth<a href="http://www.ossp.org/pkg/lib/pth/" target="_blank" rel="noopener">跳转</a><br><code>http://www.ossp.org/pkg/lib/pth</code></p><p>论文引用:<br><a href="http://heather.cs.ucdavis.edu/~matloff/pth.html" target="_blank" rel="noopener">对于GNU pth的使用与描述</a><br><code>http://heather.cs.ucdavis.edu/~matloff/pth.html</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">均衡多处理架构</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU C libary/Libc</title>
    <url>/2020/02/02/Libc/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-C-Library-第一章节"><a href="#GNU-C-Library-第一章节" class="headerlink" title="GNU C Library 第一章节"></a>GNU C Library 第一章节</h3><p><strong>C 标准函数库 Libc</strong></p><p><strong>概述:</strong></p><ul><li>GNU/Linux操作系统一个重要的组成部分</li><li>FSF为GNU所写，作用是配合linux内核,是Linux下基于ANSI C<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>标准的GNU C<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>标准函数库</li></ul><p><strong>存在目的:</strong></p><ul><li>目的是为linux内核的操作系统提供核心库文件，库提供了关键的API，当然也包括Linux内核的API</li><li>虽说称为C的标准函数库，但还支持很多其他的程序语言</li></ul><hr><p><strong>其它C 标准库</strong></p><p>C POSIX library</p><ul><li>C 可移植标准接口库</li><li>包含了一些在C 标准库之外的函数，这里指ANSI所定制的C 标准库</li></ul><p>CRT/C Run-time Library</p><ul><li>C 运行时期库</li><li>C 程序运行时需要这些库中的函数</li><li>包含于程序运行时使用到的一些API集合，这里的API是预先编译后存放在linux系统中的二进制代码形式的文件</li><li>CRT通常作为C编译程序发布</li><li>CRT含有初始化代码，还有错误处理代码(例如divide by zero处理)</li></ul><hr><p><strong>其它资料:</strong><br>ANSI C库可以根据头文件划分为15个类别<br>其中包括:</p><ul><li>字符类型 ()</li><li>错误码()</li><li>浮点常数 ()</li><li>数学常数 ()</li><li>标准定义 ()</li><li>标准 I/O ()</li><li>工具函数 ()</li><li>字符串操作 ()</li><li>时间和日期 ()</li><li>可变参数表 ()</li><li>信号 ()</li><li>非局部跳转 ()</li><li>本地信息 ()</li><li>程序断言 () 等等</li><li>这在其他的C语言的IDE中都是有的</li></ul><h2 id="以上内容引用自百度百科条目"><a href="#以上内容引用自百度百科条目" class="headerlink" title="以上内容引用自百度百科条目"></a>以上内容引用自百度百科<a href="https://baike.baidu.com/item/libc" target="_blank" rel="noopener">条目</a></h2><p>参考资料:</p><p>GNU C Library连接<a href="https://www.gnu.org/software/libc/involved.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/libc/involved.html</code></p><p>C POSIX库参考文献<a href="https://web.archive.org/web/20100724201155/http://www.space.unibe.ch/comp_doc/c_manual/C/FUNCTIONS/funcref.htm" target="_blank" rel="noopener">跳转</a><br><code>https://web.archive.org/web/20100724201155/http://www.space.unibe.ch/comp_doc/c_manual/C/FUNCTIONS/funcref.htm</code></p><p>C 标准函式库<a href="https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html" target="_blank" rel="noopener">跳转</a><br><code>https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html</code></p><p>C POSIX library-wiki<a href="https://zh.wikipedia.org/wiki/C_POSIX_library" target="_blank" rel="noopener">跳转</a><br><code>https://zh.wikipedia.org/wiki/C_POSIX_library</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">由美国国家标准局所制定的C语言发布标准-是最基本的C语言函数库，包含了C语言最基本的库函数并且是C语言最初的标准</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top">由LGPL许可协议发布的，自由的，公开源代码并且方便下载的C编译程序</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Libtool</title>
    <url>/2020/02/01/Libtool/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-libtool-第一章节"><a href="#GNU-libtool-第一章节" class="headerlink" title="GNU libtool 第一章节"></a>GNU libtool 第一章节</h3><p><strong>GNU 构建系统</strong></p><p><strong>概述与解释:</strong></p><ul><li>GNU Libtool是一种属于<a href="https://unit-serow.github.io/2020/01/29/Autotools/">GNU构建系统</a>的GNU程序设计工具</li><li>GNU Libtool是一个用于支持通用库的脚本程序</li><li>用于解决在不同的操作系统中使用共享库进行代码移植的复杂性，在不同的系统中建立动态链接库，以隐藏不同系统之间的差异性</li><li>从而给开发人员提供一致的接口</li><li>但还是需要底层系统对所创建链接库的支持，所以libtool不能在不支持动态连接库的系统中创建动态链接库</li></ul><hr><p><strong>存在目的:</strong></p><ul><li>用于产生/建立便携式的库，它既可以建立动态链接库，也可以建立动态链接库，还可以包含两者</li><li>GNU libtool的目的是使每一个主机类型的完整功能都可以通过一个泛用接口来产生</li><li>GNU libtool的目标是使接口一致</li></ul><hr><p><strong>使用方法</strong><br>本章节不对应用进行过多阐述<br>libtool通常与GNU建构系统中的autoconf和automake这两个工具一起使用<br>需要参照系统手册（构建通用库所需要执行的命令）以及修改相应makefile的makefile.in或makefile.in文件<br>相关内容可查询<a href="https://www.gnu.org/software/libtool/manual/libtool.html" target="_blank" rel="noopener">libtool文档</a></p><hr><p>参考资料</p><p>GNU Libtool手册<a href="https://www.gnu.org/software/libtool/manual/libtool.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/libtool/manual/libtool.html</code></p><p>使用GNU Libtoo创建库<a href="https://www.ibm.com/developerworks/cn/aix/library/1007_wuxh_libtool/index.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.ibm.com/developerworks/cn/aix/library/1007_wuxh_libtool/index.html</code></p><p>官方网站<a href="https://www.gnu.org/software/libtool/news.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/libtool/news.html</code></p><p>autobook<a href="http://www.sourceware.org/autobook/" target="_blank" rel="noopener">跳转</a><br><code>http://www.sourceware.org/autobook/</code></p><p>获取:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">http:</span> <span class="string">http:</span><span class="comment">//ftpmirror.gnu.org/libtool/</span></span><br><span class="line"><span class="string">ftp:</span> <span class="string">ftp:</span><span class="comment">//ftp.gnu.org/gnu/libtool/ </span></span><br><span class="line">克隆: git clone <span class="string">git:</span><span class="comment">//git.savannah.gnu.org/libtool.git</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Binutils</title>
    <url>/2020/02/01/Binutils/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Binutils-第一部分"><a href="#GNU-Binutils-第一部分" class="headerlink" title="GNU Binutils 第一部分"></a>GNU Binutils 第一部分</h3><p><strong>GNU 二进制工具包</strong></p><p><strong>工具包内包含程序</strong><br>主要包含ld与as，分别是GNU链接器-GAS与GNU汇编器-GLD</p><p><strong>其他程序</strong></p><ul><li>ar-用于建立，修改，提取归档文件(archive)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>/用于对归档/静态库做创建，修改和提取的操作</li><li>addr2line-将目标文件的虚拟地址转换为文件的行号或符号</li><li>c++filt-解码C++的符号</li><li>dlltool-用于构建与使用DLL文件，也就是创建windows动态库</li><li>gold-正在测试的功能，一个新型且效率更高的ELF的链接器</li><li>ELF是一种用于可执行文件，目标文件，共享库和核心转储的标准文件格式，可执行与可连接格式，ELF所产生的数据结构与工具不做阐述</li><li>gprof-用于显示性能的分析信息/性能分析工具</li><li>nlmconv-将目标代码转换为NetWare Loadable Module/NLM文件格式</li><li>nm-列出并显示目标文件中的符号</li><li>objcopy-复制并编译目标文件，其过程中可以修改</li><li>objdump-显示目标文件中的相关信息，可用于反汇编</li><li>ranlib-生成静态库索引</li><li>readelf-用于显示任何ELF格式文件的内容</li><li>size-列出对象总体或归档文件的节数/大小</li><li>strings-列出目标二进制文件中的可打印/可显示字符串</li><li>strip-从目标文件中移除符号</li><li>windmc-兼容windows消息的编译器，用于产生windows的消息资源</li><li>windres-windows资源文件的编译器</li></ul><hr><p><strong>杂项及存在意义</strong></p><ul><li>大部分的复杂代码都存于Binary File Descriptor library和libopcodes库内</li><li>所以它是一整套编程语言工具程序,用于处理许多格式的目标文件</li><li>这些程序大多数使用BFD-二进制文件描述库</li><li>主要的目的还是为GNU项目用于解决不同格式的目标文件的可移植性问题的主要机制</li></ul><hr><p><strong>参考:</strong></p><p>获取：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//ftp.gnu.org/gnu/binutils</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//ftpmirror.gnu.org/binutils</span></span><br><span class="line">apt-get install binutils*</span><br><span class="line">克隆：git clone <span class="string">git:</span><span class="comment">//sourceware.org/git/binutils-gdb.git</span></span><br></pre></td></tr></table></figure><p>官网<a href="https://www.gnu.org/software/binutils/binutils.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/binutils/binutils.html</code></p><p>文档<a href="https://sourceware.org/binutils/docs-2.33.1/" target="_blank" rel="noopener">跳转</a><br><code>https://sourceware.org/binutils/docs-2.33.1/</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">archive是一个包含多个被包含文件的单一库文件,它可以保证从中检索到原始的被包含文件-mumber,而member用于保存archive的各种基本属性，当member被提取后，archive的属性将被还原到初始状态</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Make</title>
    <url>/2020/02/01/Make/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Make-第一部分"><a href="#GNU-Make-第一部分" class="headerlink" title="GNU Make 第一部分"></a>GNU Make 第一部分</h3><p><strong>GNU 自动化建构</strong></p><p><strong>概述:</strong></p><ul><li>在软件开发的过程中，make通常作为一个工具程序(unility software),经由makefile，从而实现自动化构建软件</li><li>在经由makefile时make工具会根据情况转换文件形式至target，转换的同时还会检查文件的依赖关系，检查依赖关系的方式本部分不做阐述</li><li>所以在编写软件时，应该先编写一个makefile，之后再让make去进行构建和安装</li></ul><p>或称为</p><ul><li><p>用于编译源代码，从而生成结果代码，然后将结果代码链接起来，最后生成可执行文件</p></li><li><p>其中名为makefile的文件用来确定某一target文件的以来关系，然后把生成target相关的命令转给机器的shell去执行</p></li><li><p>IDE通常包含了make，make多用于UNIX下的软件开发</p></li><li><p>本质如同UNIX底层的其他基本程序，批量执行生成目标的命令，同时检查文件的依赖关系</p></li></ul><hr><p>参考<br>官方网站<a href="https://www.gnu.org/software/make/make.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/make/make.html</code></p><p>获取<br><code>http: http://ftp.gnu.org/gnu/make/</code><br><code>ftp: ftp://ftp.gnu.org/gnu/make/</code></p><p>make手册<a href="https://www.gnu.org/software/make/manual/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/make/manual/</code></p><p>makefile手册<a href="https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions</code></p><p>make源码所在目录</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/doc/</span>make/</span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/doc/</span>make/</span><br></pre></td></tr></table></figure><p>make帮助指令</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">make</span> --<span class="keyword">help</span></span><br><span class="line">info <span class="keyword">make</span></span><br><span class="line">man <span class="keyword">make</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Compiler Collection</title>
    <url>/2020/02/01/GCC/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Compiler-Collection-第一部分"><a href="#GNU-Compiler-Collection-第一部分" class="headerlink" title="GNU Compiler Collection 第一部分"></a>GNU Compiler Collection 第一部分</h3><p><strong>GNU 编译器套装 GCC</strong></p><p><strong>概述:</strong></p><ul><li>它是GNU计划中关键的一环</li><li>基于GPL与LGPL软件许可,并且为free software-自由软件</li><li>UNIX-like，Linux，BSD类的操作系统都采用GCC为标准编译器</li><li>其他的C编译器LLVM,Clang</li><li>GCC通常是跨平台编译器的首选</li></ul><hr><p><strong>GCC的执行逻辑与过程</strong><br>GCC的作用是将源代码生成可执行文件大体需要四个步骤:</p><ul><li>预处理/预编译-preprocessing</li><li>编译-compilation</li><li>汇编-assembly</li><li>连接-linking</li></ul><p><strong>由下至上的处理过程</strong></p><ul><li>GCC先调用cpp进行预处理-预处理的作用是对源码文件中的文件包含-include,预编译语句-宏定义define等进行分析,预处理的主要功能大概分为三个:宏定义,文件包含,条件编译</li><li>然后调用cc1进行编译,这个阶段根据输入文件生成以.i为后缀的目标文件</li><li>然后调用as进行汇编工作,一般的汇编语言源码由.s为后缀,s为后缀的汇编语言文件经由编译器和汇编之后会生成.o后缀的目标文件</li><li>当所有目标文件都生成后,GCC就调用ld来完成最后阶段的工作-连接</li><li>在连接阶段,所有目标文件被自动生成并同时分配依赖条件/文件应该所处的位置</li><li>最后,该程序内所用的库函数也会被链接到所对应的位置</li></ul><hr><p><strong>GCC语言编译器的结构</strong><br>语言编译器的结构-由下至上/底层到顶层</p><ul><li>GCC内置了大量语言的编译器,每个语言的编译器都是独立的程序</li><li>编译器的作用是处理输入的源码,从而输出组合语言码</li><li>全部的语言编译器都有共同的中介架构</li><li>语言编译器的结构分为三个部分:前端接口,中介接口以及后端接口</li><li>前端接口负责解析符合此语言的原始码,并产生一个抽象语法树以及翻译此语法树,使其成为GCC的暂存器转换语言-RTL的后端，GCC编译器最佳化与静态程序解码技术应用于此时程序的代码上</li><li>最后适应于硬件架构的组合语言经由某一不可知算法产出</li></ul><hr><p><strong>参考:</strong></p><p>官方网站<a href="https://gcc.gnu.org" target="_blank" rel="noopener">跳转</a><br><code>https://gcc.gnu.org/</code></p><p>获取<br><code>apt-get install gcc*</code></p><p>涉及编译器深层原理的内容此章节不做阐述</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Debugger</title>
    <url>/2020/02/01/Debugger/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Debugger-第一部分"><a href="#GNU-Debugger-第一部分" class="headerlink" title="GNU Debugger 第一部分"></a>GNU Debugger 第一部分</h3><p><strong>GNU 调试工具 GDB</strong></p><p><strong>概述:</strong></p><p>存在的意义/作用:</p><ul><li>GDB大多数UNIX及UNIX-like下的调试工具</li><li>GDB可以根据自定义的要求启动所选程序</li><li>让被调试的程序在指定的调试断点停住，其断点可以是条件表达式，当程序被停住时可以去检查该程序中正在处理的事务</li><li>GDB还可以用于修改程序，以此来修复BUG所带来的影响</li><li>GDB相比于其他具有GUI的调式工具的优点就是具有修复网络断点以及恢复链接等功能</li><li>还可以把GDB理解为一个强大的命令行调试工具，命令行的优点就是可以形成一个完整的执行序列，以此来形成脚本程序<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li></ul><p><strong>使用方法简述:</strong></p><p><strong>启动</strong></p><ul><li>可以直接执行GDB以启动GDB命令行，<code>quit</code>退出GDB命令行</li><li>执行<code>gdb file name</code>来选中被调试的目标文件，并进入GDB命令行</li><li><code>run</code>用于执行程序，后面可以接GDB已有的缺省参数</li></ul><p><strong>断点</strong></p><ul><li>执行break命令，可以简写为b，用来给调试的程序中设置断点</li><li>从断电处继续运行执行continue命令</li><li>GDB还内置了断点的管理工具</li><li><code>info break</code> 用于显示当前GDB所有的断点信息</li><li><code>break breakpoint 编号</code> 用于删除指定编号的断点，如果不带编号将删除所有的断点</li><li><code>disable breakpoint 编号</code> 用于禁止使用指定编号的断点，同时info break的enb域变为n</li><li><code>enable breakpoint 编号</code> 允许指定断点，同时info break的enb域变为y</li></ul><p><strong>其他功能简述</strong></p><ul><li>单步执行：next不进入单步执行，step进入单步执行</li><li>函数调用：call function name调用和执行一个函数，执行finish结束当前的函数，如果有返回值就会显示其返回值</li><li>机器语言工具，信号处理与变量复制的检查</li></ul><hr><p><strong>参考资料:</strong></p><p>官方网站<a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener">跳转</a><br><a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener">https://www.gnu.org/software/gdb/</a></p><p>GDB手册<a href="https://sourceware.org/gdb/current/onlinedocs/gdb/" target="_blank" rel="noopener">跳转</a><br><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/" target="_blank" rel="noopener">https://sourceware.org/gdb/current/onlinedocs/gdb/</a></p><p>深入GDB<a href="https://web.archive.org/web/20080616054054/http://sources.redhat.com/gdb/current/onlinedocs/gdbint.html" target="_blank" rel="noopener">跳转</a><br><a href="https://web.archive.org/web/20080616054054/http://sources.redhat.com/gdb/current/onlinedocs/gdbint.html" target="_blank" rel="noopener">https://web.archive.org/web/20080616054054/http://sources.redhat.com/gdb/current/onlinedocs/gdbint.html</a></p><p>开源程序的体系结构-GDB<a href="http://www.aosabook.org/en/gdb.html" target="_blank" rel="noopener">跳转</a><br><a href="http://www.aosabook.org/en/gdb.html" target="_blank" rel="noopener">http://www.aosabook.org/en/gdb.html</a><br><a href="http://www.aosabook.or" target="_blank" rel="noopener">http://www.aosabook.or</a></p><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">因为UNIX下的软件基本上都是命令行的，所以它们具有天生的优势-可以很方便的把简单的已有工具的命令集成在一起，从而做出一个功能强大的程序 ---</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Lib</title>
    <url>/2020/01/30/Lib/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Lib-第一部分"><a href="#GNU-Lib-第一部分" class="headerlink" title="GNU Lib 第一部分"></a>GNU Lib 第一部分</h3><p><strong>GNU 可移植性库</strong></p><p><strong>概述:</strong></p><ul><li>GNU Lib 存在的意义是实现所有gnu代码关于移植性问题处理方法的统一化</li><li>使任何基于GNU标准的软件，可以顺利的移植到任何其他的操作系统上，关于操作系统移植问题的方法统一化</li><li>所以可以把GNU Lib理解为所有基于GNU标准的软件的子程序，这些子程序将GNU软件互相链接，从而实现GNU软件包之间的完全共享</li><li>其中gcc因为libiberty库的原因，很难脱离GNU的构建树，但GNU Lib与其完全不同，构成它的子程序会实现资源等级的划分，使所有基于GNU协议的软件实现代码共享，从而解决移植性问题，而绝非去构建，安装或者链接库</li><li>因此GNU Lib没有发行版的概念，只需要将GNU Lib的源码复制到使用者的代码树中即可</li></ul><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>官网<a href="https://www.gnu.org/software/gnulib" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gnulib</code></p><p>手册<a href="https://www.gnu.org/software/gnulib/manual" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gnulib/manual</code></p><p>获取<br><code>git clone git: //git.savannah.gnu.org/gnulib.git</code></p><p>GNU Lib模块列表<a href="https://www.gnu.org/software/gnulib/MODULES.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gnulib/MODULES.html</code></p><p>社区<a href="http://git.savannah.gnu.org/gitweb/?=gnulib.get" target="_blank" rel="noopener">跳转</a><br><code>http://savannah.gnu.org</code><br><code>http://git.savannah.gnu.org/gitweb/?p=gnulib.get</code></p><p>帮助指令:<code>./gnulib-tool --help</code></p><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔 2020-1.30 pm1.23</title>
    <url>/2020/01/30/%E5%AF%B9%E4%BA%8E%E8%87%AA%E8%BA%AB%E7%9A%84%E4%B8%BB%E8%A7%82%E6%80%A7%E8%AF%84%E4%BB%B7/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="8fb6817da982f0bbd0ff958d582fd341d8bcfc4b54f4c4d9095e968d4bf4ba81">0267ec72f19b8c198697a4f72870a3a82638093160e2b2cc12e4971a299433a85dd13c409b2aae5651484d0d3c6e8e0902b987088f15325ec7c717d0d75de1e753b256c489b737698fca0b9d5a77e7937a6ca468d316022ab6804a509dea9eea975a13cb4014cd16324d9649cf0d4d6f5b81da789b9adefbc6f69efeb31b7d67b7860eb113a5c2c6fd0e09cb9c6bd18658cb8ba616620fccf40a1eb171fa4ade4b216b435acd078a5fa1513e49e30a6bc52dca775e1b3bf151c3d78adcd515dac929a977fde6628f8b4f6a7c5b1d700ef89321af4dc51bca1e1b5a450276af8881e7e764ed8e5c5e33fb2a7f175abac88f874d8279341290a794c893c84df4f2f40be4a7318a0790d8206edbad6e299846d1e08e9d81cccf4f632756a16ca341528060daf8be78fa78917f6a020dfadffb9ff1da902fdc188cfaa1889c8d45e19dfe88c6187e1386458f64d3f9d6c6161d5ca55b2603a1032fe745f5c88e048d8c05d0989e8077c51a9a1544ec12fe786d4c535f15a3dab477701183656c7b11bc9f1bd21966e6123a6c866da899c445f746d5bf82ab6133f6124de8308cbec3ebaad0966d100b6ed49b8e96468a54bdfcef4e0511259889e8e09f6fa22746609736897766113bf725c6714fd2e35feccb7f44109a2308d5df2e429bc6d6303a01e0c66e066fe638cc4f72145f77e4939889b64f24cd81ff03ee0fdda53f2b0fbd72a75098f19497dca5f6e9355a3731d4a2cb9f02704e40c8ead7d10841ab385fd16ff8ed59469456597d78772744b006d19d07de31c98afb6bc01d6c4eec17a309c595d1e54b796978df788658efd7b724df6eee4286c8bffc774817a53edb388dc13a0db084181aa6874e2c6a4e3daa03a06d532f0d84ccda74925914bf4b5436e0b4d7b6d0570037fab37ebb00eabc5f3e0992c8e236dd34cbaa6c1c5ca9e7aab87f87691e0b36c17040cc51312e9ce5c780334ccee50b5cb261353b92c9ffe41d214b7f36f05a182a1d670a2a5df8f58548fe6161698daa221d95cd1b4458c8da9cab730e693fc535a8a7d6593fe5ff013f57e65efe55a228c247fe703cdadd242295985c740cf2ad52d66c95be70f859e0bcd1f76d9fd9df4558ae4428da7200de96712c6559f750af8990f474724ddc9c5ba15ccfe619f8df6d8b782c91b981cff4c06dd151cb023ca8486528fd22c9b38c9abee1aa99fb8e9a53fee6853dff28d24bc087aa7d43b93f027df581f1a3566130178dbe7bd470343a0455d724efb4072a49b878ff12ab9a11d674dd6b2daf29ca40dd117e94fb5760c54dc403d757024e785340e7635dfe16a58ee80c85530acf1fa9474b40a21d3661e9805e4bdd01977b7ee42181f6badf6d5beacba39d6287b1f11d5830c202d00b6d0794bfc5d410f53d774d81ff680116501900ec6828981d40183522369de8731eaf3ab7d5faa1520060941e14b00f817b203fcf850ea5687bd4dd6d4b0a39abbbca151dfc517aaf8fb518297fc618ec26fa845474e353646e11bf61e72fbf408ff92b289326118a66d5bed11ab5e7fa1d2d1cae8cb78e5142d23ef2d0b8e9e16c7805968307d7a7a7a1e549339d0d70efa6f13ebea408eeca022abbd6dd8b15bb604939f2c5486a7b5649843e5419724d37b1c79eccd261da93d07ba007a16569f9503d822e7d501eca8696b3b58c38e660756cfe64cd86ade1e51d5d3ab986edf258395f16c2cd01fa8c7bf8ebfe85ea430dca1181eff98c34a931df46c612ccd4525c40d7df65cb5c23064630c75cf4a122dda67162dc49d4643f7e45b534c35e39ed65aaffb7a7e60582b01613f0368a0bb3ae335e192761a22d2ebe55efed54ba62b9b394180684a8a89b07537ff2b36c3fe0b49e5cbc8d9a97b1abcd736a128c095f3ca102b513a6629155d493dbdf3a968199a027b94cb9ce9ac17606e9914a2589eb280bf38b09a0fe2fe798fb4671227aae2063ff0589cf5a3308722d9854b2366a272457c5db9136a353e44c5d47c9cdf7cd195ec0d62d7dce229ab800312477e6d78b1f83f99572a61cb901417dee155898773b1a5a7f87133d6059d5e93b23d8457d6111c67320eec02012c83ff4bf99633d743cf49f8fc0533c85a5a6b0ef39bc7468341402b277e4bf274e03ee1902c76cfd8bcc95453a143e7725d83532744ae9297eafb0784e5162f2cb527fb610883e2fb98e656e7291e475dd0304754dd8fc310910120a2f42e153e0a0de7281e5e495b431784a74bc2913cc1c1e18e3f0c2e145c7ee19bfbe7156ac08b3715b434a101f4cf3c9e94d6254be142b1bf549889d116a441351d78ab478bcebfa268c653db611c409b72520c25bfa458f282b3ad248b0d98bd6f5eb041bd80dcc13ec3f7f45d993612935dd5351202e4c345278420ca9d766b84eace2d56863fef2300f399335d322d588cf1a9ad7a39b4661ad14c8f2a5cfa3ec6b5bdb8c908bdee8d48ed01473a4519b91d3e563af2e1488febb68908b627ed969df55bbef992c1c168548062a7eee324a2c5c2767f33dc7ca69ccd6486f64e68ae9ae6b12eb181a23db956b75c5ae338fe30f6be924495fedd4a9737a6059bc4141279a473e051dcafe69d56dcf34874802eb9a1203dfe19648cdb364e78125eb780dc25ccdfcb4c9e0257938cc81c7d0ab2f5d9d71c677b27250efbed96f28a5438df736e0beabfe9d9d4936a82d3a22d1e60b95e5e35edbc89ae0180ed46bdb239caabaa536b6c278c677945a86e37bdd4f572813f0b83e1719d72cf10fd93573ec510d8ff840c975575903b2ef97030895120597fa8f21bc5ca10cf6bcc1ca08d9f9e30464a36bd792f0447fe752b9f67d4b05dfc179f9ad3b0666491681c8f8339fa94762fbff905493c9cfeaafd6f8c5e5c7de149949c1e50c8baef6f08739c694f9948cf725fd0b485da7c093ab8ead3522eca7d4695a411ca24d8e6ffb6092dd5f77900880b0fcdbdd82ec7b08c7cf5417b59d3a7bffe951ac40b20ca19567ca3ea5b76e9f1447fe0a6956af9e4386ee366a7fda03029ae90dddbd0bb71ea71e27b06296303efe1a03567380a69572fb0e89f51ab2b99abed85f1786b428d4ac8f5d2375f8b04ae1fc5f02c65cb483017b8ccb89e20e90ad4d12fcb551c6bcba6e4124f0643c50f0499c3366eb215526819c0667822b8b54f9dea0883dff41750c90db14005344b52754ea983981c0e6a647408ad63864312cef85265b72f485c05f24c2e4609e147c3458c7ff44acec31a444d5281d0e34dc0b324592df4b9a9da6612034a0c65a5fdca28b1e71112f47d4b6c585306870cdbed24206983fb7da9be6057f4365a8c1f8ab38d626dcabb8380b8d5f2288d241006866e8f5977cbe309e480f4ad7aac5e613b7c48524c9edd28088053dcb8ca2bc4443a1d16147766475a3527c1efca9d2d82f6c5fd441314dc9b876da723281d267a5c90707cde14f1bd23f4030f6410c452272c93f9e067637894a9b00aac611e93728ae6f1976745231a1780989522275b5fabff6212bb4a4e4f98f9d880c2e24d4092cf8a4572cf77533e24929328b654aab645b7afc57b188536f087eb093bddd01fb2be78ff9ee7849fd5e66db18e21762647dbceb056dfbb0528b5db66a31c2f9cc9616226e4be24472ea63de421fb786de48a6deb3b21c2381bd52b4289a8221f3ff6309382285ff741030d9a69208082745a13e458e37772dafd4bbd020c4d3c0383de752db6dc13e737f6ac9aa54de2ea33d7bd069e52569750f38b603a1d998aefcb4dbd1f9a2a0239a9e6f5ecbe9e7b9f5e94b4a58248fc46abb58370667333467f840d3721b77e87da5c5ff66aface590bffc56681af55d9b1cf83ecab74c0708a5f5283137cc949520ca9fb2136abd8d560111aa0fd45af058bb8e1116dfb22418cb381bdc670414d8e122c9956b5f3474429649d5723d00d3b89c6215aac8f5a97a056bda5a47ed0dc6891c6375c564bf32bef884319043d6e9d699a62ffd5dee69b944e7ce24b7eab0817befc8024f453e154235df517cbe714a67b134e46dde62404a04dbafda6863fd5f97da75d47514716105e5158f5620e861914b3af763e65ea6c898b09f9ef2cfe3179fb42ffffbf33da1f4e3ebefa2e049757c1d63f37f88fbbf1a484b4cc866534e20c2aa5367969eb1faf627df014cfcf51550fee643d22fba2b757680b1d493bc7c58b176019dbf92f937102685ebb69a355c1b4d754b7ca0ab604fe38107dcabf151da8a1576ff840775625c180b78bfd53d4de18e022fe9008eef08780815d8940d7ccde356b75e63c8e7f97c5bbe99e77948d21916c05983b178c28954a0bddf25cd203a7d752675fbea28cd08c7c912fb0e2d742074b7f97a07c7e4feddb9e797018fc45b70e9f12b52e664fae9527a4a65519b04f5e7ec70d90885f8051349e55683149a10b162d19d1f02a99d5c48f7cb2323d798d3556f370b7dfba697a5c6758f6816b59502e8f3911a1d4ea6e328127c163944dec50a3ffc59e8e660e451820daab0f750ab42e29a3bc1335511c5cc32cf569a7c65d8de768aa5c09baccca3172c974f0fc26f44b2cb59d7f5ccb411defdb07f78d3669e80e86fc39f49a4ada08cbae8692702fc95326135c1cf9218ba1dd96abe878f9ad150fd256c4abfcf2c0dd6179a4d31ccaa48509c445891c2119a115ad5d8df6502712869a0d2a70519941c405df8ea5779c200856995a623b2f1a9a12474ed7286aa01109b8641ddd64e616076b88bb88f40fa11d5c3ef795222a0ffcd1f19a96c5001590c1b9d4945feeb87b7307ad250346f8d240c01736b05491e451f6749dd4164036e81689be28dbfc641efff6fb3f1eac08f5e142af112deed922d53a03e6ed8a3e3f6c3b82cc6345de07ba7485aebd23451800868ac97d6718398d1dbcaa93237456d43c9fb0265a008509d462557e84a0513f57312f5fd2c8f310b0b39fac8298cd2e1516d9b985b0bc66fb154a4e021c1b47395a353300e6f726a8512b676a938e2b0ff265f42684c779a408f5c069215c96e3857dbddc0f0851f08a760e9bc8b381dfeec85520a990abdf7d1c982cf13b0b4583c11106081322339b03c32145b00a9149b022b6811eeedb1788f78eb499d1d7025799f1913a74875e80e35f9de6d066bfab53542aae9ea57f80fff672e9f68bec9a929b8e24a32d4617761fed5e6ad981ca04c62de995277316816efc2153ccff76bab3d50dbf1efbe6e7567c9dead7cb7c94be13816803894be1d2f9895cda7aea12969aef16bc4c625dff016f846332b81894e5482f68856c956ded70f68edfbd614f76b82de7b270c8de45e30e4fb0c96a059ff6835c3726bedf8d4d44b45cc2b81af82467898d57803a95053a84da715ba07e6940ed53da710fe817b</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU  Autotools</title>
    <url>/2020/01/29/Autotools/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-Autotools-第一部分"><a href="#GNU-Autotools-第一部分" class="headerlink" title="GNU Autotools 第一部分"></a>GNU Autotools 第一部分</h3><p><strong>GNU 构建系统</strong></p><p><strong>概述:</strong><br>autotools存在的目的就是用于生成makefile，从而实现降低makefile的维护难度与开发难度<br>autotools是一个工具集，并它包含了以下程序</p><ul><li>aclocal</li><li>autoscan</li><li>autoconf</li><li>autoheader</li><li>automake</li></ul><hr><p><strong>aclocal</strong><br>aclocal(automake)</p><ul><li>根据已安装的宏，用户定义宏和aclocal.m4文件中的宏将configure.ac文件所需要的宏集中定义到文件aclocal.m4文件中</li><li>aclocal由perl脚本所编写，而aclocal的定义为 <code>aclocal - create aclocal.m4 by scanning configure.ac</code></li><li>aclocal是一个由perl编写的脚本程序</li><li>aclocal根据configure.in文件中的宏所定义的内容，自动生成aclocal.m4文件</li></ul><hr><p><strong>autoscan</strong><br>autoscan(autoconf)</p><ul><li>用于扫描源代码以搜寻普通的可移植性问题，如检查编译器，库，头文件等</li><li>从而生成文件configure.scan，它是configure.ac的原型之一<br>或<br>执行逻辑:</li><li>autoscan工具用来扫描文件目录，可以用目录名作为参数，如果不使用参数的话，autoscan将会扫描当前所使用的目录</li><li>之后autoscan将从所指定的扫描目录中，将由扫描得到此目录下的源代码文件，基于此源代码生成源代码的configure.scan文件</li><li>configure.scan文件用于当作configure.in文件的模板，以此来获取configure.in文件</li><li>而configure.in的内容是一些宏，这些宏将经由autoconf工具处理并生成configure脚本</li></ul><hr><p><strong>autoheader</strong><br>autoheader(autoconf)<br>根据configure.ac中的某些宏，运行m4,<br>如ccp宏定义则声称config.h.in</p><hr><p><strong>Automake</strong><br>automake工具用于处理由事先编写好且带有预定义宏的文件，并生成makefile<br>简述:</p><ul><li>首先使用automake工具根据configure.in和Makefile.am来生成Makefile.in</li><li>然后编写宏定义文件makefile.in，再然后根据autoconf生成的configure脚本文件，最后让configure依据makefile.in来生成一个与之源码对应的makefile文件<br>或</li><li>automake将makefile.am中定义的结构建立起makefile.in，然后configure脚本将生成的makefile.in文件转换为makefie</li><li>如果在configure.ac中有特殊定义的宏，比如AC-PROG-LIBTOOL,automake会调用libtoolize，否则产生config.guess和config.sub</li></ul><p>官方网站:<a href="https://www.gnu.org/software/automake/" target="_blank" rel="noopener">https://www.gnu.org/software/automake/</a><br><a href="https://www.gnu.org/software/automake/" target="_blank" rel="noopener">跳转</a></p><p>官方文档:<code>https://www.gnu.org/software/automake/manual/automake.html</code><br><a href="https://www.gnu.org/software/automake/manual/automake.html" target="_blank" rel="noopener">跳转</a></p><p>获取方式:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">ftp:</span> <span class="string">ftp:</span><span class="comment">//ftp.gnu.org/gnu/automake/ </span></span><br><span class="line"><span class="string">http:</span> <span class="string">http:</span><span class="comment">//ftp.gnu.org/gnu/automake/</span></span><br></pre></td></tr></table></figure><p>帮助指令: <code>automake --help</code>与<code>man automake</code></p><hr><p><strong>Autoconf</strong></p><ul><li>autoconf工具用于根据configure.in文件和alocal.m4文件来产生configure文件</li><li>而此时的aclocal.m4需要用到GNU M4工具去处理</li><li>config是一个脚本，它能够设置源代码程序来适应各种不同的操作系统平台</li><li>并且根据不同的操作系统来产生合适的Makefile</li><li>从而使所扫描到的源代码程序能在不同的操作系统平台上被编译出来<br>或</li><li>作用是将configure.ac中的宏展开，生成configure脚本-一个shell脚本，此过程中可能需要用到aclocal.m4中定义的宏</li><li>以达成自动配置软件源代码包</li></ul><p>官方网站: <code>https://www.gnu.org/software/autoconf/autoconf.html</code><br><a href="https://www.gnu.org/software/autoconf/autoconf.html" target="_blank" rel="noopener">跳转</a></p><p>官方文档：<code>https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/autconf.html</code><br><a href="https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/autoconf.html" target="_blank" rel="noopener">跳转</a></p><p>获取方式:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">ftp:</span> <span class="string">ftp:</span><span class="comment">//ftp.gnu.org/gnu/autoconf/</span></span><br><span class="line"><span class="string">http:</span> <span class="string">http:</span><span class="comment">//ftp.gnu.org/gnu/autoconf/</span></span><br><span class="line"><span class="string">git:</span> git clone <span class="string">http:</span><span class="comment">//git.sv.gnu.org/r/autoconf.git</span></span><br><span class="line">apt-<span class="string">get:</span> apt-get install autoconf*</span><br></pre></td></tr></table></figure><p>帮助指令: <code>autoconf --help</code>与<code>man autoconf</code></p><hr><p><strong>Autotools</strong></p><p>获取方式:<br><code>apt-get install autotools</code></p><hr><p><strong>逻辑简述:</strong></p><ul><li>利用autotool组件生成configure脚本后生成makefile的执行逻辑</li><li>要生成makefile之前需要编写makefile.am文件之后再让automake工具使用autoconf所生成的configure脚本来生成所选源码文件的makefile</li><li>第一步需要先执行autoscanf命令来扫描当前目录下的源码文件，然后autoscanf会基于源码文件生成一个configure.scan文件</li><li>基于源码生成的configure.scan文件被用于当做configure.in文件的模板而存在</li><li>第二步将configure.scan的文件名改为configure.in，并对configure.in内的各种宏定义进行修改，这些宏定义内包括了用于让指向让autoconf处理configure.in文件从而生成从configure脚本</li><li>第三步执行aclocal命令，生成alocal.m4文件，因为autoconf需要aclocal.m4文件来生成configure脚本文件</li><li>第四步执行autoconf命令，生成configure脚本文件(自动配置源代码脚本文件)</li><li>第五步编写makefile.am文件，makefile.am文件用于描述定义从而让automake生成指定的宏和目标</li><li>第六步运行automake命令，可以增加参数–add-missing，从而让automake自动添加一些脚本文件</li><li>第七步运行configure脚本，从而生成基于源代码的makefile文件</li><li>最后直接使用make工具，编译并编译安装makefile就可以了，make install将会直接把可执行文件安装再/usr/local/目录下，至此完毕</li></ul><p>以上五个程序皆可称为M4宏的扩展包,文件处理的步骤与顺序，逻辑关系，应用等深度刨析第一部分里不做赘述<br>以上内容仅为主观理解，仅供参考</p><hr><h3 id="Autoconf-补充内容"><a href="#Autoconf-补充内容" class="headerlink" title="Autoconf-补充内容"></a>Autoconf-补充内容</h3><p><strong>./configure脚本常用参数解释:</strong></p><table><thead><tr><th align="left">参数</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">–help</td><td align="left">用于显示帮助信息并退出</td></tr><tr><td align="left">-prefix=/home/carl</td><td align="left">用于指定安装位置，如果安装位置不指定，默认路径为<code>/usr/local</code>下的<code>bin</code>,<code>lib</code>等文件夹</td></tr><tr><td align="left">–build</td><td align="left">用于指定此时此刻正在使用的机器，查看本机使用的可以在configure目录下执行<code>./config.guess</code></td></tr><tr><td align="left">–host</td><td align="left">用于指定编译好的程序可以运行的机器</td></tr><tr><td align="left">–target</td><td align="left">用于指定编译好的程序可以处理的其他平台<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td></tr><tr><td align="left">CC</td><td align="left">用于指定编译工具链的名字</td></tr><tr><td align="left">CFLAGS</td><td align="left">用于指定头文件(<code>.h</code>文件)的路径，如: <code>CFLAGS=-I/usr/include -I/path/include</code></td></tr><tr><td align="left">LDFLAGS</td><td align="left">gcc等编译器会用到的一些优化参数，也可以在里面指定库文件的位置<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></td></tr><tr><td align="left">LIBS</td><td align="left">用于告诉链接器要链接哪些库文件，如: <code>LIBS = -lpthread -liconv</code></td></tr></tbody></table><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">比如此时build的机器是x86，想运行的host机器是arm，程序可以处理的程序target是mips</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top">用法: <code>LDFLAGS=-L/usr/lib -L/path/to/your/lib</code></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU M4</title>
    <url>/2020/01/29/M4/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:36 GMT+0800 (中国标准时间) --><h3 id="GNU-M4-第一部分"><a href="#GNU-M4-第一部分" class="headerlink" title="GNU M4 第一部分"></a>GNU M4 第一部分</h3><p><strong>GNU 宏处理器</strong></p><p><strong>概述:</strong></p><ul><li>GNU M4是一种宏处理器</li><li>将输入拷贝到输出，同时将宏展开</li><li>宏可以是内嵌的，也可以是用户定义的</li><li>除了可以展开宏，m4还有一些内建的函数，用来引用文件，执行命令，整数运算，文本操作，循环等</li><li>m4既可以作为编译器的前端，也可以单独作为一个宏处理器</li><li>因为基于POSIX标准，所以兼容大部分SVR4<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>其主要作用于GNU Autoconf project，通常是在安装autoconf时需要m4依赖才会安装它</li></ul><p>获取途径:<br>git: <code>git clone http://git.savannah.gnu.org/r/m4.git</code><br>http: <code>http://ftp.gnu.org/gnu/m4</code><br>ftp: <code>ftp://ftp.gnu.org/gnu/m4</code><br>apt-get: <code>apt-get install m4-doc或m4*</code></p><hr><p><strong>学习途径</strong></p><p>官方文档:<br><code>https://www.gnu.org/software/m4/m4.html</code><br><a href="https://www.gnu.org/software/m4/m4.html" target="_blank" rel="noopener">跳转</a></p><p>M4 宏语言手册<br><code>http://mbreen.com/m4.html</code><br><a href="http://mbreen.com/m4.html" target="_blank" rel="noopener">跳转</a></p><p>GNU M4 社区<br><code>http://savannah.gnu.org/projects/m4/</code><br><a href="http://savanah.gnu.org/project/m4" target="_blank" rel="noopener">跳转</a></p><p>默认帮助文档<br><code>m4 --help与man m4</code></p><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">SVR4: UNIX操作系统的一种内核标准</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于debian使用hexo框架-next主题搭建并配置博客</title>
    <url>/2020/01/28/%E5%9F%BA%E4%BA%8Edebian%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6-next%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<!-- build time:Sat Feb 29 2020 01:17:37 GMT+0800 (中国标准时间) --><h3 id="对于debian的基本配置与hexo的安装"><a href="#对于debian的基本配置与hexo的安装" class="headerlink" title="对于debian的基本配置与hexo的安装"></a>对于debian的基本配置与hexo的安装</h3><p>apt源的设置与一些基本软件的配置和准备这里就不过多阐述了<br>先修改一下/etc/hosts内的所配置IP,保证机器能ping通github.com<br><code>vim /etc/hosts</code> 内添加 <code>192.30.253.113 github.com</code></p><p>接下来安装hexo所依赖的几个程序：npm，git，node.js<br><code>apt-get install npm*</code><br><code>apt-get install git*</code><br><code>apt-get install node.js*</code><br>安装完之后检查一下版本或者whereis一下看看所否健在<br>最后再安装hexo软件<br><code>npm install -g hexo-cli</code><br>安装完–version检查一下版本</p><hr><h3 id="hexo的基本操作"><a href="#hexo的基本操作" class="headerlink" title="hexo的基本操作"></a>hexo的基本操作</h3><p>hexo –help<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方中文文档与手册</a><br>hexo安装完毕后可以先进行一下测试<br>于任意目录下新建一个文件夹 <code>mkdir blog</code><br>进入文件夹后分别执行<code>hexo init,hexo g,hexo s</code><br>然后使用浏览器访问<u>localhost:4000</u>查看所否成功</p><hr><h3 id="hexo链接github库"><a href="#hexo链接github库" class="headerlink" title="hexo链接github库"></a>hexo链接github库</h3><p>利用npm安装hexo部署程序/插件<br><code>npm install --save hexo-deployer-git</code><br><code>vim /*/blog/_config.yml</code><br>修改最下方的#deployment配置</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/你所建立的仓库地址</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><p>执行<code>hexo d</code>开始远程部署，其中需要用户输入仓库所在帐号的帐号和密码</p><hr><h3 id="hexo修改主题"><a href="#hexo修改主题" class="headerlink" title="hexo修改主题"></a>hexo修改主题</h3><p>这里推荐两个个人感觉生态最好的两个hexo主题-next与yilia<br>进入blog目录下直接执行克隆命令<br><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>或<br><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code><br>此时的主题文件被存储于/blog/theme目录下<br><code>cd _condig.yml</code><br>修改#extensions中的theme，将原主题landscape修改为next或yilia</p><hr><h3 id="hexo安装搜索插件与RSS插件"><a href="#hexo安装搜索插件与RSS插件" class="headerlink" title="hexo安装搜索插件与RSS插件"></a>hexo安装搜索插件与RSS插件</h3><p>添加并配置RSS<br><code>npm install hexo-generator-feed --save</code><br>修改hexo配置文件为</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Extensions</span></span><br><span class="line"><span class="meta">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">## Themes: https:<span class="comment">//hexo.io/themes/</span></span></span><br><span class="line"><span class="symbol">        plugins:</span></span><br><span class="line">                hexo-generator-feed</span><br><span class="line">                <span class="meta">#Feed Atom</span></span><br><span class="line"><span class="symbol">        feed:</span></span><br><span class="line"><span class="symbol">                type:</span> atom</span><br><span class="line"><span class="symbol">                path:</span> atom.xml</span><br><span class="line"><span class="symbol">                limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>对主题文件添加：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">feed</span>:</span><br><span class="line">        <span class="attribute">type</span>: rss2</span><br><span class="line">        <span class="attribute">path</span>: rss2.xml</span><br><span class="line">        <span class="attribute">limit</span>: <span class="number">5</span></span><br><span class="line">        <span class="attribute">hub</span>:</span><br><span class="line">                <span class="attribute">content</span>: <span class="string">'true'</span></span><br></pre></td></tr></table></figure><p>添加并配置search-搜索<br><code>npm install hexo-generator-searchdb --save</code><br>修改hexo配置文件为</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">  <span class="attr">search:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">          <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>修改主题配置文件为<br>找到local search，然后把enable设置为true</p><p>其余类似于菜单，头像，链接与装饰的配置可以<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">参考官方文档</a></p><hr><h3 id="关于文章的书写格式与基本要求"><a href="#关于文章的书写格式与基本要求" class="headerlink" title="关于文章的书写格式与基本要求"></a>关于文章的书写格式与基本要求</h3><p>hexo文章书写的语法都来自于Markdown<br>Markdown所一种可以使用普通文本编辑器编写的标记语言<br>目的是通过简单的语法来让普通文本的内容具有一定的格式<br>详情参考: <a href="https://markdown-zh.readthedocs.io/en/latest" target="_blank" rel="noopener">Markdown中文文档</a></p><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
