<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GNU Binary File Descriptor/BFD</title>
    <url>/2020/02/02/BFD/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 21:41:03 GMT+0800 (中国标准时间) --><h3 id="GNU-Binary-File-Descriptor"><a href="#GNU-Binary-File-Descriptor" class="headerlink" title="GNU Binary File Descriptor"></a>GNU Binary File Descriptor</h3><p><strong>GNU 二进制文件描述 BFD</strong></p><p><strong>概述:</strong></p><ul><li>目的是用于解决GNU项目中不同的目标文件的可移植性的主要机制</li><li>在GNU项目中对于不同目标文件可移植EFL<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>性问题的主要解决机制</li><li>BFD库还可以用来读取核心转储的结构化数据</li><li>截至至2003年，它支持25中不同体系结构的CPU上的大约50中文件格式</li></ul><p><strong>BFD的设计逻辑与执行逻辑:</strong></p><ul><li>BFD通过对目标文件<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>提供抽象视图来达成工作</li><li>BFD在内部将数据从抽象视图转到目标处理器所规定的文件格式所要求的节与数据结构/字节布局等细节</li><li>它关键的作用是处理字节序的差异<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>,包括寻址<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>算术等细节</li><li>BFD最初的设计目的是可以成为被各种工具所使用的通用库，但为了达成这一目的就需要频繁修补API来解决系统所带来的影响与容纳新系统的功能，从而限制了它的使用模式与功能</li><li>DFD的主要用户是<a href="https://unit-serow.github.io/2020/02/01/Binutils/">GAS</a>，<a href="https://unit-serow.github.io/2020/02/01/Binutils/">GDL</a>，<a href="https://unit-serow.github.io/2020/02/01/Binutils/">GNU Binutils</a>和<a href="https://unit-serow.github.io/2020/02/01/Debugger/">GDB</a>，因此BFD不单独发行，所以它通常包括在Binutils和GDB的发行之中</li></ul><hr><p><strong>参考资料:</strong></p><p>参考网站-BFD的历史与故事<a href="https://www.oreilly.com/openbook/opensources/book/tiemans.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.oreilly.com/openbook/opensources/book/tiemans.html</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">ELF-可执行与可链接格式，Executable and Linkable Format简称为ELF ---</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top">目标文件的结构:有一个有描述信息的“头”，可变量目的“段”，每个段都有一个名字，一些属性和一块数据，一个符号表，一组重定位入口顶等等</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display:inline-block;vertical-align:top;padding-right:10px">3.</span><span style="display:inline-block;vertical-align:top">比如在小端序主机和大端序目标之间，在32-bit和64-bit数据之间的正确转换和重定位入口项所指定的寻址算术的细节</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display:inline-block;vertical-align:top;padding-right:10px">4.</span><span style="display:inline-block;vertical-align:top">寻址是每种计算机中央处理器的指令集架构中的一部分，各个指令集下有不同的寻址模式，寻址模式决定了此架构下计算机语言指令所对应的运算数</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU AutoGen</title>
    <url>/2020/02/02/AutoGen/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-AutoGen"><a href="#GNU-AutoGen" class="headerlink" title="GNU AutoGen"></a>GNU AutoGen</h3><p><strong>GNU 代码维护工具</strong></p><p><strong>概述:</strong></p><ul><li>AutoGen用于简化包含大量重复文本，指令集与宏定义的程序的创建和维护，所以在必须完全保持多个文本块同步的程序中，它能发挥很大的作用</li><li>除了CGL数据与已有的AutoGen定义之外，AutoGen还可以自定义格式或将XML文件作为输入定义</li><li>它经常被用于创建和维护处理程序选项所需的代码，处理选项需要在程序之间的不同位置同时维护多个构造，所以对于选件的维护是没有尽头的</li><li>因此，autogen带有一个名为autoopts的附加软件包，它用于简化程序选项的维护和文档编制</li><li>已知autogen可在GNU/Linux，BSD，OS/X，等其他操作系统上工作</li><li>它的最终目的是在任何具有ANSI C编译器的现代UNIX系统上运行</li></ul><hr><p><strong>参考资料:</strong></p><p>源码获取:<a href="http://autogen.sourceforge.net/data/" target="_blank" rel="noopener">跳转</a><br><code>http://autogen.sourceforge.net/data/</code></p><p>手册<a href="https://www.gnu.org/software/autogen/manual/html_node/autogen.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/autogen/manual/html_node/autogen.html</code></p><p>快捷参考<a href="https://www.gnu.org/software/autogen/man1-autogen.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/autogen/man1-autogen.html</code></p><p>autogen官网<a href="https://www.gnu.org/savannah-checkouts/gnu/autogen/autogen.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/savannah-checkouts/gnu/autogen/autogen.html</code></p><p>开发者社区<a href="http://savannah.gnu.org/projects/autogen" target="_blank" rel="noopener">跳转</a><br><code>http://savannah.gnu.org/projects/autogen</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Data Display Debugger</title>
    <url>/2020/02/02/DDD/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Data-Display-Debugger"><a href="#GNU-Data-Display-Debugger" class="headerlink" title="GNU Data Display Debugger"></a>GNU Data Display Debugger</h3><p><strong>GNU 调试器前端 DDD</strong></p><p><strong>概述:</strong></p><p>DDD:</p><ul><li>DDD基于GPL许可证发行</li><li>DDD是GNU计划的一个重要的组成部分</li><li>DDD主要用于Unix系统,并且有许多开源插件对其使用性的补充</li><li>GNU DDD是一个用于数据显示的调试器前端(Debugger front-end)，它使用motif工具包实现GUI</li><li>应用于诸如GDB,DBX,JDB,XDB,多种语言调试器和bash等命令行调试器的调试器前端，也包括GNU Make调试器等用于调试器的调试器前端</li><li>DDD拥有GUI前端的功能，可以查看源文本及其交互式图形数据的显示，将数据结构以图形化显示</li></ul><p>GCL:</p><ul><li>调试器前端就是所指调试器所使用的命令行解释器/命令行界面(CLI)，这里所指的调试器前端就是DDD</li><li>一个好的CLI可以最大程度的提高可移植性并最大程度地减少资源消耗</li><li>而最让开发者们青睐的还得是具备GUI的CLI，所以有一些GUI调试器的前端被设计成与各种GLI相兼容，还有一些GUI则针对某一个特定的GLI</li></ul><hr><p><strong>参考资料:</strong></p><p>文档<a href="https://www.gnu.org/software/ddd/manual/html_mono/ddd.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/ddd/manual/html_mono/ddd.html</code></p><p>官网<a href="https://www.gnu.org/software/ddd/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/ddd/</code></p><p>社区<a href="http://savannah.gnu.org/svn/?group=ddd" target="_blank" rel="noopener">跳转</a><br><code>http://savannah.gnu.org/svn/?group=ddd</code></p><p><a href="https://lists.gnu.org/archive/html/ddd/2009-02/msg00001.html" target="_blank" rel="noopener">参考资料:</a><br><code>https://lists.gnu.org/archive/html/ddd/2009-02/msg00001.html</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Common Lisp</title>
    <url>/2020/02/02/GCL/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Common-Lisp"><a href="#GNU-Common-Lisp" class="headerlink" title="GNU Common Lisp"></a>GNU Common Lisp</h3><p><strong>GNU Common Lisp编译器 GCL</strong></p><p><strong>概述:</strong></p><ul><li>不要与GNU CLISP和Common Lisp的概念混淆</li><li>GNU Common Lisp（GCL）是GNU计划中ANSI Common Lisp的编译器</li><li>它是Kyoto Common Lisp的演化版</li><li>它的执行过程通常是先生成C代码然后调用C的编译器来生成本机的目标代码</li><li>GCL是包括数学工具maxima，AXIOM,HOL88和ACL2在内的几个大型项目的首选实现</li><li>GCL可以在Linux或FreeBSD，microsoft windows等11种不同体系架构的系统下运行</li></ul><hr><p><strong>参考资料:</strong></p><p>FSF的GCL社区<a href="https://directory.fsf.org/wiki/Gcl" target="_blank" rel="noopener">跳转</a><br><code>https://directory.fsf.org/wiki/Gcl</code></p><p>官网社区<a href="https://www.gnu.org/software/gcl/gcl.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gcl/gcl.html</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU CLISP</title>
    <url>/2020/02/02/CLISP/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-ANSI-Common-Lisp"><a href="#GNU-ANSI-Common-Lisp" class="headerlink" title="GNU ANSI Common Lisp"></a>GNU ANSI Common Lisp</h3><p><strong>概述:</strong></p><p>摘要:</p><blockquote><p>用于实现 ANSI Common Lisp <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>中所描述的语言标准，并且拥有许多拓展<br>CLISP于大多数GNU与Unix系统上运行，还包括windows NT,ME等等，只需要4MB的RAM<br>common lisp是一种面向对象的通用高级编程语言<br>common lisp算是lisp语言的一种方言吧</p></blockquote><p>参考文献:<br>ANSI Common Lisp 中文翻译版<a href="https://acl.readthedocs.io/en/latest/" target="_blank" rel="noopener">跳转</a><br><code>https://acl.readthedocs.io/en/latest/</code></p><p>电子书版本<a href="https://web.archive.org/web/20020805060924/http://www.lisp.org/HyperSpec/FrontMatter/index.html" target="_blank" rel="noopener">跳转</a><br><code>https://web.archive.org/web/20020805060924/http://www.lisp.org/HyperSpec/FrontMatter/index.html</code></p><p>官方网站<a href="https://clisp.sourceforge.io/summary.html" target="_blank" rel="noopener">跳转</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;clisp.sourceforge.io&#x2F;summary.html</span><br><span class="line">https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;clisp&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;clisp.sourceforge.io&#x2F;</span><br></pre></td></tr></table></figure><p>参考手册<a href="https://clisp.sourceforge.io/impnotes/clisp.html" target="_blank" rel="noopener">跳转</a><br><code>https://clisp.sourceforge.io/impnotes/clisp.html</code></p><p>获取:<br><a href="http/SF">跳转</a>/<a href="http://ftp.gnu.org/pub/gnu/clisp/" target="_blank" rel="noopener">跳转</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#x2F;SF</span><br><span class="line">http:&#x2F;&#x2F;ftp.gnu.org&#x2F;pub&#x2F;gnu&#x2F;clisp&#x2F;</span><br></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">基于ANSI标准的common lisp语言的实现(编译器、调试器和解释器) ---</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Gettext</title>
    <url>/2020/02/02/Gettext/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Gettext-第一章节"><a href="#GNU-Gettext-第一章节" class="headerlink" title="GNU Gettext 第一章节"></a>GNU Gettext 第一章节</h3><p><strong>GNU 国际化(i18n)库</strong></p><p><strong>概述:</strong></p><ul><li>国际化与本地化函数库</li><li>GNU gettext是GNU translation project中最重要的一步</li><li>GNU通用性翻译计划</li><li>这个项目的达成将会让GNU拥有更大的经济与用户结构，从而拥有更多的资本</li></ul><p><strong>引用自官方文档:</strong></p><blockquote><p>在以前，通常GNU内部或大量其它的自由软件中的程序源代码都是拿英文编写或记录的，并且在与用户交互的界面所使用的也是英语<br>当世界上所有的开发人员之间使用一种通用的语言去交流会让开发的过程变得极为方便<br>但是，在全世界范围内的大多数人对于英文的理解能力和学习深度远不如母语，所以它们更愿意使用母语进行日常工作<br>并且大多数人只是希望让屏幕上其它晦涩难懂的语言少一点，而自己的母语多一点<br>所以就有了GNU Gettext<br>该软件包为程序员，翻译人员与用户提供了一套完善的工具和文档集<br>更准确的说，gnu gettext所使用的程序是一组工具，提供了一个框架来帮助其他GNU软件包生成多语言的消息</p></blockquote><p><strong>这个工具包括了以下的一组程序:</strong></p><ul><li>一套如何编写程序，从而让消息目录支持的规则</li><li>一套如何为目录本身和文件命名的规则</li><li>一个运行时库，用于支持检索翻译后的消息</li><li>一些独立程序，以各种方式处理可翻译的字符串或已翻译字符串的集合</li></ul><p>GNU Emacs拥有实现这套程序的插件或拓展，感兴趣的可以去查询有关GNU Emacs的消息</p><hr><p>逻辑简述:<br>以下内容参考自:<a href="https://www.gnu.org/software/gettext/manual/html_node/Program-Index.html#Program-Index" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gettext/manual/html_node/Program-Index.html#Program-Index</code></p><ul><li>xgettext程序从源代码生成.pot文件，作为源代码中序翻译内容的模板</li><li>而翻译者需要工作的对象是.po文件，它是有msginit程序从.pot模板文件生成的</li><li>翻译者用maginit初始化中文翻译文件时可以执行<code>msginit --locale=cn --input=name.pot</code></li><li>然后编辑所生成的.po文件</li><li>最后.po文件需要使用msgfmt编译为.mo文件以用作发布</li><li>使其运行需要使用UNIX操作系统中的用户需要修改环境变量中的<code>LC_MESSAGES</code>或<code>LANG</code>，程序将自动从相应的.mo文件中读取语言信息</li></ul><p>使用方法:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在使用gettext()方法的时候通常以标记别名_的形式使用</span><br><span class="line">如printf(gettext(&quot;name is %s. \n&quot;), first_name);</span><br><span class="line">可以写作printf(_(&quot;name is %s.\n&quot;), first_name);</span><br></pre></td></tr></table></figure><hr><p>参考资料:<br>官方网站<a href="https://www.gnu.org/software/gettext/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gettext/</code><br>获取<a href="https://ftp.gnu.org/pub/gnu/gettext/gettext-0.20.1.tar.gz" target="_blank" rel="noopener">跳转</a><br><code>https://ftp.gnu.org/pub/gnu/gettext/gettext-0.20.1.tar.gz</code><br>社区<a href="https://savannah.gnu.org/projects/gettext/" target="_blank" rel="noopener">跳转</a><br><code>https://savannah.gnu.org/projects/gettext/</code><br>文档<a href="https://www.gnu.org/software/gettext/manual/gettext.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gettext/manual/gettext.html</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Portable Threads/Pth</title>
    <url>/2020/02/02/Pth/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Portable-Threads-第一章节"><a href="#GNU-Portable-Threads-第一章节" class="headerlink" title="GNU Portable Threads 第一章节"></a>GNU Portable Threads 第一章节</h3><p><strong>GNU 可移植线程库 Pth</strong></p><p><strong>概述:</strong></p><ul><li>GNU计划重要的一部分</li><li>GNU Pth 是用于UNIX平台下基于POSIX与ANSI C的用户空间线程库</li><li>GNU Pth还包含了POSIX线程的API，以达成向后兼容的目的</li></ul><p>GNU Pth使用到内核空间线程的N:1映射，所以说调度完全将完全由GNU Pth库进行<br>内核将不会干涉用户空间中任何数量的线程，所以利用不到SMP<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所拥有的机制，因为SMP必须由内核派遣</p><p><strong>存在目的:</strong></p><ul><li>GNU Pth的目的是针对任意线程的处理达到高度的可移植性</li><li>其次是为了让多线程应用提供基于优先级的调度</li></ul><hr><p><strong>参考资料:</strong></p><p>官方网站<a href="https://www.gnu.org/software/pth/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/pth</code></p><p>官方手册<a href="https://www.gnu.org/software/pth/pth-manual.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/pth/pth-manual.html</code></p><p>多线程库列表<a href="https://www.gnu.org/software/pth/related.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/pth/related.html</code></p><p><a href="https://www.gnu.org/software/pth/related.html" target="_blank" rel="noopener">多线程库文档，包含了Unix系统中所有对于已知多线程库的调用</a><br><code>https://www.gnu.org/software/pth/related.html</code></p><p>关于OSSP pth<a href="http://www.ossp.org/pkg/lib/pth/" target="_blank" rel="noopener">跳转</a><br><code>http://www.ossp.org/pkg/lib/pth</code></p><p>论文引用:<br><a href="http://heather.cs.ucdavis.edu/~matloff/pth.html" target="_blank" rel="noopener">对于GNU pth的使用与描述</a><br><code>http://heather.cs.ucdavis.edu/~matloff/pth.html</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">均衡多处理架构</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU C libary/Libc</title>
    <url>/2020/02/02/Libc/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-C-Library-第一章节"><a href="#GNU-C-Library-第一章节" class="headerlink" title="GNU C Library 第一章节"></a>GNU C Library 第一章节</h3><p><strong>C 标准函数库 Libc</strong></p><p><strong>概述:</strong></p><ul><li>GNU/Linux操作系统一个重要的组成部分</li><li>FSF为GNU所写，作用是配合linux内核,是Linux下基于ANSI C<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>标准的GNU C<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>标准函数库</li></ul><p><strong>存在目的:</strong></p><ul><li>目的是为linux内核的操作系统提供核心库文件，库提供了关键的API，当然也包括Linux内核的API</li><li>虽说称为C的标准函数库，但还支持很多其他的程序语言</li></ul><hr><p><strong>其它C 标准库</strong></p><p>C POSIX library</p><ul><li>C 可移植标准接口库</li><li>包含了一些在C 标准库之外的函数，这里指ANSI所定制的C 标准库</li></ul><p>CRT/C Run-time Library</p><ul><li>C 运行时期库</li><li>C 程序运行时需要这些库中的函数</li><li>包含于程序运行时使用到的一些API集合，这里的API是预先编译后存放在linux系统中的二进制代码形式的文件</li><li>CRT通常作为C编译程序发布</li><li>CRT含有初始化代码，还有错误处理代码(例如divide by zero处理)</li></ul><hr><p><strong>其它资料:</strong><br>ANSI C库可以根据头文件划分为15个类别<br>其中包括:</p><ul><li>字符类型 ()</li><li>错误码()</li><li>浮点常数 ()</li><li>数学常数 ()</li><li>标准定义 ()</li><li>标准 I/O ()</li><li>工具函数 ()</li><li>字符串操作 ()</li><li>时间和日期 ()</li><li>可变参数表 ()</li><li>信号 ()</li><li>非局部跳转 ()</li><li>本地信息 ()</li><li>程序断言 () 等等</li><li>这在其他的C语言的IDE中都是有的</li></ul><h2 id="以上内容引用自百度百科条目"><a href="#以上内容引用自百度百科条目" class="headerlink" title="以上内容引用自百度百科条目"></a>以上内容引用自百度百科<a href="https://baike.baidu.com/item/libc" target="_blank" rel="noopener">条目</a></h2><p>参考资料:</p><p>GNU C Library连接<a href="https://www.gnu.org/software/libc/involved.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/libc/involved.html</code></p><p>C POSIX库参考文献<a href="https://web.archive.org/web/20100724201155/http://www.space.unibe.ch/comp_doc/c_manual/C/FUNCTIONS/funcref.htm" target="_blank" rel="noopener">跳转</a><br><code>https://web.archive.org/web/20100724201155/http://www.space.unibe.ch/comp_doc/c_manual/C/FUNCTIONS/funcref.htm</code></p><p>C 标准函式库<a href="https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html" target="_blank" rel="noopener">跳转</a><br><code>https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html</code></p><p>C POSIX library-wiki<a href="https://zh.wikipedia.org/wiki/C_POSIX_library" target="_blank" rel="noopener">跳转</a><br><code>https://zh.wikipedia.org/wiki/C_POSIX_library</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">由美国国家标准局所制定的C语言发布标准-是最基本的C语言函数库，包含了C语言最基本的库函数并且是C语言最初的标准</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top">由LGPL许可协议发布的，自由的，公开源代码并且方便下载的C编译程序</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Libtool</title>
    <url>/2020/02/01/Libtool/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-libtool-第一章节"><a href="#GNU-libtool-第一章节" class="headerlink" title="GNU libtool 第一章节"></a>GNU libtool 第一章节</h3><p><strong>GNU 构建系统</strong></p><p><strong>概述与解释:</strong></p><ul><li>GNU Libtool是一种属于<a href="https://unit-serow.github.io/2020/01/29/Autotools/">GNU构建系统</a>的GNU程序设计工具</li><li>GNU Libtool是一个用于支持通用库的脚本程序</li><li>用于解决在不同的操作系统中使用共享库进行代码移植的复杂性，在不同的系统中建立动态链接库，以隐藏不同系统之间的差异性</li><li>从而给开发人员提供一致的接口</li><li>但还是需要底层系统对所创建链接库的支持，所以libtool不能在不支持动态连接库的系统中创建动态链接库</li></ul><hr><p><strong>存在目的:</strong></p><ul><li>用于产生/建立便携式的库，它既可以建立动态链接库，也可以建立动态链接库，还可以包含两者</li><li>GNU libtool的目的是使每一个主机类型的完整功能都可以通过一个泛用接口来产生</li><li>GNU libtool的目标是使接口一致</li></ul><hr><p><strong>使用方法</strong><br>本章节不对应用进行过多阐述<br>libtool通常与GNU建构系统中的autoconf和automake这两个工具一起使用<br>需要参照系统手册（构建通用库所需要执行的命令）以及修改相应makefile的makefile.in或makefile.in文件<br>相关内容可查询<a href="https://www.gnu.org/software/libtool/manual/libtool.html" target="_blank" rel="noopener">libtool文档</a></p><hr><p>参考资料</p><p>GNU Libtool手册<a href="https://www.gnu.org/software/libtool/manual/libtool.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/libtool/manual/libtool.html</code></p><p>使用GNU Libtoo创建库<a href="https://www.ibm.com/developerworks/cn/aix/library/1007_wuxh_libtool/index.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.ibm.com/developerworks/cn/aix/library/1007_wuxh_libtool/index.html</code></p><p>官方网站<a href="https://www.gnu.org/software/libtool/news.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/libtool/news.html</code></p><p>autobook<a href="http://www.sourceware.org/autobook/" target="_blank" rel="noopener">跳转</a><br><code>http://www.sourceware.org/autobook/</code></p><p>获取:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http: http:&#x2F;&#x2F;ftpmirror.gnu.org&#x2F;libtool&#x2F;</span><br><span class="line">ftp: ftp:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;libtool&#x2F; </span><br><span class="line">克隆: git clone git:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;libtool.git</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Binutils</title>
    <url>/2020/02/01/Binutils/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Binutils-第一部分"><a href="#GNU-Binutils-第一部分" class="headerlink" title="GNU Binutils 第一部分"></a>GNU Binutils 第一部分</h3><p><strong>GNU 二进制工具包</strong></p><p><strong>工具包内包含程序</strong><br>主要包含ld与as，分别是GNU链接器-GAS与GNU汇编器-GLD</p><p><strong>其他程序</strong></p><ul><li>ar-用于建立，修改，提取归档文件(archive)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>/用于对归档/静态库做创建，修改和提取的操作</li><li>addr2line-将目标文件的虚拟地址转换为文件的行号或符号</li><li>c++filt-解码C++的符号</li><li>dlltool-用于构建与使用DLL文件，也就是创建windows动态库</li><li>gold-正在测试的功能，一个新型且效率更高的ELF的链接器</li><li>ELF是一种用于可执行文件，目标文件，共享库和核心转储的标准文件格式，可执行与可连接格式，ELF所产生的数据结构与工具不做阐述</li><li>gprof-用于显示性能的分析信息/性能分析工具</li><li>nlmconv-将目标代码转换为NetWare Loadable Module/NLM文件格式</li><li>nm-列出并显示目标文件中的符号</li><li>objcopy-复制并编译目标文件，其过程中可以修改</li><li>objdump-显示目标文件中的相关信息，可用于反汇编</li><li>ranlib-生成静态库索引</li><li>readelf-用于显示任何ELF格式文件的内容</li><li>size-列出对象总体或归档文件的节数/大小</li><li>strings-列出目标二进制文件中的可打印/可显示字符串</li><li>strip-从目标文件中移除符号</li><li>windmc-兼容windows消息的编译器，用于产生windows的消息资源</li><li>windres-windows资源文件的编译器</li></ul><hr><p><strong>杂项及存在意义</strong></p><ul><li>大部分的复杂代码都存于Binary File Descriptor library和libopcodes库内</li><li>所以它是一整套编程语言工具程序,用于处理许多格式的目标文件</li><li>这些程序大多数使用BFD-二进制文件描述库</li><li>主要的目的还是为GNU项目用于解决不同格式的目标文件的可移植性问题的主要机制</li></ul><hr><p><strong>参考:</strong></p><p>获取：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;binutils</span><br><span class="line">http:&#x2F;&#x2F;ftpmirror.gnu.org&#x2F;binutils</span><br><span class="line">apt-get install binutils*</span><br><span class="line">克隆：git clone git:&#x2F;&#x2F;sourceware.org&#x2F;git&#x2F;binutils-gdb.git</span><br></pre></td></tr></table></figure><p>官网<a href="https://www.gnu.org/software/binutils/binutils.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/binutils/binutils.html</code></p><p>文档<a href="https://sourceware.org/binutils/docs-2.33.1/" target="_blank" rel="noopener">跳转</a><br><code>https://sourceware.org/binutils/docs-2.33.1/</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">archive是一个包含多个被包含文件的单一库文件,它可以保证从中检索到原始的被包含文件-mumber,而member用于保存archive的各种基本属性，当member被提取后，archive的属性将被还原到初始状态</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Make</title>
    <url>/2020/02/01/Make/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Make-第一部分"><a href="#GNU-Make-第一部分" class="headerlink" title="GNU Make 第一部分"></a>GNU Make 第一部分</h3><p><strong>GNU 自动化建构</strong></p><p><strong>概述:</strong></p><ul><li>在软件开发的过程中，make通常作为一个工具程序(unility software),经由makefile，从而实现自动化构建软件</li><li>在经由makefile时make工具会根据情况转换文件形式至target，转换的同时还会检查文件的依赖关系，检查依赖关系的方式本部分不做阐述</li><li>所以在编写软件时，应该先编写一个makefile，之后再让make去进行构建和安装</li></ul><p>或称为</p><ul><li><p>用于编译源代码，从而生成结果代码，然后将结果代码链接起来，最后生成可执行文件</p></li><li><p>其中名为makefile的文件用来确定某一target文件的以来关系，然后把生成target相关的命令转给机器的shell去执行</p></li><li><p>IDE通常包含了make，make多用于UNIX下的软件开发</p></li><li><p>本质如同UNIX底层的其他基本程序，批量执行生成目标的命令，同时检查文件的依赖关系</p></li></ul><hr><p>参考<br>官方网站<a href="https://www.gnu.org/software/make/make.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/make/make.html</code></p><p>获取<br><code>http: http://ftp.gnu.org/gnu/make/</code><br><code>ftp: ftp://ftp.gnu.org/gnu/make/</code></p><p>make手册<a href="https://www.gnu.org/software/make/manual/" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/make/manual/</code></p><p>makefile手册<a href="https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions</code></p><p>make源码所在目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;make&#x2F;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;doc&#x2F;make&#x2F;</span><br></pre></td></tr></table></figure><p>make帮助指令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make --help</span><br><span class="line">info make</span><br><span class="line">man make</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Compiler Collection</title>
    <url>/2020/02/01/GCC/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Compiler-Collection-第一部分"><a href="#GNU-Compiler-Collection-第一部分" class="headerlink" title="GNU Compiler Collection 第一部分"></a>GNU Compiler Collection 第一部分</h3><p><strong>GNU 编译器套装 GCC</strong></p><p><strong>概述:</strong></p><ul><li>它是GNU计划中关键的一环</li><li>基于GPL与LGPL软件许可,并且为free software-自由软件</li><li>UNIX-like，Linux，BSD类的操作系统都采用GCC为标准编译器</li><li>其他的C编译器LLVM,Clang</li><li>GCC通常是跨平台编译器的首选</li></ul><hr><p><strong>GCC的执行逻辑与过程</strong><br>GCC的作用是将源代码生成可执行文件大体需要四个步骤:</p><ul><li>预处理/预编译-preprocessing</li><li>编译-compilation</li><li>汇编-assembly</li><li>连接-linking</li></ul><p><strong>由下至上的处理过程</strong></p><ul><li>GCC先调用cpp进行预处理-预处理的作用是对源码文件中的文件包含-include,预编译语句-宏定义define等进行分析,预处理的主要功能大概分为三个:宏定义,文件包含,条件编译</li><li>然后调用cc1进行编译,这个阶段根据输入文件生成以.i为后缀的目标文件</li><li>然后调用as进行汇编工作,一般的汇编语言源码由.s为后缀,s为后缀的汇编语言文件经由编译器和汇编之后会生成.o后缀的目标文件</li><li>当所有目标文件都生成后,GCC就调用ld来完成最后阶段的工作-连接</li><li>在连接阶段,所有目标文件被自动生成并同时分配依赖条件/文件应该所处的位置</li><li>最后,该程序内所用的库函数也会被链接到所对应的位置</li></ul><hr><p><strong>GCC语言编译器的结构</strong><br>语言编译器的结构-由下至上/底层到顶层</p><ul><li>GCC内置了大量语言的编译器,每个语言的编译器都是独立的程序</li><li>编译器的作用是处理输入的源码,从而输出组合语言码</li><li>全部的语言编译器都有共同的中介架构</li><li>语言编译器的结构分为三个部分:前端接口,中介接口以及后端接口</li><li>前端接口负责解析符合此语言的原始码,并产生一个抽象语法树以及翻译此语法树,使其成为GCC的暂存器转换语言-RTL的后端，GCC编译器最佳化与静态程序解码技术应用于此时程序的代码上</li><li>最后适应于硬件架构的组合语言经由某一不可知算法产出</li></ul><hr><p><strong>参考:</strong></p><p>官方网站<a href="https://gcc.gnu.org" target="_blank" rel="noopener">跳转</a><br><code>https://gcc.gnu.org/</code></p><p>获取<br><code>apt-get install gcc*</code></p><p>涉及编译器深层原理的内容此章节不做阐述</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Debugger</title>
    <url>/2020/02/01/Debugger/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Debugger-第一部分"><a href="#GNU-Debugger-第一部分" class="headerlink" title="GNU Debugger 第一部分"></a>GNU Debugger 第一部分</h3><p><strong>GNU 调试工具 GDB</strong></p><p><strong>概述:</strong></p><p>存在的意义/作用:</p><ul><li>GDB大多数UNIX及UNIX-like下的调试工具</li><li>GDB可以根据自定义的要求启动所选程序</li><li>让被调试的程序在指定的调试断点停住，其断点可以是条件表达式，当程序被停住时可以去检查该程序中正在处理的事务</li><li>GDB还可以用于修改程序，以此来修复BUG所带来的影响</li><li>GDB相比于其他具有GUI的调式工具的优点就是具有修复网络断点以及恢复链接等功能</li><li>还可以把GDB理解为一个强大的命令行调试工具，命令行的优点就是可以形成一个完整的执行序列，以此来形成脚本程序<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li></ul><p><strong>使用方法简述:</strong></p><p><strong>启动</strong></p><ul><li>可以直接执行GDB以启动GDB命令行，<code>quit</code>退出GDB命令行</li><li>执行<code>gdb file name</code>来选中被调试的目标文件，并进入GDB命令行</li><li><code>run</code>用于执行程序，后面可以接GDB已有的缺省参数</li></ul><p><strong>断点</strong></p><ul><li>执行break命令，可以简写为b，用来给调试的程序中设置断点</li><li>从断电处继续运行执行continue命令</li><li>GDB还内置了断点的管理工具</li><li><code>info break</code> 用于显示当前GDB所有的断点信息</li><li><code>break breakpoint 编号</code> 用于删除指定编号的断点，如果不带编号将删除所有的断点</li><li><code>disable breakpoint 编号</code> 用于禁止使用指定编号的断点，同时info break的enb域变为n</li><li><code>enable breakpoint 编号</code> 允许指定断点，同时info break的enb域变为y</li></ul><p><strong>其他功能简述</strong></p><ul><li>单步执行：next不进入单步执行，step进入单步执行</li><li>函数调用：call function name调用和执行一个函数，执行finish结束当前的函数，如果有返回值就会显示其返回值</li><li>机器语言工具，信号处理与变量复制的检查</li></ul><hr><p><strong>参考资料:</strong></p><p>官方网站<a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener">跳转</a><br><a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener">https://www.gnu.org/software/gdb/</a></p><p>GDB手册<a href="https://sourceware.org/gdb/current/onlinedocs/gdb/" target="_blank" rel="noopener">跳转</a><br><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/" target="_blank" rel="noopener">https://sourceware.org/gdb/current/onlinedocs/gdb/</a></p><p>深入GDB<a href="https://web.archive.org/web/20080616054054/http://sources.redhat.com/gdb/current/onlinedocs/gdbint.html" target="_blank" rel="noopener">跳转</a><br><a href="https://web.archive.org/web/20080616054054/http://sources.redhat.com/gdb/current/onlinedocs/gdbint.html" target="_blank" rel="noopener">https://web.archive.org/web/20080616054054/http://sources.redhat.com/gdb/current/onlinedocs/gdbint.html</a></p><p>开源程序的体系结构-GDB<a href="http://www.aosabook.org/en/gdb.html" target="_blank" rel="noopener">跳转</a><br><a href="http://www.aosabook.org/en/gdb.html" target="_blank" rel="noopener">http://www.aosabook.org/en/gdb.html</a><br><a href="http://www.aosabook.or" target="_blank" rel="noopener">http://www.aosabook.or</a></p><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">因为UNIX下的软件基本上都是命令行的，所以它们具有天生的优势-可以很方便的把简单的已有工具的命令集成在一起，从而做出一个功能强大的程序 ---</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Lib</title>
    <url>/2020/01/30/Lib/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Lib-第一部分"><a href="#GNU-Lib-第一部分" class="headerlink" title="GNU Lib 第一部分"></a>GNU Lib 第一部分</h3><p><strong>GNU 可移植性库</strong></p><p><strong>概述:</strong></p><ul><li>GNU Lib 存在的意义是实现所有gnu代码关于移植性问题处理方法的统一化</li><li>使任何基于GNU标准的软件，可以顺利的移植到任何其他的操作系统上，关于操作系统移植问题的方法统一化</li><li>所以可以把GNU Lib理解为所有基于GNU标准的软件的子程序，这些子程序将GNU软件互相链接，从而实现GNU软件包之间的完全共享</li><li>其中gcc因为libiberty库的原因，很难脱离GNU的构建树，但GNU Lib与其完全不同，构成它的子程序会实现资源等级的划分，使所有基于GNU协议的软件实现代码共享，从而解决移植性问题，而绝非去构建，安装或者链接库</li><li>因此GNU Lib没有发行版的概念，只需要将GNU Lib的源码复制到使用者的代码树中即可</li></ul><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>官网<a href="https://www.gnu.org/software/gnulib" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gnulib</code></p><p>手册<a href="https://www.gnu.org/software/gnulib/manual" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gnulib/manual</code></p><p>获取<br><code>git clone git: //git.savannah.gnu.org/gnulib.git</code></p><p>GNU Lib模块列表<a href="https://www.gnu.org/software/gnulib/MODULES.html" target="_blank" rel="noopener">跳转</a><br><code>https://www.gnu.org/software/gnulib/MODULES.html</code></p><p>社区<a href="http://git.savannah.gnu.org/gitweb/?=gnulib.get" target="_blank" rel="noopener">跳转</a><br><code>http://savannah.gnu.org</code><br><code>http://git.savannah.gnu.org/gitweb/?p=gnulib.get</code></p><p>帮助指令:<code>./gnulib-tool --help</code></p><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔 2020-1.30 pm1.23</title>
    <url>/2020/01/30/%E5%AF%B9%E4%BA%8E%E8%87%AA%E8%BA%AB%E7%9A%84%E4%B8%BB%E8%A7%82%E6%80%A7%E8%AF%84%E4%BB%B7/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="a086129b25812c70b20d40f5241b92c4fe4d17ab7deb1dc86e759ee6eccbc700">0267ec72f19b8c198697a4f72870a3a800f27aefe3d5b0c2e7584ef9e154647d097740858c9c1e74bf5c4d66a7e9a94976a0a3e624bfe9b35b94d85566f70e83e4ed3651180e552405fd9d534eaaf0c55942afa1a1ccc11b81db9500298070462bdf23b5455a8cfedb830f016534bfbae14444327427fa8a53c25bab1614390044731de85b00843ad76794b15e7050dbb57be36af26af0711d40d668c744d3cfca643cddf8607b62cef41eff2f26d0de0c8be8ba33aed1f0a38fac6b68bf272427d55d2ebe57310e7f61e2a1e953ef723a7e8f7b684708fd98e525332312360a8ffe25047175a58c933129c45228c7e8a3ffee563927c69646c2c03f5e5384b359470a77dc4914ac7412b58e1d6c1065a88459e76fb5cc3d7d8ef18bec3be8093b20963329ec9e3187f04ab489c1ab7942f94b826d7a4caa9b785434182b62937a2b910eff95e3ad33f21c03f033ed52a76551cdea59745f51a4fdd5508dc082d6a739dc4eff729dd6e82206c07491d0040e180264c1370199dfbd0256cd650a4a4e1d5e4dbfc2de938fdcab9494d169f1ed22764d0bc71915259717999cd3d5ef5eafdc9b4ed625bde0aa53569118c2554914efc678ce34559c6fe3935adcd796aa31d80ded063e0e130a88fb0dfc4823871c431267c1a766516f125f09e9c3ac93be06d24c6d207c21806ff90ecbe7b319a00415ff020a96145b08fec5b01b57ec6a41eed09925516f4fbba837adc4b363a560f15185ebedb1abaed2e53b52bd17f05fab030e089d3e755ae84c4d329af02cecaac27b8b5e55343d755b606efcd0115d0df359e794a7d4173cab8c7a498b4abcdd9742c20bc91f5ffbfd5b8abf2eb591c9a444904935543d566e2db839eae6da3efc422fcba8cf3a4ace62d26af09123cd1f128e436e6dc7532be3a4a1196baab77021f60922024b70f9d27ed0f2308d53f15a45e381041bd37c3b4832a87806b42062abef6de7c37830872f103ea03f0bd415412d884151b10fbd760ede958d5beacccf9a9e99ce74ddcfbfa764cc0fde319239a7c5fb388c51eb043fef1c739813f5f3072a277f7c2ef670d2319ab232982895b9110c42a9706d029ccf1a85969ee1fef79aca1ecc832a447f1c8fceba08465fe9f7a8bd6431b8585a2ae84574b663a6443353db9506f8495ced81fec28d907732e33ed5e3acb94a4a6598c6541770cce6be11c84c3f75d0b7390956c7fd655701a5b130f1d65f73010af7d3b62ad6634a008fc6a4a82bba3226304679ededf77a67f57d4ce1a6a00cfa3fa8d12e6233663a5604ae23fef2b54f8891c81e905b3702322d6beaa6db2cc8348e8a8964c20bb3d5499e0e53191f6a910717fa10bb5ebdcebd0b4c86b11b74b3a73774b46f895127be6bef584740f59b4553d1f0eba11fc49779f2e479c16c04f6a2f41fe3eabd1ed2c4f68e62c6399014c5a43eb3c6f9768dbe3afa44ba0826492f39109ba4028e5b8a52ab993b18b2bf8b6106225bda48d0f7e9f15faef0bfe44e3997632179621dc8febcd08fe38b0778d4bc90799194bfaf2fd33934b1b6b21793a5ce79dabcb44b82c0b670f81375a9849285220c4c38bc3bea551153d1a5613fe19bc97de7ae3aacf026a3da46cb9b7c35c2a652569810aa0e845a5f0ee6b8f0d583d0048efc627f6589a6779c0fcb7ad138f23f7a83cf86075dfde11e9357464528b64f9bef3d242c2a806181dac1dc87387fd2b45a022d239f54bbc3d83547cdbf85121c2f7d9de965fa10d74a257e3297e75705b85f9b819130839eb941363a665708a9505caf997324f2b9d28b3288d2617d6b69c45ebfb0847472994efbe3d1cffcd7b1eab80702dd5634d25f05ed16427622c4a757fc6bccfec5942e4b37547b4a61d0b8e5f261242310ed529776d930d50cbc5d958a30ab006de9b683db1ba0ccbe2e290e5ed0ad91f9cb8c69034a43c6f56b251b9756093d4259526a2e329b532adff80999c99bb64d273109de0f438926c351a429bd5d2368ab89450527297f4f318252f70d399151a2582d6217e432317f766babee67501176fe0aae506b1cfdb2a4e1c6c84064d09969085dfe5497d578dfe8187313cecd3b17930149ba25fec26f22d6398edb61ff37320a2b640c6817bc596cf313b454b68bffbec62cd5068b62cd534424165ff29e4845c21595554df867eb604cbc3d665cf1777a8defad182a2c8a13c69a1a181c3702db970668b83c7f1216aedb3782d125ddc44a9bfc1c6bd513eaaf6fc6fcd82a7fec53dbf5b30c6d2792cd490a46a1b397770b03bd8004669416dbe8a6a21a1e98fec0a2fa39bab6a62ae6b3c9b092502abf46cf00c050bede4b6834716f1c7efefea021c06e175875c3434328542ea2f23d200eeef54232ad9fe01af5b72dd7abbae21674a70202b9aa18fb756122254ce97259532127ffea2be64ac1429a08ac8647c26e9da168eb7858efa727c7579696e7abc33469d380b11bf4a0a79aa0f6624e96a9f296f6e1809d02efa210b2f76640e0c0926e8b0d27494bb1d7d7093ee535c9f3eb269f68bbeaec6443d9a49598eaceb584cefcfd2a57b6a874817e127be044fe0a210a5636d56ba42fda045d4d3131daca19e6a7d4792f2794647241966dfcd750343457bb6d314ff560171bfaa3605b17b30d3359be75637a3016fd2ff71b25a1b3e12a36bac6630b14e900f3ac254f72633bdf04f70823120e09937a90446d94e9373e7b1a6b0b7dd3a28e202d7eca3dbf4fbd4c7c5bca992ed8a4acdeff2835699691c7e80313a4cb3fb7ed19b706d204289e2a88bb32e1ee234aeacbaef0c21f6e22e6dd35c410a1615c22588f6724a5ca402e51c41d2fb2805a3fb2f45040a61218a967f17f20cf899f0171761d3f7f5ce8c072f771bc652d1261637d82fc5d6934abbede95d992380d9c5ec0a4cd5b0be4d246bcdf624724c28445fbf6e02bc17da391566ddb59c694486a10b0f2d1ba6a642b89640a6839dc2a4a33552fa35d4a844d78b20f955630fa77bd8a11bdc4d24e24bcb0b0e94e900184f267c303d39c68de63b6ee9e6414f152cef26e6154e149be0b8fc1d0e6f979fc2caca434e2e1bb0514397163ec1a9cca0228282d1775f309248b4b483f0e6bab07818f9b098d78be2e5402077aedd41fc49625bb54f7188bcb1d8f4488b515e9973fd91ae52dd00dfbdf885e768cc9e11a5d6c39d6243417c2cfb986c40477d4252a18f1c938a335b058a5e11f414a3a1b70909c07b1ef6725feb1f069359615f3ce76b0d54910b74b8eb91ec68bf3314b4a728b86d55122b5133efd683feeb384ade0bb9cd51611e1f34c469aa9fbffcd004b5f2b9d3a0e8fd7a45451da9c17c71cba1eefb9c02d31fa6ba24f4973e30f49ca1c84482c722dd6ea6050f8fbe9ebfa194f695564ce256dec1791d342cb0d89d3134c6da4b4f13bea2e95215cdf16824106a1ddd04480f3f38dc3df9ce882f4330704f3ceb435b7592c3171fecdda581d1b266771dbaf361f57da7b4990be1f7d731cc80a329c4f898836eef5974d82179df8d40b5294b45eb6e1d5c20b2ab9e3fa2875bb97db55a7edfbbc0d9380e084fa21c19024dba89ca10d4d92dca1b3cd4b406d4abaa2ced17b2d4e98fe4cd4bcfc2797b12004129af9461aa29c79e3c6353094f649f214324b3eff7b721c726e29ae85040de2baee8a52efe36d4d22097a43da7b948dca749aaf81aa5dbbf15148b0b9755cb2c9c9909c65ed314f833dffa2ab84e0cc4355f06e2a3a76dfd1cdcb94864df2d916137010ac87080e783730b318cf21fec02278ba060e4490fd324ed5b32cf1f06f37c90bfa7a4d938aff40fa1991b318f1cf7ba868478d345ca8da0dd968bc17b0703667e82b832666c830693edb8453b3466d64afdc9cce5ee1f20e414c81fe966be7134e82eeb5b9a240c490cc16f227b325eca407b85daea48933326eea1d6660334295c5a9bfa77a94bc21dad89edbcb127dfe98e6645340e94ac25fbce922cfdc2a8e3308c222a992e99f1878f60f4c24f50794125cc7af9af550ca8b264e86d96ada5ca9c0a1fea893fc5cb2a9c7865bb62d52ccbed6a2b99999f29767d6af7eef249a7c57636655ea0db1f19124ed82cca7f47cc50d9db2f23941720ebfed7c04eab1574105ae5defd58c1d8130550e7568f10e867a00d286b561534ca2c400b2c72e36ed719e84327dabed4488ecf86fdd4bdb8b98c6abbedf3b722427db63eba929d01afb35fcc948122567e3e4bd4ba0ea66616e6ac89bebca982807c1693e91c97d38ecb6fd4395ed57602742c7ac25373570e883a8f4eaf3723975d663df231bcf1a33432e6bca88a1b1f7e7a9b1f6c128fc1173761cea62b5b589037f2324dbca5b523a437b0492a412bce2fbc83977faffb533fc490caa5a2e3a0e4cbb4f4f93677cfbdb13b6084227ebc4ab1f01432f17c902906060a634ea0297f66c1a36d62ef4a61e0d8f1acf9125c427ccde6fabfbeb094e95cf742b37c9b2692856de2208e236e4225024ac06281267370950f50eb7c06fe17c0c03e115e9331a982a28e7062905ad96a4f3311b57ed35d0cd6bcd97e2c1e7c75dd6ce773d1162c2172aac2cea7d0f5fafbdfcce541df8ba1284df1596b670cc6eb46de68a2b8c8e696993db97613a0575711aa1ad1b4a09ea1bc540a09c27e0c1005fd72946a48e8f4827912b3413bc57c8e5c422dc614d912a18e2d2eb52821735221ab808b766fe683ed2a76b8ddcee0c97d56e58ae48ade1e114effb7bec07ba07973d7783c5e789c0050778cf71e825e66e3f338d392b6b0a67360a657263e9aba0368d5c69cb8a51d6b48b3147be782976267e3775541a8756aa94013a67eaae428d8992e5a3fc17af3c4c06fc0ccb0c157a971857afa8f9d306b94bb46c2d6bb6706394f95e239124bd26cddd73c1a925854f9efb9884fd0de3d74a1f6fd1460eb244d261e8321ec402e933a22fdd878ff5942f47c7532fc7e5c572f71082eaab2952e2f6ad74273dae152c5ad41d96682b15430981042aa9e35724865c23db0570e1c0c04ac890d8ab32474498963c3c49e0cc6cfee56db4e5e5e22357e4ef72885bb0d9dd7f8b5f53bf0d1c15098f4e2013138f7b4b9e8265687d79cf69d5087c3804e6e4015599d518de9462ba530830af9af1e377c1d09ddb1f65f252f3352fae80adaf825d5982106009d3afdddeb9e0372117be60455d2c3cf5f25efe44b5fee0e75724d1074043355ebbe771fee9dd9a6731b3ba5dc58d3c958d39a7afdfd3b1dbc593fcc9b2d153b0a9129b9de89e786b7a138269a0d9fccaa3ffe35d410ce76282c78b3ae062901dfc61154aef3b36a95f418d17841e9c1dd80f1ca8098e6b8ec35967d34d16c51d3857a23faa6736d751b14641013f929245</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔，杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU  Autotools</title>
    <url>/2020/01/29/Autotools/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-Autotools-第一部分"><a href="#GNU-Autotools-第一部分" class="headerlink" title="GNU Autotools 第一部分"></a>GNU Autotools 第一部分</h3><p><strong>GNU 构建系统</strong></p><p><strong>概述:</strong><br>autotools存在的目的就是用于生成makefile，从而实现降低makefile的维护难度与开发难度<br>autotools是一个工具集，它包含了一下程序<br>aclocal<br>autoscan<br>autoconf<br>autoheader<br>automake</p><hr><p><strong>aclocal</strong><br>aclocal(automake)<br>根据已安装的宏，用户定义宏和acinclude.m4文件中的宏将configure.ac文件所需要的宏集中定义到文件aclocal.m4文件中<br>aclocal由perl脚本所编写，定义为 <code>aclocal - create aclocal.m4 by scanning configure.ac</code></p><hr><p><strong>autoscan</strong><br>autoscan(autoconf)<br>用于扫描源代码以搜寻普通的可移植性问题，如检查编译器，库，头文件等<br>从而生成文件configure.scan，它是configure.ac的原型之一</p><hr><p><strong>autoheader</strong><br>autoheader(autoconf)<br>根据configure.ac中的某些宏，运行m4,<br>如ccp宏定义则声称config.h.in</p><hr><p><strong>Automake</strong><br>automake将makefile.am中定义的结构建立起makefile.in，然后configure脚本将生成的makefile.in文件转换为makefie<br>如果在configure.ac中有特殊定义的宏，比如AC-PROG-LIBTOOL,automake会调用libtoolize，否则产生config.guess和config.sub</p><p>官方网站:<a href="https://www.gnu.org/software/automake/" target="_blank" rel="noopener">https://www.gnu.org/software/automake/</a><br><a href="https://www.gnu.org/software/automake/" target="_blank" rel="noopener">跳转</a></p><p>官方文档:<code>https://www.gnu.org/software/automake/manual/automake.html</code><br><a href="https://www.gnu.org/software/automake/manual/automake.html" target="_blank" rel="noopener">跳转</a></p><p>获取方式:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp: ftp:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;automake&#x2F; </span><br><span class="line">http: http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;automake&#x2F;</span><br></pre></td></tr></table></figure><p>帮助指令: <code>automake --help</code>与<code>man automake</code></p><hr><p><strong>Autoconf</strong><br>作用是将configure.ac中的宏展开，生成configure脚本/shell脚本，此过程中可能需要用到aclocal.m4中定义的宏<br>以达成自动配置软件源代码包</p><p>官方网站: <code>https://www.gnu.org/software/autoconf/autoconf.html</code><br><a href="https://www.gnu.org/software/autoconf/autoconf.html" target="_blank" rel="noopener">跳转</a></p><p>官方文档：<code>https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/autconf.html</code><br><a href="https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/autoconf.html" target="_blank" rel="noopener">跳转</a></p><p>获取方式:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp: ftp:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;autoconf&#x2F;</span><br><span class="line">http: http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;autoconf&#x2F;</span><br><span class="line">git: git clone http:&#x2F;&#x2F;git.sv.gnu.org&#x2F;r&#x2F;autoconf.git</span><br><span class="line">apt-get: apt-get install autoconf*</span><br></pre></td></tr></table></figure><p>帮助指令: <code>autoconf --help</code>与<code>man autoconf</code></p><hr><p><strong>Autotools</strong></p><p>获取方式:<br><code>apt-get install autotools</code></p><p>以上五个程序皆可称为M4宏的扩展包,文件处理的步骤与顺序，逻辑关系，应用等深度刨析第一部分里不做赘述<br>以上内容仅为主观理解，仅供参考</p><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>GNU</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU M4</title>
    <url>/2020/01/29/M4/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="GNU-M4-第一部分"><a href="#GNU-M4-第一部分" class="headerlink" title="GNU M4 第一部分"></a>GNU M4 第一部分</h3><p><strong>GNU 宏处理器</strong></p><p><strong>概述:</strong><br>GNU M4是一种宏处理器<br>因为基于POSIX标准，所以兼容大部分SVR4<br>SVR4: UNIX操作系统的一种内核标准<br>其主要作用于GNU Autoconf project，通常是在安装autoconf时需要m4依赖才会安装它</p><p>获取途径:<br>git: <code>git clone http://git.savannah.gnu.org/r/m4.git</code><br>http: <code>http://ftp.gnu.org/gnu/m4</code><br>ftp: <code>ftp://ftp.gnu.org/gnu/m4</code><br>apt-get: <code>apt-get install m4-doc或m4*</code></p><hr><p><strong>学习途径</strong></p><p>官方文档:<br><code>https://www.gnu.org/software/m4/m4.html</code><br><a href="https://www.gnu.org/software/m4/m4.html" target="_blank" rel="noopener">跳转</a></p><p>M4 宏语言手册<br><code>http://mbreen.com/m4.html</code><br><a href="http://mbreen.com/m4.html" target="_blank" rel="noopener">跳转</a></p><p>GNU M4 社区<br><code>http://savannah.gnu.org/projects/m4/</code><br><a href="http://savanah.gnu.org/project/m4" target="_blank" rel="noopener">跳转</a></p><p>默认帮助文档<br><code>m4 --help与man m4</code></p><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
        <category>Debian GNU/Linux</category>
      </categories>
      <tags>
        <tag>1.认识与概述</tag>
        <tag>GNU/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于debian使用hexo框架-next主题搭建并配置博客</title>
    <url>/2020/01/28/%E5%9F%BA%E4%BA%8Edebian%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6-next%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<!-- build time:Sun Feb 02 2020 18:07:54 GMT+0800 (中国标准时间) --><h3 id="对于debian的基本配置与hexo的安装"><a href="#对于debian的基本配置与hexo的安装" class="headerlink" title="对于debian的基本配置与hexo的安装"></a>对于debian的基本配置与hexo的安装</h3><p>apt源的设置与一些基本软件的配置和准备这里就不过多阐述了<br>先修改一下/etc/hosts内的所配置IP,保证机器能ping通github.com<br><code>vim /etc/hosts</code> 内添加 <code>192.30.253.113 github.com</code></p><p>接下来安装hexo所依赖的几个程序：npm，git，node.js<br><code>apt-get install npm*</code><br><code>apt-get install git*</code><br><code>apt-get install node.js*</code><br>安装完之后检查一下版本或者whereis一下看看所否健在<br>最后再安装hexo软件<br><code>npm install -g hexo-cli</code><br>安装完–version检查一下版本</p><hr><h3 id="hexo的基本操作"><a href="#hexo的基本操作" class="headerlink" title="hexo的基本操作"></a>hexo的基本操作</h3><p>hexo –help<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方中文文档与手册</a><br>hexo安装完毕后可以先进行一下测试<br>于任意目录下新建一个文件夹 <code>mkdir blog</code><br>进入文件夹后分别执行<code>hexo init,hexo g,hexo s</code><br>然后使用浏览器访问<u>localhost:4000</u>查看所否成功</p><hr><h3 id="hexo链接github库"><a href="#hexo链接github库" class="headerlink" title="hexo链接github库"></a>hexo链接github库</h3><p>利用npm安装hexo部署程序/插件<br><code>npm install --save hexo-deployer-git</code><br><code>vim /*/blog/_config.yml</code><br>修改最下方的#deployment配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;你所建立的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>执行<code>hexo d</code>开始远程部署，其中需要用户输入仓库所在帐号的帐号和密码</p><hr><h3 id="hexo修改主题"><a href="#hexo修改主题" class="headerlink" title="hexo修改主题"></a>hexo修改主题</h3><p>这里推荐两个个人感觉生态最好的两个hexo主题-next与yilia<br>进入blog目录下直接执行克隆命令<br><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>或<br><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code><br>此时的主题文件被存储于/blog/theme目录下<br><code>cd _condig.yml</code><br>修改#extensions中的theme，将原主题landscape修改为next或yilia</p><hr><h3 id="hexo安装搜索插件与RSS插件"><a href="#hexo安装搜索插件与RSS插件" class="headerlink" title="hexo安装搜索插件与RSS插件"></a>hexo安装搜索插件与RSS插件</h3><p>添加并配置RSS<br><code>npm install hexo-generator-feed --save</code><br>修改hexo配置文件为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">        plugins:</span><br><span class="line">                hexo-generator-feed</span><br><span class="line">                #Feed Atom</span><br><span class="line">        feed:</span><br><span class="line">                type: atom</span><br><span class="line">                path: atom.xml</span><br><span class="line">                limit: 20</span><br></pre></td></tr></table></figure><p>对主题文件添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">        type: rss2</span><br><span class="line">        path: rss2.xml</span><br><span class="line">        limit: 5</span><br><span class="line">        hub:</span><br><span class="line">                content: &#39;true&#39;</span><br></pre></td></tr></table></figure><p>添加并配置search-搜索<br><code>npm install hexo-generator-searchdb --save</code><br>修改hexo配置文件为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">  search:</span><br><span class="line">          path: search.xml</span><br><span class="line">          field: post</span><br><span class="line">          format: html</span><br><span class="line">          limit: 10000</span><br></pre></td></tr></table></figure><p>修改主题配置文件为<br>找到local search，然后把enable设置为true</p><p>其余类似于菜单，头像，链接与装饰的配置可以<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">参考官方文档</a></p><hr><h3 id="关于文章的书写格式与基本要求"><a href="#关于文章的书写格式与基本要求" class="headerlink" title="关于文章的书写格式与基本要求"></a>关于文章的书写格式与基本要求</h3><p>hexo文章书写的语法都来自于Markdown<br>Markdown所一种可以使用普通文本编辑器编写的标记语言<br>目的是通过简单的语法来让普通文本的内容具有一定的格式<br>详情参考: <a href="https://markdown-zh.readthedocs.io/en/latest" target="_blank" rel="noopener">Markdown中文文档</a></p><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
