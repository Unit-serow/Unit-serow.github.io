<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UNIT</title>
  
  <subtitle>不精之精，而至纯粹</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://unit-serow.github.io/"/>
  <updated>2020-03-23T18:36:54.472Z</updated>
  <id>https://unit-serow.github.io/</id>
  
  <author>
    <name>serow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>麢</title>
    <link href="https://unit-serow.github.io/2020/03/24/%E9%AC%A3%E7%BE%9A/"/>
    <id>https://unit-serow.github.io/2020/03/24/%E9%AC%A3%E7%BE%9A/</id>
    <published>2020-03-23T18:34:03.000Z</published>
    <updated>2020-03-23T18:36:54.472Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d57d4b034ecd7cd2f87069f47c063f32a2c7bbcfca4c0a7fdb94503fc8c6f211"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
    
      <category term="无" scheme="https://unit-serow.github.io/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-22-3</title>
    <link href="https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22-3/"/>
    <id>https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22-3/</id>
    <published>2020-03-22T12:02:39.000Z</published>
    <updated>2020-03-22T12:03:33.483Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="00ac6db7bfe3778cd0abf95a4d8f7a7be56d653d00110a58c968a77f15a10658">0267ec72f19b8c198697a4f72870a3a8e079571dd153910a3b8a7777eb6dc1eaeae43280319e51b16e957573ae9472ac6e32750b09ef1ec64ca90e00f22e8b1322a49e17140d4b82674bb4beecb4d1f5d0a288607100e1877cc84efeee4035f45ee144d1efe75c3c6d379b85fb5ee20ebaa988388e8a003fc0c1a18e5ff798ce0b1570c979a85e8f400f6e7119f6dbab91101f3216efeff6bef96dbf099fe26dfb83be1fea19a8f60d6c987f30bcceb99a12443f9f37b6e0f46e92a3927b410134140f251e7c13af68b3bca39a9ea2c19fa63140daf36bc4f355a560e4736f609945b872283a58f67ce7e77c249f3d2a05d9685c373e4fdda7e787900ee006741d9e2ba9a603e8e906d9b5bb8a39d9c0f7ac8daf6a001c8a2a135c52edcd377af71edbf3d13a29b124cf4021d395087fafff5405d0738f23364c2d810bec21e6b311565711eecfd2ff970e6b4b5787792235ab755b8a60a0589ac5d29df3e33e6da55cc1e26e1e188beec21532cfe668aa09dccb492cd8c84dc36d390ce5756811f9904bd54aaa725139bd5f1f8065f17261958d7606818d8c0b1e274f229b0388dbbd0f4095e80c3aa2a985dcd7c1e07ddd9fd36a8213589fdc8cdf81319cde5979f91d3a1c1eb16c3cc3cb4b6acb82983bef40884354e3badc0351d01683c347fa6bc330c866cf1a4c0acdcb93a809d63c81889a075c2e9c19b610bfe0c692fba461faae93e669f5f93980c0bbc7454d82238c2bcf4d93c48c0ce0fa59ba2ff33699afde03070b2a84f3ec5d0589fcb1fdcb9a5b786ca92fd8c958fe7bd49d58557fc92d26e5faaf4138e37b0d8de08b19ae6b1d6c8ccde13219e65f6f4ad10cd6e46a6bc4a36d98ab212dcf903cc8262f921ad540b99e042b9fe8d9140fd110f158e5ae972f732b5ce05c14e3b6224c11fde78c6e6f0c8411a40f292c45843836c38a731a1702764d8ec08689ae40a45080940a89702a4642231ee58dd27d05493e6f1fda1a4123b55351f26f869439424588586749946dad83dc247f4b8c442a2e3f2f4f0482ab00c6b0284db2029e2f60f605cff4a3677103fc99c7e302f3edf3e0f3612a90983ddc480b2357cbb96b8c83dc9132978d886a370481b63d173d08c842a70752574791959f23695219bd3c54b6afcfb723ca721e6871a649971fdf382acf4fa3684c45398c6860364d874165bb81d2e2c78a9a397b4fd6dd50e33ce3ceeb1562503946ac7cfe630d17dc1f4b3f3eb818a69b757ef0ae981d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
    
      <category term="无" scheme="https://unit-serow.github.io/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-22-2</title>
    <link href="https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22-2/"/>
    <id>https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22-2/</id>
    <published>2020-03-22T12:01:10.000Z</published>
    <updated>2020-03-22T12:05:07.352Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 20:05:11 GMT+0800 (中国标准时间) --><center><strong>至此</strong></center><a id="more"></a><center><strong>问题一</strong></center><center><strong>已解决</strong></center><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 20:05:11 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;至此&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
    
      <category term="无" scheme="https://unit-serow.github.io/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-22-1</title>
    <link href="https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22-1/"/>
    <id>https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22-1/</id>
    <published>2020-03-22T11:59:14.000Z</published>
    <updated>2020-03-23T15:40:09.612Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e6c91a5d764de028713ce68ee405ec6ef03a9fec2564a606e3460084557a78eb"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
    
      <category term="无" scheme="https://unit-serow.github.io/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-10</title>
    <link href="https://unit-serow.github.io/2020/03/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-10/"/>
    <id>https://unit-serow.github.io/2020/03/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-10/</id>
    <published>2020-03-21T18:58:59.000Z</published>
    <updated>2020-03-21T19:04:25.850Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 03:04:31 GMT+0800 (中国标准时间) --><center><strong>数据类型-数组类型&指针类型</strong></center><a id="more"></a><h2 id="数据类型-10"><a href="#数据类型-10" class="headerlink" title="数据类型-10"></a>数据类型-10</h2><hr><h2 id="数组-amp-指针"><a href="#数组-amp-指针" class="headerlink" title="数组&amp;指针"></a>数组&amp;指针</h2><p><strong>相关内容:</strong></p><ul><li>static关键字</li><li>一元运算符: <code>&amp;</code>，<code>*</code></li><li>数组基础概念刨析(泛用概念之一)</li><li>指针，指针和数组的关系</li><li>函数对于数组的处理</li><li>二维数组~多维数组</li></ul><p><strong>相关介绍:</strong></p><ul><li>当在当前程序中需要处理大量相关数据时，通常使用数组能高效便捷地处理这种数据</li><li>同时可以函数把模块化编程的优势应用到数组，并且数组与指针的关系非常密切</li></ul><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组-基本概念"><a href="#数组-基本概念" class="headerlink" title="数组-基本概念"></a>数组-基本概念</h3><p><strong>概述:</strong></p><ul><li><p>数组由数据类型相同的一系列元素组成</p><blockquote><p>需要使用数组时，通过声明数组告诉编译器数组中内含多少元素和这些元素的类型<br>编译器根据这些信息正确地创建数组<br>普通变量可以使用的类型，数组元素都可以用</p></blockquote></li><li><p>通常情况下，使用方括号([])来表明数组，方括号中的数字表明数组中的元素个数，方括号前则为对数组的命名，即为内存标识符</p><blockquote><p>要访问数组中的元素，通过使用数组下标数(也称为索引)表示数组中的各元素<br>数组元素的编号从0开始，所以xxx[0]表示xxx数组的第1个元素</p></blockquote></li></ul><hr><p><strong>关于初始化数组:</strong></p><ul><li><p>数组通常被用来储存程序需要的数据</p><blockquote><p>例如一个内含12个整数元素的 数组可以储存12个月的天数<br>在这种情况下，在程序一开始就初始化数组比较好</p></blockquote></li><li><p>只储存单个值的变量有时也称为标量变量(scalar variable)</p><blockquote><p>初始化这种变量即为给变量赋值，将右值通过赋值符号赋给左值</p></blockquote></li><li><p>ANSI C 初始化数组的基本语法:</p><blockquote><p><code>int unit[7] = {1,2,3,4,5,6,7,}</code></p></blockquote></li><li><p>用以逗号分隔的值列表(用花括号括起来)来初始化数组， 各值之间用逗号分隔</p><blockquote><p>在逗号和值之间可以使用空格<br>根据上面的初始化， 把1赋给数组的首元素(powers[0])，以此类推<br>不支持ANSI的编译器会把这种形式的初始化识别为语法错误<br>在数组声明前加上关键字static可解决此问题</p></blockquote></li><li><p>还可以给数组内的存储容量，也就是放括号内的数组用#define设置为符号常量</p><blockquote><p>比如: #define serow 10~int unit[serow] = {1,2,3,4…,10};<br>如果要需要将10换一个其它的字符，子需要修改#define这行代码即可，不用在程序中查找所有使用过数组大小的地方</p></blockquote></li><li><p>关于使用const声明数组</p><blockquote><p>有时需要把数组设置为只读<br>这样，程序只能从数组中检索值，不能把新值写入数组<br>要创建只读数组，应该用const声明和初始化数组<br>因此可以将其写为: const int unit[serow] = {1,2,3,4…,10};</p></blockquote></li><li><p>这样修改后，程序在运行过程中就不能修改该数组中的内容</p><blockquote><p>和普通变量一样，应该使用声明来初始化const数据<br>因为一旦声明为const，便不能再给它赋值<br>明确了这一点，就可以在其它的代码块中使用const了</p></blockquote></li></ul><p><strong>关于初始化数组失败:</strong></p><ul><li>使用数组前必须先初始化它<blockquote><p>与普通变量类似，在使用数组元素之前， 必须先给它们赋初值<br>因为编译器使用的值是内存相应位置上的现有值</p></blockquote></li></ul><p><strong>关于存储类别警告:</strong></p><ul><li><p>数组和其他变量类似，可以把数组创建成不同的存储类别(storageclass)</p><blockquote><p>关于存储类别的相关内容这里不做过多赘述<br>多数的数组都属于自动存储类别，意思是这些数组在函数内部声明，且声明时未使用关键字static<br>多数的变量和数组都是自动存储类别</p></blockquote></li><li><p>不同的存储类别有不同的属性，除此之外还有其它的存储类别</p><blockquote><p>对于一些其它存储类别的变量和数组，如果在声明时未初始化<br>编译器会自动把它们的值设置为0</p></blockquote></li></ul><p><strong>关于初始化列表中的项数应与数组的大小不一致问题:</strong></p><ul><li><p>假如有此种情况: #define SIZE 4~int some_data[SIZE] = {1,2};</p><blockquote><p>当初始化列表中的值少于数组元素个数时，编译器会把剩余的元素都初始化为0<br>也就是说，如果不初始化数组， 数组元素和未初始化的普通变量一样，其中储存的都是垃圾值<br>但是，如果部分初始化数组，剩余的元素就会被初始化为0<br>如果初始化列表的项数多于数组元素个数，编译器则会将其视为错误</p></blockquote></li><li><p>同时还可以省略方括号中的数字，让编译器自动匹配数组大小和初始化列表中的项数</p><blockquote><p>类似于: <code>int days[] = {1,2,3,4};</code><br>使用此类方法时要注意以下两点<br>如果初始化数组时省略方括号中的数字，编译器会根据初始化列表中的项数来确定数组的大小<br>整个数组的大小除以单个元素的 大小就是数组元素的个数</p></blockquote></li><li><p>这里写一个程序用作示例:</p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> days[] = &#123; <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;;</span><br><span class="line"><span class="built_in">int</span> index;</span><br><span class="line"><span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; sizeof days / sizeof days[<span class="number">0</span>]; index++)</span><br><span class="line">printf(<span class="string">"Month %2 has %d days.\n"</span>, index + <span class="number">1</span>, days[index]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>关于该程序需要注意以下两点:</p><blockquote><p>如果初始化数组时省略方括号中的数字，编译器会根据初始化列表中的项数来确定数组的大小<br>注意for循环中的测试条件<br>由于人工计算容易出错，所以让计算机来计算数组的大小<br>sizeof运算符给出它的运算对象的大小(以字节为单 位)<br>所以sizeof days是整个数组的大小(以字节为单位)，sizeof day[0]是数组中一个元素的大小(以字节为单位)<br>整个数组的大小除以单个元素的大小就是数组元素的个数</p></blockquote></li><li><p>下面是该程序的输出:</p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Month <span class="number">1</span> has <span class="number">31</span> days.</span><br><span class="line">Month <span class="number">2</span> has <span class="number">28</span> days.</span><br><span class="line">Month <span class="number">3</span> has <span class="number">31</span> days.</span><br><span class="line">Month <span class="number">4</span> has <span class="number">30</span> days.</span><br><span class="line">Month <span class="number">5</span> has <span class="number">31</span> days.</span><br><span class="line">Month <span class="number">6</span> has <span class="number">30</span> days.</span><br><span class="line">Month <span class="number">7</span> has <span class="number">31</span> days.</span><br><span class="line">Month <span class="number">8</span> has <span class="number">31</span> days.</span><br><span class="line">Month <span class="number">9</span> has <span class="number">30</span> days.</span><br><span class="line">Month <span class="number">10</span> has <span class="number">31</span> days.</span><br></pre></td></tr></table></figure><ul><li><p>这里1的本意是防止初始化值的个数超过数组的大小，让程序找出数组大小</p><blockquote><p>程序中初始化时用了10个值，结果就只打印了10个值<br>这就是自动计数的弊端，即为无法察觉初始化列表中的项数有误</p></blockquote></li><li><p>还有一种初始化数组的方法，但这种方法仅限于初始化字符数组</p><blockquote><p>这里先不做过多赘述</p></blockquote></li><li><p>所谓的初始化，用一种不是太严谨的方法来描述的话就是给其变量赋值，只不过是第一次对其赋值</p></li></ul><hr><p><strong>关于指定初始化器/C 99:</strong></p><ul><li><p>C99 增加了一个新特性: 指定初始化器(designated initializer)</p><blockquote><p>利用该特性可以初始化指定的数组元素<br>例如，只初始化数组中的最后一个元素<br>对于传统的C初始化语法，必须初始化最后一个元素之前的所有元素， 才能初始化它:<br><code>int arr[6] = {0,0,0,0,0,212}; // 传统的语法</code><br>而C99规定，可以在初始化列表中使用带方括号的下标指明待初始化的元素:<br><code>int arr[6] = {[5] = 212}; // 把arr[5]初始化为212</code><br>对于一般的初始化，在初始化一个元素后，未初始化的元素都会被设置为0</p></blockquote></li><li><p>以此程序进行示例说明:</p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MONTHS <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> days[MONTHS] = &#123; <span class="number">31</span>, <span class="number">28</span>, [<span class="number">4</span>] = <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, [<span class="number">1</span>] = <span class="number">29</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MONTHS; i++)</span><br><span class="line">printf(<span class="string">"%2d %d\n"</span>, i + <span class="number">1</span>, days[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>待补充</strong></p><hr><ul><li>数组类型前面关于数据类型的文章有所提及</li><li>关于 C 数组&amp;指针在后面的文章内会进行补充性质的刨析(尤其是针对于指针)</li></ul><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 03:04:31 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;数据类型-数组类型&amp;指针类型&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="C/C++" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/C-C/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="C" scheme="https://unit-serow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-22</title>
    <link href="https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22/"/>
    <id>https://unit-serow.github.io/2020/03/22/%E9%9A%8F%E7%AC%94-2020-03-22/</id>
    <published>2020-03-21T17:09:21.000Z</published>
    <updated>2020-03-24T14:50:06.447Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a3633d7697396354cfce73dbcbeba20cfe6340779d6aa69889371929f03e75f3"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
    
      <category term="无" scheme="https://unit-serow.github.io/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-20</title>
    <link href="https://unit-serow.github.io/2020/03/20/%E9%9A%8F%E7%AC%94-2020-03-20/"/>
    <id>https://unit-serow.github.io/2020/03/20/%E9%9A%8F%E7%AC%94-2020-03-20/</id>
    <published>2020-03-20T13:41:31.000Z</published>
    <updated>2020-03-21T13:49:14.873Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fe88de0515840702d31f1bf2ee677b3806ca405368635fa82c2772355591d8d9"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
    
      <category term="无" scheme="https://unit-serow.github.io/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-9.1</title>
    <link href="https://unit-serow.github.io/2020/03/19/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-9-1/"/>
    <id>https://unit-serow.github.io/2020/03/19/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-9-1/</id>
    <published>2020-03-19T13:15:38.000Z</published>
    <updated>2020-03-19T13:16:33.388Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 21:18:32 GMT+0800 (中国标准时间) --><center><strong>数据类型-函数-1</strong></center><a id="more"></a><h3 id="数据类型-9-1"><a href="#数据类型-9-1" class="headerlink" title="数据类型-9.1"></a>数据类型-9.1</h3><ul><li>函数-基本概念</li></ul><hr><h3 id="函数-基本概念"><a href="#函数-基本概念" class="headerlink" title="函数-基本概念"></a>函数-基本概念</h3><p><strong>涉及概念:</strong></p><ul><li>return关键字</li><li>一元运算符</li><li>方法的类型，定义，参数，及其返回值</li></ul><hr><p><strong>相关概念:</strong></p><ul><li>函数参数内对指针类型变量的调用</li><li>ANSI C 原型</li><li>递归</li></ul><hr><p><strong>结构化组织程序:</strong></p><ul><li>C 的设计思想<blockquote><p>在 C 内，函数用作构件块，而所谓的程序即为由代码块拼接而成<br>至今为止所涉及的C 标准库的函数有如: printf()，scanf()，getchar()，putchar()和strlen()<br>C 内还允许创建函数</p></blockquote></li></ul><hr><p><strong>关于函数:</strong></p><ul><li><p>函数(function)是完成特定任务的独立程序代码单元</p><blockquote><p>语法规则定义了函数的结构和使用方式<br>虽然C中的函数和其他语言中的函数，子程序，过程作用相同，但是细节上略有不同<br>一些函数执行某些动作，如printf()把数据打印到屏幕上<br>一些函数找出一个值供程序使用， 如strlen()把指定字符串的长度返回给程序<br>一般而言，函数可以同时具备以上两种功能</p></blockquote></li><li><p>关于使用函数:</p><blockquote><p>使用函数可以省去编写重复代码的苦差<br>如果程序要多次完成某项任务，那么只需编写一个合适的函数<br>就可以在需要时使用这个函数，或者在不同的程序中使用该函数<br>就像许多程序中使用putchar()一样<br>其次，即使程序只完成某项任务一次，也值得使用函数<br>因为函数让程序更加模块化，从而提高了程序代码的可读性，更方便后期修改并完善</p></blockquote></li><li><p>这里假设已经定义了若干个函数声明，并于主函数mian()内进行了符合逻辑的功能性调用</p><blockquote><p>接下来要做事就是将这若干个函数声明进行定义补充，还称其为为其进行细节描述<br>描述性的函数名能清楚地表达函数的用途和组织结构<br>然后，单独设计和测试每个函数，直到函数都能正常完成任务<br>如果这些函数够通用，还可以用于其他程序</p></blockquote></li></ul><p><strong>其它内容:</strong></p><ul><li><p>许多程序员喜欢把函数看作是根据传入信息(输入)及其生成的值或响应的动作(输出)来定义的”黑盒”</p><blockquote><p>如果不是自己编写函数，根本不用关心黑盒的内部行为<br>例如，使用printf()时，只需知道给该函数传入格式字符串或一些参数以及printf()生成的输出<br>无需了解 printf()的内部代码<br>以这种方式看待函数有助于把注意力集中在程序的整体设计，而不是函数的实现细节上<br>因此，在动手编写代码之前，仔细考虑一下函数应该完成什么任务， 以及函数和程序整体的关系</p></blockquote></li><li><p>为了解函数而需要做到的基本理解: 正确地定义函数，如何调用函数和如何建立函数间的通信</p></li></ul><hr><h3 id="函数-基本使用"><a href="#函数-基本使用" class="headerlink" title="函数-基本使用"></a>函数-基本使用</h3><ul><li><p>以下的说明都基于该程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"GIGATHINK, INC."</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDRESS <span class="meta-string">"101 Megabuck Plaza"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLACE <span class="meta-string">"Megapolis, CA 94904"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDTH 40</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">starbar</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">starbar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, NAME);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ADDRESS);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, PLACE);</span><br><span class="line">starbar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">starbar</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= WIDTH; count++)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'*'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其输出结果为:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">GIGATHINK, INC.</span><br><span class="line">101 Megabuck Plaza</span><br><span class="line">Megapolis, CA 94904</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>程序分析:</strong></p><ul><li><p>程序在三处使用了starbar标识符: 函数原型(function prototype)告诉编译器函数starbar()的类型</p><blockquote><p>函数调用(function call)表明在此处执行函数<br>函数定义(function definition)明确地指定了函数要做什么</p></blockquote></li><li><p>函数和变量一样，有多种类型</p><blockquote><p>任何程序在使用函数之前都要声明该函数的类型<br>因此，在main()函数定义的前面出现了下面的ANSI C风格的函数</p></blockquote></li><li><p>原型：</p><blockquote><p><code>void starbar(void);</code><br>圆括号表明starbar是一个函数名<br>第1个void是函数类型，void类型表明函数没有返回值<br>第2个void(在圆括号中)表明该函数不带参数<br>分号表明这是在声明函数，不是定义函数<br>也就是说，这行声明了程序将使用一个名为starbar()，没有返回值，没有参数的函数，并告诉编译器在别处查找该函数的定义</p></blockquote></li><li><p>对于不识别ANSI C风格原型的编译器，只需声明函数的类 型，如下所示：</p><blockquote><p><code>void starbar();</code><br>注意，一些老版本的编译器甚至连void都识别不了<br>如果使用这种编译器，就要把没有返回值的函数声明为int类型<br>当然，最好还是换一个新的编译器</p></blockquote></li><li><p>一般而言，函数原型指明了函数的返回值类型和函数接受的参数类型</p><blockquote><p>这些信息称为该函数的签名(signature)<br>对于starbar()函数而言，其签名是该函数没有返回值，没有参数<br>程序把 starbar()原型置于 main()的前面<br>当然，也可以放在main()里面的声明变量处，放在哪个位置都可以</p></blockquote></li><li><p>在main()中，执行到下面的语句时调用了starbar()函数：</p><blockquote><p><code>starbar();</code><br>这是调用void类型函数的一种形式<br>当计算机执行到starbar();语句时， 会找到该函数的定义并执行其中的内容<br>执行完starbar()中的代码后，计算机返回主调函数(calling function)继续执行下一行(本例中，主调函数是main())<br>更确切地说，编译器把C程序翻译成执行以上操作的机器语言代码</p></blockquote></li><li><p>程序中strarbar()和main()的定义形式相同</p><blockquote><p>首先函数头包括函数类型，函数名和圆括号，接着是左花括号，变量声明，函数表达式语句，最后以右花括号结束<br>注意，函数头中的starbar()后面没有分号，告诉编译器这是定义starbar()<br>而不是调用函数或声明函数原型</p></blockquote></li><li><p>程序把starbar()和main()放在一个文件中</p><blockquote><p>当然，也可以把它们分别放在两个文件中<br>把函数都放在一个文件中的单文件形式比较容易编译，而使用多个文件方便在不同的程序中使用同一个函数<br>如果把函数放在一个单独的文件中，要把#define和#include指令也放入该文件<br>稍后会讨论使用多个文件的情况<br>现在，先把所有的函数都放在一个文件中<br>main()的右花括号告诉编译器该函数结束的位置，后面的starbar()函数头告诉编译器starbar()是一个函数</p></blockquote></li></ul><hr><p><strong>图解说明:</strong></p><ul><li>以上程序所属的程序流:</li></ul><img src="/images/数据类型-9/函数-基本流程-1.png" width="40%" height="40%"><ul><li>一个简单函数的结构:</li></ul><img src="/images/数据类型-9/一个简单函数的结构-1.png" width="40%" height="40%"><ul><li><p>starbar()函数中的变量count是局部变量(local variable)</p><blockquote><p>意思是该变量只属于starbar()函数<br>可以在程序中的其他地方(包括main()中)使用 count，这不会引起名称冲突，它们是同名的不同变量<br>如果把starbar()看作是一个黑盒，那么它的行为是打印一行星号<br>不用给该函数提供任何输入，因为调用它不需要其他信息<br>而且，它没有返回值，所以也不给 main()提供(或返回)任何信息<br>简而言之，starbar()不需要与主调函数通信</p></blockquote></li><li><p>关于函数间的通信稍后进行阐述</p></li></ul><hr><p><strong>待补充</strong></p><hr><p>561~640/79</p><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 21:18:32 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;数据类型-函数-1&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="C/C++" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/C-C/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="C" scheme="https://unit-serow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-19</title>
    <link href="https://unit-serow.github.io/2020/03/19/%E9%9A%8F%E7%AC%94-2020-03-19/"/>
    <id>https://unit-serow.github.io/2020/03/19/%E9%9A%8F%E7%AC%94-2020-03-19/</id>
    <published>2020-03-19T06:17:55.000Z</published>
    <updated>2020-03-20T08:48:19.372Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="418f0297e0011794e7f54ade7d2909d9de9b9fa5fcc77f9a2be0f9d6cfbdf465"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
      <category term="无" scheme="https://unit-serow.github.io/categories/%E6%97%A0/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-16</title>
    <link href="https://unit-serow.github.io/2020/03/17/%E9%9A%8F%E7%AC%94-2020-03-16/"/>
    <id>https://unit-serow.github.io/2020/03/17/%E9%9A%8F%E7%AC%94-2020-03-16/</id>
    <published>2020-03-17T10:45:31.000Z</published>
    <updated>2020-03-18T16:17:04.739Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8116ac38fab485852be3541712d96fb071694491cde8fb6671ff5b03488be843"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-8</title>
    <link href="https://unit-serow.github.io/2020/03/17/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-8/"/>
    <id>https://unit-serow.github.io/2020/03/17/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-8/</id>
    <published>2020-03-17T03:41:51.000Z</published>
    <updated>2020-03-19T09:01:00.042Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 17:01:07 GMT+0800 (中国标准时间) --><center><strong>数据类型-I/O-1</strong></center><a id="more"></a><h3 id="数据类型-8"><a href="#数据类型-8" class="headerlink" title="数据类型-8"></a>数据类型-8</h3><ul><li>C I/O 原理解析-1</li></ul><hr><h3 id="字符输入-输出与输入验证"><a href="#字符输入-输出与输入验证" class="headerlink" title="字符输入/输出与输入验证"></a>字符输入/输出与输入验证</h3><hr><p><strong>相关内容:</strong></p><ul><li>输入，输出以及缓冲输入和无缓冲输入的区别</li><li>通过键盘模拟文件结尾条件</li><li>使用重定向将程序与文件相连接</li><li>创建更完善的用户界面</li></ul><hr><p><strong>相关概念:</strong></p><ul><li>输入(input)&amp;输出(output)</li><li>常见的输入和输出设备<blockquote><p>包括如键盘，U盘，扫描仪和激光打印机等</p></blockquote></li><li>如何处理输入数据和输出数据</li><li>执行输入和输出任务的函数<blockquote><p>即用于输入和输出的函数(简称I/O函数)</p></blockquote></li><li>I/O函数(如printf()，scanf()，getchar()，putchar()等)<blockquote><p>其负责将信息传送到程序中<br>I/O函数的基本概念解析</p></blockquote></li><li>关于设计与用户交互的界面</li></ul><hr><p><strong>关于C 的 I/O 函数</strong></p><ul><li>最初，输入/输出函数不是C定义的一部分<blockquote><p>C把开发这些函数的任务留给编译器的实现者来完成<br>在实际应用中，UNIX 系统中的 C 实现为这些函数提供了一个模型<br>ANSI C 库吸取成功的经验，把大量的UNIX I/O函数囊括其中，包括一些极为常用的<br>由于必须保证这些标准函数在不同的计算机环境中能正常工作，所以它们很少使用某些特殊系统才有的特性<br>因此，许多C供应商会利用硬件的特性，额外提供一些I/O函数<br>其他函数或函数系列需要特殊的操作系统支持，如Winsows或Macintosh OS提供的特殊图形界面<br>这些有针对性、非标准的函数让程序员能更有效地使用特定计算机编写程序<br>这里所提及的 I/O函数 是所有系统都通用的标准 I/O 函数，用这些函数编写的可移植程序很容易从一个系统移植到另一个系统<br>处理文件输入/输出 的程序也可以使用这些函数<br>许多程序都有输入验证，即判断用户的输入是否与程序期望的输入匹配，此时则需要输入验证相关的问题和解决方案</p></blockquote></li></ul><hr><h3 id="单字符I-O"><a href="#单字符I-O" class="headerlink" title="单字符I/O"></a>单字符I/O</h3><ul><li><p>即为getchar()和putchar()</p><blockquote><p>getchar()和putchar()每次只处理一个字符<br>虽然效率对于人为编写与阅读的不佳，但这种方法很适合计算机<br>并且这是绝大多数文本(即，普通文字)处理程序所用的核心方法<br>这里会提到有关这些函数的工作方式</p></blockquote></li><li><p>自从ANSI C标准发布以后，C就把stdio.h头文件与使用getchar()和putchar()相关联</p><blockquote><p>这就是为什么程序中要包含这个头文件的原因<br>实际上getchar()和putchar()都不是真正的函数，它们被定义为供预处理器使用的宏</p></blockquote></li><li><p>如果在程序中同时使用了getchar()和putchar()函数</p><blockquote><p>在运行程序后，getchar()函数会将用户以键盘输入的值传递至程序中的putchar()函数<br>然后putchar()函数会将值直接显示/输出在/至屏幕上<br>其涉及概念即为关于C的键盘输入处理，缓冲和标准输入文件</p></blockquote></li></ul><hr><h3 id="C-缓冲区"><a href="#C-缓冲区" class="headerlink" title="C 缓冲区"></a>C 缓冲区</h3><ul><li><p>在老式操作系统中运行getchar()函数的输入循环并以putchar()进行输出</p><blockquote><p>其系统在回显用户输入的字符后立即重复打印该字符是属于无缓冲(或直接)输入<br>即正在等待的程序可立即使用输入的字符<br>而现在的大部分系统在用户按下Enter键之前不会重复打印刚输入的字符<br>这种输入形式属于缓冲输入</p></blockquote></li><li><p>此时用户输入的字符被收集并储存在一个被称为缓冲区(buffer)的临时存储区</p><blockquote><p>按下Enter键后，程序才可使用用户输入的字符</p></blockquote></li><li><p>以下图片比较了这两种输入:</p></li><li><p>缓冲输入和无缓冲输入:</p></li></ul><img src="/images/数据类型-8/缓冲输入和无缓冲输入-1.png" width="40%" height="40%"><hr><p><strong>关于缓冲区的存在意义:</strong></p><ul><li><p>首先，把若干字符作为一个块进行传输比逐个发送这些字符节约时间</p><blockquote><p>其次，如果用户打错字符，可以直接通过键盘修正错误<br>即当最后按下Enter键时，传输的是正确的输入</p></blockquote></li><li><p>虽然缓冲输入好处很多，但是某些交互式程序也需要无缓冲输入</p><blockquote><p>例如在游戏中，玩家通常希望按下一个键就执行相应的指令<br>因此，缓冲输入和无缓冲输入都有用武之地</p></blockquote></li><li><p>缓冲分为两类: 完全缓冲I/O和行缓冲I/O</p></li><li><p>完全缓冲 I/O</p><blockquote><p>完全缓冲输入指的是当缓冲区被填满时才刷新缓冲区(内容被发送至目的地)<br>其通常出现在文件输入中<br>缓冲区的大小取决于系统，常见的大小是512字节和4096字节</p></blockquote></li><li><p>行缓冲 I/O</p><blockquote><p>行缓冲I/O指的是在出现换行符时刷新缓冲区<br>键盘输入通常是行缓冲输入，所以在按下Enter键后才刷新缓冲区</p></blockquote></li></ul><p><strong>关于使用缓冲输入还是无缓冲输入</strong></p><ul><li>ANSI C和后续的C标准都规定输入是缓冲的<blockquote><p>不过最初K&amp;R把这个决定权交给了编译器的编写者<br>ANSI C决定把缓冲输入作为标准的原因是: 一些计算机不允许无缓冲输入<br>如果当前使用的计算机允许无缓冲输入，那么当前所用的C编译器很可能会提供一个无缓冲输入的选项<br>例如，许多IBM PC兼容机的编译器都为支持无缓冲输入提供一系列特殊的函数<br>其原型都在conio.h头文件中<br>这些函数包 括用于回显无缓冲输入的getche()函数和用于无回显无缓冲输入的getch()函数(回显输入意味着用户输入的字符直接显示在屏幕上，无回显输入意味着击 键后对应的字符不显示)<br>UNIX系统使用另一种不同的方式控制缓冲<br>在UNIX系统中，可以使用ioctl()函数(该函数属于UNIX库，但是不属于C标准)指定待输入的类型，然后用getchar()执行相应的操作<br>在ANSI C中，用setbuf()和setvbuf()函数控制缓冲，但是受限于一些系统的内部设置，这些函数可能不起作用<br>总之，ANSI没有提供调用无缓冲输入的标准方式，这意味着是否能进行无缓冲输入取决于计算机系统<br>这里假设所有的输入都是缓冲输入，即不会涉及无缓冲输入</p></blockquote></li></ul><hr><p><strong>有关结束键盘输入</strong></p><ul><li>在某些程序中，只要输入的字符中不含#，那么程序在读到#时才会结束<blockquote><p>同时#也是一个普通的字符，有时在程序中不免会用到<br>所以应该用一个文本中用不到的字符来标记输入完成<br>此时就实现了让这样的字符不会无意间出现在输入中，即在不希望结束程序的时候终止程序时</p></blockquote></li></ul><hr><h3 id="文件-amp-流-amp-键盘-输入"><a href="#文件-amp-流-amp-键盘-输入" class="headerlink" title="文件&amp;流&amp;键盘-输入"></a>文件&amp;流&amp;键盘-输入</h3><p><strong>文件输入:</strong></p><ul><li><p>文件(file)是存储器中储存信息的区域</p><blockquote><p>通常，文件都保存在某种永久存储器中(如，硬盘，U盘或DVD等)<br>毫无疑问，文件对于计算机系统 相当重要<br>例如编写的C程序就保存在文件中，同时用来编译C程序的程序也保存在文件中<br>后者说明，某些程序需要访问指定的文件<br>当编译储存在名为echo.c文件中的程序时，编译器打开echo.c文件并读取其中的内容<br>当编译器处理完后，会关闭该文件<br>其他程序，例如文字处理器，不仅要打开，读取和关闭文件，还要把数据写入文件</p></blockquote></li><li><p>C 是一门强大且灵活的语言，有许多用于打开，读取，写入和关闭文件的库函数</p><blockquote><p>从较低层面上，C可以使用主机操作系统的基本文件工具直接处理文件<br>这些直接调用操作系统的函数被称为底层 I/O (low-level I/O)<br>由于计算机系统各不相同，所以不可能为普通的底层I/O函数创建标准库， ANSI C也不打算这样做<br>然而从较高层面上，C还可以通过标准I/O包(standard I/O package)来处理文件<br>这涉及创建用于处理文件的标准模型和一套标准I/O函数<br>在这一层面上，具体的C实现负责处理不同系统的差 异，以便用户使用统一的界面</p></blockquote></li></ul><p><strong>有关 I/O 的差异问题:</strong></p><ul><li><p>例如，不同的系统储存文件的方式不同</p><blockquote><p>有些系统把文件的内容储存在一处，而文件相关的信息储存在另一处<br>而有些系统在文件中创建一份文件描述</p></blockquote></li><li><p>在处理文件方面</p><blockquote><p>有些系统使用单个换行符标记行末尾<br>而其他系统可能使用回车符和换行符的组合来表示行末尾</p></blockquote></li><li><p>文件大小方面</p><blockquote><p>有些系统用最小字节来衡量文件的大小，有些系统则以字节块的大小来衡量</p></blockquote></li><li><p>如果使用标准I/O包，就不用考虑这些差异</p><blockquote><p>此时可以使用<code>if(ch == &#39;\n&#39;)</code>来检查换行符<br>即使用系统实际用的是回车符和换行符的组合来标记行末尾<br>I/O函数会在两种表达式法之间相互转换</p></blockquote></li><li><p>从概念上看，C程序处理的是流而不是直接处理文件</p><blockquote><p>流(stream)是一个实际输入或输出映射的理想化数据流<br>这意味着不同属性和不同种类的输入，由属性更统一的流来表示<br>于是，打开文件的过程就是把流与文件相关联，而且读写都通过流来完成</p></blockquote></li><li><p>这里着重理解 C 把输入和输出设备视为存储设备上的普通文件</p><blockquote><p>尤其是把键盘和显示设备视为每个C程序自动打开的文件<br>有关对于文件的深入讨论这里不做多余赘述</p></blockquote></li><li><p>stdin流表示键盘输入，stdout流表示屏幕输出</p><blockquote><p>getchar()，putchar()，printf()和scanf()函数都是标准I/O包的成员，负责处理这两个流<br>以上的内容则说明了可以用处理文件的方式来处理键盘输入<br>例如， 程序读文件时要能检测文件的末尾才知道应在何处停止<br>因此，C 的输入函数内置了文件结尾检测器<br>既然可以把键盘输入视为文件，那么也应该能使用文件结尾检测器结束键盘输入<br>下面会从文件开始讨论如何结束文件</p></blockquote></li></ul><hr><h3 id="文件结尾"><a href="#文件结尾" class="headerlink" title="文件结尾"></a>文件结尾</h3><ul><li><p>计算机操作系统要以某种方式判断文件的开始和结束</p><blockquote><p>检测文件结尾的一种方法是，在文件末尾放一个特殊的字符标记文件结尾<br>CP/M，IBMDOS和MS-DOS的文本文件曾经用过这种方法<br>如今，这些操作系统可以使用内嵌的Ctrl+Z字符来标记文件结尾<br>这曾经是操作系统使用的唯一标记， 不过现在有一些其他的选择，例如记录文件的大小<br>所以现代的文本文件不 一定有嵌入的Ctrl+Z<br>但是如果有，该操作系统会将其视为一个文件结尾标记</p></blockquote></li><li><p>以下图片演示了这种方法:</p></li><li><p>带文件结尾标记的文件:</p></li></ul><img src="/images/数据类型-8/带文件结尾标记的文件-1.png" width="40%" height="40%"><hr><ul><li><p>操作系统使用的另一种方法是储存文件大小的信息</p><blockquote><p>如果文件有3000字节，程序在读到3000字节时便达到文件的末尾<br>MS-DOS 及其相关系统使用这种方法处理二进制文件，因为用这种方法可以在文件中储存所有的字符， 包括Ctrl+Z<br>新版的DOS也使用这种方法处理文本文件<br>UNIX使用这种方法处理所有的文件<br>无论操作系统实际使用何种方法检测文件结尾<br>在C语言中，用getchar()读取文件检测到文件结尾时将返回一个特殊的值<br>即EOF(end of file的缩写)<br>scanf()函数检测到文件结尾时也返回EOF<br>通常， EOF定义在stdio.h文件中:<br><code>#define EOF (-1)</code></p></blockquote></li><li><p>为什么是-1?</p><blockquote><p>因为getchar()函数的返回值通常都介于0～127，这些值对应标准字符集<br>但是，如果系统能识别扩展字符集，该函数的返回值可能在 0～255之间<br>无论哪种情况，-1都不对应任何字符，所以，该值可用于标记 文件结尾<br>某些系统也许把EOF定义为-1以外的值，但是定义的值一定与输入字符所产生的返回值不同<br>如果包含stdio.h文件，并使用EOF符号，就不必担心EOF值不同的问题<br>这里关键要理解EOF是一个值，标志着检测到文件结尾，并不是在文件中找得到的符号</p></blockquote></li></ul><p><strong>关于如何在程序中使用EOF</strong></p><ul><li><p>把getchar()的返回值和EOF作比较</p><blockquote><p>如果两值不同，就说明没有到达文件结尾<br>也就是说，可以使用下面这样的表达式:<br><code>while ((ch = getchar()) != EOF)</code><br>如果正在读取的是键盘输入不是文件的情况:<br>绝大部分系统(不是全部)都有办法通过键盘模拟文件结尾条件</p></blockquote></li><li><p>这里以该程序举例(echo_eof.c):</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在使用EOF时需要注意下面几点:</li></ul><ol><li>不用定义EOF，因为stdio.h中已经定义过了</li><li>不用担心EOF的实际值，因为EOF在stdio.h中用#define预处理指令定义，可直接使用，不必再编写代码假定EOF为某值</li><li>变量ch的类型从char变为int，因为char类型的变量只能表示0～255的无符号整数<blockquote><p>但是EOF的值是-1<br>还好，getchar()函数实际返回值的类型是 int，所以它可以读取EOF字符<br>如果实现使用有符号的char类型，也可以把ch声明为char类型，但最好还是用更通用的形式</p></blockquote></li><li>由于getchar()函数的返回类型是int，如果把getchar()的返回值赋给char类型的变量，一些编译器会警告可能丢失数据<blockquote><p>ch是整数不会影响putchar()，该函数仍然会打印等价的字符<br>使用该程序进行键盘输入，要设法输入EOF字符<br>不能只输入字符 EOF，也不能只输入-1(输入-1会传送两个字符: 一个连字符和一个数字 1)</p></blockquote></li><li>正确的方法是，必须找出当前系统的要求<blockquote><p>例如，在大多数UNIX和 Linux系统中，在一行开始处按下Ctrl+D会传输文件结尾信号<br>许多微型计算机系统都把一行开始处的Ctrl+Z识别为文件结尾信号<br>一些系统把任意位置 的Ctrl+Z解释成文件结尾信号</p></blockquote></li></ol><ul><li><p>下面是在UNIX系统下运行echo_eof.c程序的缓冲示例:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">She　</span>walks　in　<span class="keyword">beauty,　</span>like　the　night</span><br><span class="line"><span class="keyword">She　</span>walks　in　<span class="keyword">beauty,　</span>like　the　night</span><br><span class="line">Of　<span class="keyword">cloudless　</span>climes　<span class="keyword">and　</span>starry　skies...</span><br><span class="line">Of　<span class="keyword">cloudless　</span>climes　<span class="keyword">and　</span>starry　skies...</span><br><span class="line">Lord　<span class="keyword">Byron</span></span><br><span class="line"><span class="keyword">Lord　</span><span class="keyword">Byron</span></span><br><span class="line"><span class="keyword">[Ctrl+D]</span></span><br></pre></td></tr></table></figure></li><li><p>每次按下Enter键，系统便会处理缓冲区中储存的字符</p><blockquote><p>并在下一行打印该输入行的副本<br>这个过程一直持续到以UNIX风格模拟文件结尾(按下Ctrl+D)<br>在PC中，要按下Ctrl+Z</p></blockquote></li><li><p>既然<code>echo_eof.c</code>程序能把用户输入的内容拷贝到屏幕上，那么考虑一下该程序还可以做什么</p><blockquote><p>假设以某种方式把一个文件传送给它，然后它把文件中的内容打印在屏幕上，当到达文件结尾发现EOF信号时停止<br>或者，假设以某种方式把程序的输出定向到一个文件，然后通过键盘输入数据<br>用<code>echo_eof.c</code>来储存在文件中输入的内容<br>假设同时使用这两种方法: 把输入从一个文件定向到<code>echo_eof.c</code>中，并把输出发送至另一个文件<br>然后便可以使用<code>echo_eof.c</code>来拷贝文件<br>这个小程序有查看文件内容，创建一个新文件，拷贝文件的潜力<br>关键是要控制输入流和输出流</p></blockquote></li><li><p>注意模拟EOF和图形界面</p><blockquote><p>模拟EOF的概念是在使用文本界面的命令行环境中产生的<br>在这种环境中，用户通过击键与程序交互，由操作系统生成EOF信号<br>但是在一些实际应用中，却不能很好地转换成图形界面(如Windows和Macintosh)<br>这些用户界面包含更复杂的鼠标移动和按钮点击<br>程序要模拟EOF的行为依赖于编译器和项目类型<br>例如，Ctrl+Z可以结束输入或整个程序，这取决于特定的 设置</p></blockquote></li></ul><hr><p><strong>待补充</strong></p><hr><h3 id="补充内容-1"><a href="#补充内容-1" class="headerlink" title="补充内容-1"></a>补充内容-1</h3><hr><h3 id="重定向和文件"><a href="#重定向和文件" class="headerlink" title="重定向和文件"></a>重定向和文件</h3><ul><li><p>输入和输出涉及函数，数据和设备</p><blockquote><p>例如，假设某一个程序内使用输入函数getchar()用作被设定内容的输出方法<br>输出设备这里将其假设为键盘，输入数据流由字符组成</p></blockquote></li><li><p>假设此时希望输入函数和数据类型不变，仅改变程序查找数据的位置</p></li><li><p>程序判断查找输入的位置的方法与逻辑:</p><blockquote><p>在默认情况下，C程序使用标准I/O包查找标准输入作为输入源<br>即为stdin流，它是把数据读入计算机的常用方式<br>它可以是一个过时的设备，如磁带，穿孔卡或电传打印机<br>或者(假设)是键盘，甚至是一 些先进技术，如语音输入<br>然而，现代计算机非常灵活，可以让它到别处查找输入<br>尤其是，可以让一个程序从文件中查找输入，而不是从键盘</p></blockquote></li><li><p>程序可以通过两种方式使用文件</p><blockquote><p>第一种方法:<br>显式使用特定的函数打开文件，关闭文件，读取文件，写入文件，诸如此类，这里不对此种方法进行过多赘述<br>第二种方法:<br>设计能与键盘和屏幕互动的程序，通过不同的渠道重定向输入至文件和从文件输出<br>换言之，把stdin流重新赋给文件<br>继续使用getchar()函数从输入流中获取数据，但它并不关心从流的什么 位置获取数据<br>虽然这种重定向的方法在某些方面有些限制，但是用起来比较简单，一般会用于普通的文件处理技术<br>重定向的一个主要问题与操作系统有关，与C无关<br>尽管如此，许多C 环境中(包括UNIX，Linux和Windows命令提示模式)都有重定向特性<br>而且一些C实现还在某些缺乏重定向特性的系统中模拟它<br>在UNIX上运行苹果 OS X，可以用UNIX命令行模式启动Terminal应用程序</p></blockquote></li></ul><hr><h3 id="UNIX-amp-Linux-amp-Windows-重定向"><a href="#UNIX-amp-Linux-amp-Windows-重定向" class="headerlink" title="UNIX&amp;Linux&amp;Windows-重定向"></a>UNIX&amp;Linux&amp;Windows-重定向</h3><p><strong>UNIX</strong></p><ul><li>UNIX(运行命令行模式时)，Linux(ditto)和Window命令行提示(模仿旧式DOS命令行环境)都能重定向输入，输出<blockquote><p>重定向输入让程序使用文件而不是键盘来输入<br>重定向输出让程序输出至文件而不是屏幕</p></blockquote></li></ul><ol><li>重定向输入</li></ol><ul><li><p>假设已经编译了<code>echo_eof.c</code>程序，并把可执行版本放入一个名为<code>echo_eof</code>(或者在Windows系统中名为<code>echo_eof.exe</code>)的文件中</p><blockquote><p>运行该程序，输入可执行文件名: <code>echo_eof</code><br>该程序的运行情况和前面描述的一样，获取用户从键盘输入的输入<br>现在，假设要用该程序处理名为words的文本文件<br>文本文件(text file)是内含文本的文件，其中储存的数据是人类可识别的字符<br>文件的内容可以是 一篇散文或者C程序<br>内含机器语言指令的文件(如储存可执行程序的文 件)不是文本文件<br>由于该程序的操作对象是字符，所以要使用文本文件<br>只需用此命令代替上面的命令即可: <code>echo_eof &lt; words</code><br>符号是UNIX和DOS/Windows的重定向运算符<br>该运算符使words文件与stdin流相关联，把文件中的内容导入<code>echo_eof</code>程序<br><code>echo_eof</code>程序本身并不知道(或不关心)输入的内容是来自文件还是键盘<br>它只知道这是需要导入的字符流，所以它读取这些内容并把字符逐个打印在屏幕上，直至读到文件结尾<br>因为C把文件和I/O设备放在一个层面，所以文件就是现在的I/O设备</p></blockquote></li><li><p>重定向需要注意的几点</p><blockquote><p>对于UNIX，Linux和Windows命令提示，&lt;两侧的空格是可选的<br>一些系统，如AmigaDOS(那些喜欢怀旧的人使用的系统)，支持重定向<br>但是在重定向符号和文件名之间不允许有空格</p></blockquote></li><li><p>下面是一个特殊的words文件的运行示例，$是UNIX和Linux的标准提示符</p><blockquote><p>在Windows/DOS系统中见到的DOS提示可能是A&gt;或C&gt;</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ echo_eof &lt; <span class="built_in">words</span></span><br><span class="line">The world <span class="keyword">is</span> too much <span class="keyword">with</span> us: late <span class="keyword">and</span> soon,</span><br><span class="line">Getting <span class="keyword">and</span> spending, we lay waste our powers:</span><br><span class="line">Little we see <span class="keyword">in</span> Nature <span class="keyword">that</span> <span class="keyword">is</span> ours;</span><br><span class="line">We have <span class="keyword">given</span> our hearts away, a sordid boon!</span><br><span class="line">$</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li>重定向输出</li></ol><ul><li>现在假设要用<code>echo_eof</code>把键盘输入的内容发送到名为mywords的文件中<blockquote><p>然后，输入以下命令并开始输入:<br><code>echo_eof &gt; mywords</code></p><blockquote><p>符号是第2个重定向运算符<br>? 它创建了一个名为mywords的新文件，然后把<code>echo_eof</code>的输出(即为人为去输入字符的副本)重定向至该文件中<br>重定向把stdout从显示设备(即为显示器)赋给mywords文件<br>如果已经有一个名为mywords的文件，通常会擦除该文件的内容，然后替换新的内容(但是，许多操作系统有保护现有文件的选项，使其成为只读文件)<br>所有出现在屏幕的字母都是人为进行输入的，其副本储存在文件中<br>在下一行的开始处按下Ctrl+D(UNIX)或Ctrl+Z(DOS)即可结束该程序<br>还有一点就是必须在每行的末尾单击Enter键才能把缓冲区的内容发送给程序</p></blockquote></blockquote></li></ul><hr><ol start="3"><li>组合重定向</li></ol><ul><li><p>现在假设希望制作一份mywords文件的副本，并命名为savewords</p><blockquote><p>只需输入以下命令即可:<br><code>echo_eof &lt; mywords &gt; savewords</code><br>下面的命令也起作用，因为命令与重定向运算符的顺序无关:<br><code>echo_eof &gt; savewords &lt; mywords</code><br>注意: 在一条命令中，输入文件名和输出文件名不能相同<br><code>echo_eof &lt; mywords &gt; mywords....&lt;--错误</code><br>原因是&gt; mywords在输入之前已导致原mywords的长度被截断为0</p></blockquote></li><li><p>总之，在UNIX，Linux或Windows/DOS系统中使用两个重定向运算符(&lt;和&gt;)时，要遵循以下原则:</p><blockquote><p>重定向运算符连接一个可执行程序(包括标准操作系统命令)和一个数据文件<br>不能用于连接一个数据文件和另一个数据文件，也不能用于连接一个程序和另一个程序<br>使用重定向运算符不能读取多个文件的输入，也不能把输出定向至多个文件<br>通常，文件名和运算符之间的空格不是必须的<br>除非是偶尔在UNIX shell，Linux shell或Windows命令行提示模式中使用的有特殊含义的字符<br>例如刚才的<code>echo_eof&lt;words</code></p></blockquote></li><li><p>以上介绍的都是正确的例子，下面来看一下错误的例子:</p><blockquote><p>addup和count 是两个可执行程序，fish和beets是两个文本文件:</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fish &gt; <span class="keyword">beets</span>←违反第<span class="number">1</span>条规则</span><br><span class="line"><span class="keyword">addup </span>&lt; <span class="built_in">count</span>←违反第<span class="number">1</span>条规则</span><br><span class="line"><span class="keyword">addup </span>&lt; fish &lt; <span class="keyword">beets</span>←违反第<span class="number">2</span>条规则</span><br><span class="line"><span class="built_in">count</span> &gt; <span class="keyword">beets </span>fish←违反第<span class="number">2</span>条规则</span><br></pre></td></tr></table></figure></li><li><p>UNIX，Linux或Windows/DOS还有&gt;&gt;运算符，该运算符可以把数据添加到现有文件的末尾</p><blockquote><p>而 | 运算符能把一个文件的输出连接到另一个文件的输入<br>其它更加深入的内容可参考书籍: UNIX Primer Plus，Third Edition(Wilson，Pierce和Wessler合著)</p></blockquote></li></ul><p><strong>其它内容:</strong></p><ul><li><p>绝大部分C系统都可以使用重定向，可以通过操作系统重定向所有程序</p><blockquote><p>或只在C编译器允许的情况下重定向C程序<br>假设prog是可执行程序名，file1和file2是文件名</p></blockquote></li><li><p>把输出重定向至文件: &gt;</p><blockquote><p><code>prog &gt;file1</code></p></blockquote></li><li><p>把输入重定向至文件: &lt;</p><blockquote><p><code>prog &lt;file2</code></p></blockquote></li><li><p>组合重定向:</p><blockquote><p><code>prog　&lt;file2　&gt;file1</code><br><code>prog　&gt;file1　&lt;file2</code></p></blockquote></li><li><p>这两种形式都是把file2作为输入，file1作为输出</p></li><li><p>一些系统要求重定向运算符左侧有一个空格，右侧没有空格</p><blockquote><p>而其他系 统(如UNIX)允许在重定位运算符两侧有空格或没有空格</p></blockquote></li></ul><hr><p><strong>关于创建更友好的用户界面:</strong></p><ul><li>大部分人偶尔会写一些中看不中用的程序<blockquote><p>还好，C提供了大量工具让输入更顺畅，处理过程更顺利<br>不过，学习这些工具会导致新的问题<br>最基本的要求是让交互数据输 入更方便<br>并且减少错误输入的影响</p></blockquote></li></ul><hr><p><strong>关于使用缓冲输入:</strong></p><ul><li>缓冲输入用起来比较方便，因为在把输入发送给程序之前，用户可以编辑输入<blockquote><p>但是，在使用输入的字符时，它也会给程序员带来麻烦<br>一般的缓冲输入会要求用户按下Enter键发送输入<br>但同时这一动作也传送了换行符，程序必须妥善处理这个麻烦的换行符</p></blockquote></li></ul><hr><p><strong>关于混合数值和字符输入:</strong></p><ul><li><p>假设程序要求用getchar()处理字符输入，用scanf()处理数值输入</p><blockquote><p>这两个函数都能很好地完成任务，但是不能把它们混用<br>因为getchar()读取每个字符，包括空格，制表符和换行符<br>而scanf()在读取数字时则会跳过空格，制表符和换行符</p></blockquote></li><li><p>要解决这个问题，程序要跳过一轮输入结束与下一轮输入开始之间的所有换行符或空格</p><blockquote><p>另外，如果该程序不在getchar()测试时<br>而在scanf()阶段终止程序会更好</p></blockquote></li></ul><hr><p><strong>关于输入验证:</strong></p><ul><li>在实际应用中，用户不一定会按照程序的指令行事<blockquote><p>用户的输入和程序期望的输入不匹配时常发生，这会导致程序运行失败<br>作为程序员，除了完成编程的本职工作，还要事先预料一些可能的输入错误<br>这样才能编写出能检测并处理这些问题的程序</p></blockquote></li></ul><hr><h3 id="输入流和数字"><a href="#输入流和数字" class="headerlink" title="输入流和数字"></a>输入流和数字</h3><ul><li><p>在编写处理错误输入的代码时应该很清楚C是如何处理输入的</p></li><li><p>考虑下面的输入:</p><blockquote><p><code>is 28 12.4</code><br>在人类的眼中，它就像是一个由字符，整数和浮点数组成的字符串<br>但是对 C 程序而言，这是一个字节流<br>第1个字节是字母i的字符编码，第2个字节是字母s的字符编码，第3个字节是空格字符的字符编码，第4个字节是数字2的字符编码，等等<br>所以，如果<code>get_long()</code>函数处理这一行输入，第1个字符是非数字，那么整行输入都会被丢弃，包括其中的数字<br>因为这些数字只是该输入行中的其他字符:</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while ((<span class="name">ch</span> = getchar()) != '\n')</span><br><span class="line">putchar(<span class="name">ch</span>)<span class="comment">; // 处理错误的输入</span></span><br></pre></td></tr></table></figure><blockquote><p>虽然输入流由字符组成，但是也可以设置scanf()函数把它们转换成数值</p></blockquote></li><li><p>例如，考虑下面的输入:</p><blockquote><p><code>42</code><br>如果在scanf()函数中使用%c转换说明，它只会读取字符4并将其储存在char类型的变量中<br>如果使用%s转换说明，它会读取字符4和字符2这两个字符，并将其储存在字符数组中<br>如果使用%d转换说明，scanf()同样会读取两个字符<br>但是随后会计算出它们对应的整数值: 4×10+2，即42，然后将 表示该整数的二进制数储存在int类型的变量中<br>如果使用%f转换说明，scanf()也会读取两个字符，计算出它们对应的数值42.0<br>用内部的浮点表示法表示该值，并将结果储存在float类型的变量中</p></blockquote></li><li><p>简而言之，输入由字符组成，但是scanf()可以把输入转换成整数值或浮点数值</p><blockquote><p>使用转换说明(如%d或%f)限制了可接受输入的字符类型<br>而getchar()和使用%c的scanf()接受所有的字符</p></blockquote></li></ul><hr><p><strong>关于菜单浏览:</strong></p><ul><li><p>许多计算机程序都把菜单作为用户界面的一部分</p><blockquote><p>菜单给用户提供方便的同时，却给程序员带来了一些麻烦</p></blockquote></li><li><p>将会涉及的问题:</p></li><li><p>菜单给用户提供了一份响应程序的选项</p><blockquote><p>假设有下面一个例子:</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter the letter of your choice:</span><br><span class="line">a. advice <span class="keyword">b. </span><span class="keyword">bell</span></span><br><span class="line"><span class="keyword">c. </span><span class="built_in">count</span> q. quit</span><br></pre></td></tr></table></figure></li><li><p>理想状态是，用户输入程序所列选项之一，然后程序根据用户所选项完成任务</p><blockquote><p>作为一名程序员，自然希望这一过程能顺利进行<br>因此，第1个目标是: 当用户遵循指令时程序顺利运行<br>第2个目标是: 当用户没有遵循指令时，程序也能顺利运行<br>显而易见，要实现第2个目标难度较大，因为很难预料用户在使用程序时的所有错误情况<br>现在的应用程序通常使用图形界面，可以点击按钮，查看对话框，触摸图标<br>而不是示例中的命令行模式<br>但是，两者的处理过程大致相同: 给用户提供选项，检查并执行用户的响应，保护程序不受误操作的影响<br>除了界面不同，它们底层的程序结构也几乎相同<br>但是，使用图形界面更容易通过限制选项控制输入</p></blockquote></li></ul><hr><p><strong>关于任务</strong></p><ul><li>这里将更具体地分析一个菜单程序需要执行哪些任务</li><li>它要获取用户的响应，根据响应选择要执行的动作<blockquote><p>另外，程序应该提供返回菜单的选项</p></blockquote></li><li>C 的switch语句是根据选项决定行为的好工具，用户的每个选择都可以对应一个特定的case标签<blockquote><p>使用while语句可以实现重复访问菜单的功能<br>因此写出以下伪代码:<br>获取选项<br>当选项不是’q’时<br>转至相应的选项并执行<br>获取下一个选项</p></blockquote></li></ul><hr><p><strong>关于让使执行更顺利</strong></p><ul><li><p>当决定实现某个程序时</p><blockquote><p>就要开始考虑如何让程序顺利运行(顺利运 行指的是，处理正确输入和错误输入时都能顺利运行)<br>例如，能做的是让”获取选项”部分的代码筛选掉不合适的响应，只把正确的响应传入switch<br>这表明需要为输入过程提供一个只返回正确响应的函数</p></blockquote></li><li><p>混合字符和数值输入会产生一些问题，创建菜单也有这样的问题</p></li><li><p>还要注意在处理较复杂的任务时，如何让函数把任务委派给另一个函数</p><blockquote><p>这样让程序更模块化</p></blockquote></li></ul><hr><p><strong>关键概念:</strong></p><ul><li><p>C程序把输入作为传入的字节流</p><blockquote><p>getchar()函数把每个字符解释成一个字符编码<br>scanf()函数以同样的方式看待输入，但是根据转换说明，它可以把字符输入转换成数值<br>许多操作系统都提供重定向，允许用文件代替键盘输入，用文件代替显示器输出</p></blockquote></li><li><p>程序通常接受特殊形式的输入</p><blockquote><p>可以在设计程序时考虑用户在输入时可能犯的错误，在输入验证部分处理这些错误情况<br>让程序更强健更友好</p></blockquote></li><li><p>对于一个小型程序，输入验证可能是代码中最复杂的部分</p><blockquote><p>处理这类问题有多种方案<br>例如，如果用户输入错误类型的信息，可以终止程序<br>也可以给用户提供有限次或无限次机会重新输入</p></blockquote></li></ul><hr><p><strong>本章小结:</strong></p><ul><li><p>许多程序使用 getchar()逐字符读取输入</p><blockquote><p>通常，系统使用行缓冲输入， 即当用户按下Enter键后输入才被传送给程序<br>按下Enter键也传送了一个换行符，编程时要注意处理这个换行符<br>ANSI C把缓冲输入作为标准</p></blockquote></li><li><p>通过标准I/O包中的一系列函数，以统一的方式处理不同系统中的不同文件形式，是C语言的特性之一</p><blockquote><p>getchar()和scanf()函数也属于这一系列<br>当检测到文件结尾时，这两个函数都返回EOF(被定义在stdio.h头文件中)<br>在不同系统中模拟文件结尾条件的方式稍有不同<br>在UNIX系统中，在一行开始处按下Ctrl+D可以模拟文件结尾条件<br>而在DOS系统中则使用Ctrl+Z</p></blockquote></li><li><p>许多操作系统(包括UNIX和DOS)都有重定向的特性，因此可以用文件代替键盘和屏幕进行输入和输出</p><blockquote><p>读到EOF即停止读取的程序可用于键盘输入和模拟文件结尾信号，或者用于重定向文件<br>混合使用getchar()和scanf()时，如果在调用getchar()之前，scanf()在输 入行留下一个换行符会导致一些问题<br>不过，意识到这个问题就可以在程序中妥善处理</p></blockquote></li><li><p>编写程序时，要认真设计用户界面</p><blockquote><p>事先预料一些用户可能会犯的错误<br>然后设计程序妥善处理这些错误情况</p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 17:01:07 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;数据类型-I/O-1&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="C/C++" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/C-C/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="C" scheme="https://unit-serow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>时间-1</title>
    <link href="https://unit-serow.github.io/2020/03/15/%E6%97%B6%E9%97%B4-1/"/>
    <id>https://unit-serow.github.io/2020/03/15/%E6%97%B6%E9%97%B4-1/</id>
    <published>2020-03-15T15:46:16.000Z</published>
    <updated>2020-03-15T15:53:03.583Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1e21f81d830478451ab63f438cd662ef35255d39e958191606f76d01fb97b0ea">0267ec72f19b8c198697a4f72870a3a87f07bc927355167c7e6d9f510818f08762be6b3ff9f679fb0a5cf0653d49664c7618404f42f0b619f49076adb2bf546e51d13b5d85b769fb3718aa98bc0cd98a62b73e77af59b9cd3454122c1346448074168c988fe0e33b625d06400df3f78fc4a87f846afa70aefd1c403d0e13605c4bce5de651a0842f943d7167d9920047b4de52c3b7581d3d85a379edd6972074d02a2db031f367601791f4a6f0aff711c83caa86aa5b637945d3df6a6b317e392d0db246bbacb41987b5b1741c9c37a26ce7bb04077c07d1fa590e516919d0c06582b3c087b57819f8324be3ebdd5fb6e6b3508685652df38c4c9522ecdf2638a622fc55920b7fb0d843ba6591b627ea878b1200a6ff3e981e96416b4d8b1a283b9172e1bfb6d102aec191174f884fe13baa17de3c1d3201dea6daee52744e83ee0c518aeaaba3bab81213e65f37121130908d356a7dddf857467b315e90609472cb6d6d2493bf110ed74f1feacba2131a35282dabb80a4d3f159b84c84eaf63336736c8cab3e8fa2995590ca481c16e2178530e751ca08c3018645328317c2d03237c5f4b577cb5941d691363e7dcaaf8597ef2a29560b515e8e18aa8be404ba96ae3a1c12017fb4cdca58f27c751032033d4ec14886ad25ffce845cdc8fd726c9230b3b54a8f0aece6fb8da3d8190a605acdf2feb3846882425d1c2126f8bcaea1c2743afbdc2e30a182ffcc5552ee9afbd354ca05fc38bb79beb51ffa5b9d27f42ae7f47dad62631f84bc72fdd9bf6947f80506599265e47ae180b01196d470230bb207c1db4f0702827b1d8009367689418b9fcff526b30a25ce3e434cd92e3ee2267e27585130bd51542e7acaad36f95087be2a85fefac1be66e087028565cb322d7086ac7bd6da0a62c600933324f1a336103ef0b25eefbf3904c79ace1ec1c471527c86db545e288db84639f321a3008621f37500488bf7651353536cd420512862f75a4703ddd2120b452658a7b05a22f499ba084e916cdd3a3919c6eea5e5d9f77db126aeca194ee5f1d635cf0aa790c3872863e0e10a06dc29d5b45295c70e2a6b42ff246de3bdec7016881851d3b2c6255eb4c3516f8aeade02abca9917eea16e791f78540adcebd874bb6f3d2d869aa6fc4199202acee7f4a90352b5567334824aae1a350b5659cbb0b33807419e5b493d6b903f4d7460fe305f8dbb1e9431df9cb8976064af6866696411d151f809ac84fef89afdbbca3d2456f950d82a2b8455e401e1a0b0b9d9f6f864b750c56e0453719f23cc6fd6e7e74883e8b23c164058417fd3ad2cf8e8f18379ed70cfd0dfcc40670fa268d67d5b98bf427259983610c2df8a61bad29fa51e62899a249752bddf7ecfb577980cc684a7fad0ffc7bd186835aa078375fac0f12024abdf3103943227c4bc33d1d39d02dd27f2d0a09da4eb9e16283741f522fb5a79ecc1c05f99d188e7152d20cd8dbd0c431f42d2768dc4b38861d3826116b8dbb31bb62d8cf7518a8836e6adf23935cacac4c17f1062cfaf1f3183d1c5aa49ae96f5fb5c43e87ddb25e0bb816b5a57d0713c5a7d6aea43796d317f4cfa8c06418ad8f2b3a953186b0a491572f1bffc1e03ad2378f5116d5c9ce8e56777e719e4502230eff0b495c97c0a6cf7b0452be3107566d480edd8ca2131cb3ce24d654d4cf460d175ca0afaac313aab64d179e709a9ea75e52fa35f6d3631f7312cccc9f33299288e7de015737f57288c089cf1ccf721f7f41f1aaa88acbd5fe4ca658f44ae61e8698cbb3794bf34b8a3ee88f39bd935a5ee5caf724878588d1e77ae1ae49250295cd5ce2fdabcd39aec45f01442a72a4d55f8ed956c534a117bc32a47702523fc0320c90159ea6433d6a8ecf22a77355fe32a2bb46c83864cd4825551bf2cf86202484e20bba6b927e94b9bd74a25d011b15491f45c98880a5f99ce26fcf1bf9297c54595159c824f6825b7e9de0c53477b2232b32a4e5daecd8021aa40dc345f9a8cb5b104bcdbfed98db6d032f4d0e797a01ab068cfe535f7bacc1f8d1e874f69d51e3e787f10344834cc927cfa6b71002baf7d584bfc7d2d2d6463255af4ce2e10331e8fb2a91efa83569e528b80ce51063e5a7961dd4218dbe0a5dd22a73e8186f0d905ae90e5743bf16066ebd89e1488782d3a445457dd2b01cdede2d6167c21ed678faf35d63af7a271cc1f463203aee772e0d758a954859c8f7640e25f2cd072444ff2c340f5b637b16178580f3288ddcce18c3c6b86ad50ad7aa9903a3e1298769665b3fbf35832632198b49a3f5ed3ed779ce21a211731f6360531bfed46cab66052c43d4bd2964aa23bcfe4a639a6e097a1b1d25b7bea177e20590a0fc161fbb232b2f9fb7fe85bb00aa8266e3b566030ea564dc306757853ad2a54fbae5b99ae05248ca8c374c228a9e33f0b2fd221d49b6fd4b81db238c95dc62c272fe822d30fbe596b1ae12b7c07f3f79cfad05f41dd9ff08aa22549b469ed355be74e421e20bf850797544e19a93c2d8f69e2e644079758977f4f9a6bd428c0cda664351e455e03dab299b03717bb718d3db985feac86eba29bc908cb7fc788ab2c1aa80506ffd616d302e7a5eb3e60f3e472802abe96ac1f3fab556ec796628c75893de11239055f929e01e789b2cf6e4e5314ff13c045be12c3ca8ebf0fc6684873bb4697bfc9424f911f035ea4eebe49369c514dc11e363151cba68e08a9616caef0821146e4bc04cbc634976e6809374478601f8c10d206dc45300f494bd2037a93e2d31b8476792a29ee3e9d7cbda8c8cb5bd71d32475b97c9c0ada122f4f88826e4614a21fd35f19c059b3c2c75b73ad9bfe137471a64fa2422216e080aa466352b269ca08d02e20052ab66fcd34ce8b5f162755a228dffc13126a0a39fabd56d93a72952d80eda1ea0b055034eb769f5f3d73cd67154dcbfbe8a20dd63ada28dd958d07e07ffa59c1009b26afe841f4370d4fa0b31bdc68b0927976fadd68f894dd04361bb7784a958458f09b66cb356eb8c4587a1de4b30e6fc3a6ef16d71e2df8bcd26ec0c7224cae2caecc8262a0a313fdecd785ab73e382c69105bd582a24631b9c55b4b753897b1a639aba323b7ced8a59d1bb708dda908b442226dca9ed8fa40bd6fbd840a80b75962d95b54b995ff5319da730675ba3f92431a7c0641684f188c1ba04f94b29f27cf0f824538e534fcea62efb459af42c29030c7429fef17b719a5ed97bb3edfd70f090069ddd2eccfa38644dd4fafb2d008d72b93f39386812383494b1d68de06647ccac4388bb72c50f0ac36d852b413a621c36b306203087c0073b012ea4e2bda3b8beace60282f10af11164172ef204eb1a95136e1092c74b5466ef08063cac36478183b6a991cbcd30cd6ca572598f8db2488909cabe77cd21c6adb87f0385c221ba5a4e09662facd5af79050dd93c86fb6d7ed49b24152f4f03ee669540c52b714fd95905135639b9dc8c9353c02b2cf75d6c6e0a789641c26c4d9b0e00713c0669049c3886b95b26bfbfdc84ce253368f48d0e88ba27188f5096da3d919db51e906069bc4b1cb800ca534a2396f245ff1877500e3201a0d6b0bca76104a3298961a57f22c27d690ccaa56e8a1aee1fbd3a705218dc0159d5cf755010077aa5be7c87957632b2fbf1c8a5080985ef02ba89a0703f8ee4b2da5f986e78d30be0e348e0690118e8151e44e41700b6bb2cf178099ccba10cfd40ef90dd9bda9e4ea9256ae559447e2a09111e06a83970e08df7fdc0f4cabc1b83efc742eb38d789281afd290d372518127055c256696b901326e58f2fc48b3c2c85d83061ee10199087d2e9458a954b3cb126156a2ad562ef52cba8a3e02f8e4ceb38c62f73f287b149f86957eaf56eb3c6b81c7d560b89d9f72bfbae15db3ac0f326876543e20658f40f1a80acac9d8185a0f6791ebbbe2b4be599a34aa61c831c4f0749097c0e54c1e6aca28849cf274e3937ee5bb8cd12a923e518a03188d32ce895ea8821adcba9abcc1390d3f519ff912dfe1ab7b01ac18457cad6d7cd4bbe2afe91450f6675db19e67b08537be530febd23f046ed35aeb1c09059ab186bd293671d6e333ac6429a2f7472e388c535b03917156073d25280e729b9945067f0798c3137ad7197df179670f6be5f1146e906b10cc0708dffd633b31b1e9e5456f6112551ce7b0668fb290e91b8979d680551f9414332f46c4d77ce122a12be465c612d5926f7e06386516921fbf22b5619505b38cf3e75218049e136980fd51fa0a74c1978a735dda2abb868c73686ac5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
      <category term="无" scheme="https://unit-serow.github.io/categories/%E6%97%A0/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔-永驻</title>
    <link href="https://unit-serow.github.io/2020/03/15/%E9%9A%8F%E7%AC%94-%E6%B0%B8%E9%A9%BB/"/>
    <id>https://unit-serow.github.io/2020/03/15/%E9%9A%8F%E7%AC%94-%E6%B0%B8%E9%A9%BB/</id>
    <published>2020-03-15T10:01:20.000Z</published>
    <updated>2020-03-15T10:07:09.524Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e1e9d050c57dc6aed9cb50b87a6af810eeb46ece5014e353c9866f4059545448">0267ec72f19b8c198697a4f72870a3a87f07bc927355167c7e6d9f510818f08762be6b3ff9f679fb0a5cf0653d49664c7618404f42f0b619f49076adb2bf546e4b111f26008856c0c71c2ee88709c9d3fca2aa2ef07e8647af39698611e12a42d264395d4770391c21c34c0a0db83d500093e747a2396d36a455924b65eea808fef3e1845a1d53ecc278a5af52b7de8f30a783f6fb2b1a670a2e367d804075451f848830bd63fccd36e7f238aa298cc8438b2feb96270df88f9e038a3ca63f240ade0670624cb0dddb8639d87ac0e1dc526ed9db7472e8581a5656d088db7511a8248f2443b6403699af9a699b7947a35ccc2ca4df8a41a2bb7d3b8609dc069d7710ed11c25c526add731c1dce2a0b481c65a317b791f0cf8984ffa072a41e8da1a97455d9a3238b343a0d89e114e88bb8c8ba976cebe32602453685993472d64a3efc51132f77e51b1120d50541854eee2861c5a7b88e6cdf1fdeeee5844ffe52e7aba36e36bfb84e63ed8fc1cf0053b8579859a29fdf93bb7de80d9dac5bd41d4955605bf1f386426a2141b52219655503f1f199284081e551b0d1f1bc3304429b5e339a3e7790043c36e97aefc640021935f364ee237c7310bde415fe4f8a5bba43fb17537ce3dc83d2806be5bce554486e02d5e1a54807d2da36273877eb081b8ab2d1e0df267042555a365c16b9335dccceaea1d333597ad41bdbceb908c72540f9abad51342d398e84b512a45d2155fffeaf568da892e8f857f536cd87a3af6ea3b21bb5b40371f48b9f0abad76a5632eb2601f7de16c9d6b95699ee444a2eb2b5bf397d33f0349427a4be52fcf37c598a5305720cf3e5031eabe2c10f99b75ee51c7902d1bfc89871e3c52ebed6ddb0a5a3d84028835b00d30a290ec893f0e55ea1ed9d92b2daa353a28865fb24e49d091e4a53093989127a6cf12175de6f9da26e40d82a460dd501831e5466023434fbb6f888fd24b91f40fdd0b08d7c403d8d25fe76c6842422dda27c9abfeb7f1b7724fb6d238d248a3d964dd93da7f69a77bd518b99f58ddc30fbaa68be55111fdc90f171258d4793da1b6422074d2a52bb03ec506df54aad9b99326816ada7431b2f44879cb41397fbf89cabb63cd9e0db420c249d3713e3cdaf117cbe5b87c95e1fa1734fd1e00c04b617e38044e302531905ff3c286678399eb7031a9a27cbc6a23f90ee7a07bdd87e67b17f3edfbdd611222997c54c0979b205b8850ff4764ecbe9102d041d8547fbb726534e66a3a7a2f8ca09e65bb307871450a7b15c9448852a41dec6fbbb09e926bdd63ec32bcc6f0fb12baa9d30000166ba2d2afd67c69dc3c49c1b67f2c00a15cb03f07a59aaf4d9a67620897603705d634de329a95ebabdc687fb5d41621f11d201ae70fba0af13ef8fad52a45dcc382208478642c3612198e4013f89f419822c1686a09c6a17dddbc35e6b5f420a029a92988bae4792d5798a7aba727b1251852ebc7e48883a5d6170bc6c6d76878b3be1ab6d8c630a4ab7a48016df086a56e3b5fb1c72e366380cd6d831dbfbfe69a470578e77c9e47946fa1e5eebbb2470d686d44d2493c3cbad54b3d478b6bf6a4f6e4920d117f13b621f0436018d727dd5c195abb5343c2030c13606c68bc55ad6c6d981c0ffc526858e9239e3080f11013c3b2c785b433857ff1030041ad02d5ece7793d06d9149536474dde8a4370479fe3d0cc62e1d20f1e1165715d77abba2463483648e0dc04f7a4cda3cc021b8fde2088bd5a80d68b504de94e02ac26a74d431890e7afcc1683a1651beb82af5edf387362300cac61a3a1202e8da019daaf10356dc760bd7be59209d6e8dca6da7e34d72327bff05e8b3fca73bb2da86d98d9fda452caf7d8bfbb8bd0c41d3673e5f51e3de13f1e00fb7ca0c4c07f9f16099dd31e5876bcda0dca3400846508e03e75b50676b8cd0adee37f70c6bd5d1b2fc9a08fc868a12a8571a2eb96f5014f8d55a331bb110a74e98ef9b055015e3203b24a5cf9eff64d46395b7112e46a614eee5db4092560328040c2bda6aecb48bebad830e500e6e3c8cdb56a3a337fac42d4e477a168a4e5da642dd7d86d1f2d64e63e9a5bcf21ae25cfc6bd6c0edeeb6769ab093e26a77df6c40980cebfd67d9b59514f8ccd4714dff7769e92a5e302b3c9ea01b0b1bc4b1f5529327599509e119c421184dde32fbda898bd8eaf0dda8952821a2171518b9e97dfddd652889e9063d99b87a7be00e24e8cbe934ba7c80dd47d8ef4f2a0ea095dc5442f45df0d6d14924a667131203f55cd4c4338ada69a43af9924d34185d8c2e46493ef9187b60c00fc9bfd135dfe902bab31c495b46f23a77f80f3234ef4a9be073b1a9a4b549c7aad37b908be7c9ee9b3de0239274ff67a11de70378d1cede10b8239203f87e85a59d9cfd4d3c9c200db1f22d8178e5595d03b5d92aa39945e2f032687b7852b720abc9a81c02a6fadaa16ce0c6153ac3295d842bbd75dad08affd10511f30044044505ed20704df8f3268e33dff8015a46755a3be119d6162f7d25236a7130bc58aa5d4f8d4c886e1763e795c3378756a1aeeda4656053b862781eeef56854caa35b0f46a7e7d63f3a0775d2d353348b13585fb7abed8a2d58726f011ad5e05fc96c3c9e3c05db482d26a0b87469e062ec72394c7190e0e6ee67a124dee888</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
      <category term="无" scheme="https://unit-serow.github.io/categories/%E6%97%A0/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Coding-1</title>
    <link href="https://unit-serow.github.io/2020/03/15/coding-1/"/>
    <id>https://unit-serow.github.io/2020/03/15/coding-1/</id>
    <published>2020-03-15T08:43:22.000Z</published>
    <updated>2020-03-15T08:44:56.956Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --><center><strong>ASCII-1</strong></center><a id="more"></a><h3 id="编码-coding-1"><a href="#编码-coding-1" class="headerlink" title="编码(coding)-1"></a>编码(coding)-1</h3><ul><li>ASCII (American Standard Code for Information Interchange)</li><li>美国信息交换标准代码</li><li>美国标准信息交换代码是由美国国家标准学会 (American National Standard Institute/可简称为ANSI)所制定的标准</li><li>是一种标准的单字节字符编码方案，用于基于文本的数据</li><li>后来它被国际标准化组织 (International Organization for Standardization)，可简称为ISO，定为国际标准，称为ISO 646标准</li><li>适用于所有拉丁文字字母</li><li>ASCII标准表可参考下方文献</li><li>其存在的目的是为统一计算机领域的所有编码规则</li></ul><p><strong>编码</strong></p><ul><li>在计算机中，所有的数据在存储和运算时都要使用二进制数表示(因为计算机用高电平和低电平分别表示1和0)</li><li>例如，像a，b，c，d这样的52个字母(包括大写)以及0，1等数字还有一些常用的符号(例如<code>*</code>，<code>#</code>，<code>@</code>等)在计算机中存储时也要使用二进制数来表示</li><li>而具体用哪些二进制数字表示哪个符号，当然每个人都可以约定自己的一套，即为编码</li></ul><hr><ul><li>ASCII码使用指定的7位或8位的二进制组合来表示128或256种可能的字符</li><li>标准ASCII码也叫基础ASCII码，使用7位二进制数(剩下的1位二进制为0)来表示所有的大写和小写字母，数字0到9，标点符号，以及在美式英语中使用的特殊控制字符</li><li>按照指定的格式与规则给输入输出的信息进行指定的编码，本质就是将计算机内一切的数据和信息转换为二进制代码的不同组合，以便给予机器并让机器执行相应的指令</li></ul><hr><p><strong>ASCII码的基本规律:</strong></p><ul><li><p>0～31及127(共33个)是控制字符或通信专用字符(其余为可显示字符)，如控制符: LF(换行),CR(回车),FF(换页),DEL(删除),BS(退格),BEL(响铃)等</p><blockquote><p>通信专用字符: SOH(文头),EOT(文尾),ACK(确认)等<br>ASCII值为8,9,10和13分别转换为退格，制表，换行和回车字符<br>它们并没有特定的图形显示，但会依不同的应用程序，而对文本显示有不同的影响</p></blockquote></li><li><p>32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字</p></li><li><p>65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号，运算符号等</p></li><li><p>同时还要注意，在标准ASCII中，其最高位(b7)用作奇偶校验位</p><blockquote><p>所谓奇偶校验，是指在代码传送过程中用来检验是否出现错误的一种方法，一般分奇校验和偶校验两种<br>奇校验规定: 正确的代码一个字节中1的个数必须是奇数，若非奇数，则在最高位b7添1<br>偶校验规定: 正确的代码一个字节中1的个数必须是偶数，若非偶数，则在最高位b7添1</p></blockquote></li><li><p>后128个称为扩展ASCII码</p><blockquote><p>许多基于x86的系统都支持使用扩展(或”高”)ASCII<br>扩展ASCII码允许将每个字符的第8位用于确定附加的128个特殊符号字符，外来语字母和图形符号</p></blockquote></li></ul><hr><p><strong>涉及概念:</strong></p><ul><li>点阵</li><li>字库</li><li>点阵字库/字模(数据)</li><li>格式问题(UCS-2等)</li><li>码点</li><li>编码</li><li>Little endian/Big endian</li></ul><hr><p><strong>其它的编码系统</strong></p><ul><li>非ASCII编码</li><li>Unicode</li><li>UTF-8</li><li>中文编码</li></ul><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><strong>中文维基</strong></p><ul><li>ASCII<a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://zh.wikipedia.org/wiki/ASCII</code></p></blockquote></li><li>分类:字符集<a href="https://zh.wikipedia.org/wiki/Category:%E5%AD%97%E7%AC%A6%E9%9B%86" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://zh.wikipedia.org/wiki/Category:%E5%AD%97%E7%AC%A6%E9%9B%86</code></p></blockquote></li><li>分类: 编码<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A0%81</code></p></blockquote></li><li>字符编码<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81</code></p></blockquote></li><li>晶体结构<a href="https://zh.wikipedia.org/wiki/%E6%99%B6%E4%BD%93%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">跳转</a><blockquote><p><code>https://zh.wikipedia.org/wiki/%E6%99%B6%E4%BD%93%E7%BB%93%E6%9E%84</code></p></blockquote></li></ul><p><strong>百度百科</strong></p><blockquote><p><a href="https://baike.baidu.com/item/ASCII/309296?fr=aladdin" target="_blank" rel="noopener">跳转</a>-<code>https://baike.baidu.com/item/ASCII/309296?fr=aladdin</code><br><a href="https://baike.baidu.com/item/%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86/20837166?fr=aladdin" target="_blank" rel="noopener">跳转</a>-<code>https://baike.baidu.com/item/%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86/20837166?fr=aladdin</code></p></blockquote><p><strong>CSDN</strong></p><blockquote><p><a href="https://baike.baidu.com/item/%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86/20837166?fr=aladdin" target="_blank" rel="noopener">跳转</a>-<code>https://blog.csdn.net/exbob/article/details/6532772?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</code><br><a href="https://blog.csdn.net/yuanwofei/article/details/12846331" target="_blank" rel="noopener">跳转</a>-<code>https://blog.csdn.net/yuanwofei/article/details/12846331</code><br><a href="https://blog.csdn.net/Deft_MKJing/article/details/79460485" target="_blank" rel="noopener">跳转</a>-<code>https://blog.csdn.net/Deft_MKJing/article/details/79460485</code></p></blockquote><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;ASCII-1&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Coding" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/Coding/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>学习</title>
    <link href="https://unit-serow.github.io/2020/03/14/%E5%AD%A6%E4%B9%A0/"/>
    <id>https://unit-serow.github.io/2020/03/14/%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-03-14T14:41:41.000Z</published>
    <updated>2020-03-14T14:46:48.594Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --><center><strong>主观-学习</strong></center><a id="more"></a><h3 id="开放性随笔"><a href="#开放性随笔" class="headerlink" title="开放性随笔"></a>开放性随笔</h3><ul><li>所谓的智商来源于学识</li><li>而智慧来源于环境，世界，精力/经验其次是学识</li><li>然而所谓的智商，只不过是给予懒惰者的万千个借口之一而已</li><li>只是强者给予弱者的某一个心里安慰或者是弱者自己寻求的理由而已</li><li>学习不仅要勤奋，还要明志，指向明确，方向稳定</li><li>明确自己的定位，明确自己所能接受的范围，明确自己当前的能力限制</li><li>在步步为营的前提下，去进行逻辑性的累积</li><li>利用绝对的理智去找对方向与指明道路，珍惜时间，时刻行动</li></ul><hr><ul><li>学习的本质只不过就是机械化的练习，记忆，理解与实践</li><li>伴随机械化记忆而形成的是对所学概念或知识的通透性理解</li><li>而学习和练习即为行动</li></ul><hr><ul><li>哲学不是存在于现实的，或称不是存在于现代的<blockquote><p>或称存在于现实间的哲学，对于现代人类最基本的生存，生命与现实存在的保证而言(生存的本能)，没有任何意义和相关性</p></blockquote></li><li>纯粹的哲学家可能早就被饿死了</li><li>任何学识和智慧都要提现和实现在现实层面之上</li><li>最基本的条件是需要保证自己于现实间的实际存在</li></ul><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;主观-学习&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="无" scheme="https://unit-serow.github.io/categories/%E6%97%A0/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔-2020-03-14</title>
    <link href="https://unit-serow.github.io/2020/03/14/%E9%9A%8F%E7%AC%94-2020-03-14/"/>
    <id>https://unit-serow.github.io/2020/03/14/%E9%9A%8F%E7%AC%94-2020-03-14/</id>
    <published>2020-03-14T08:01:16.000Z</published>
    <updated>2020-03-16T12:20:59.824Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d6d6a2999ed2b5806014791837ffd7465230f852ec5d4ebaab6339cf199c34d1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      加密文案
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-7</title>
    <link href="https://unit-serow.github.io/2020/03/14/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-7/"/>
    <id>https://unit-serow.github.io/2020/03/14/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-7/</id>
    <published>2020-03-14T03:55:04.000Z</published>
    <updated>2020-03-16T17:21:04.634Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --><center><strong>数据类型-语句/控制语句-3</strong></center><a id="more"></a><h3 id="数据类型-7"><a href="#数据类型-7" class="headerlink" title="数据类型-7"></a>数据类型-7</h3><ul><li><p>条件选择语句(控制语句)</p><blockquote><p>if，if…else，else…if，switch，switch…break，switch…if…else语句<br>continue…break<br>goto</p></blockquote></li><li><p>头文件及函数</p><blockquote><p>ctype.h，iso646.h<br>getchar()，putchar()</p></blockquote></li><li><p>其它概念</p></li></ul><hr><p><strong>涉及内容:</strong></p><ul><li>条件选择语句-if/if…else</li><li>getchar()与putchar()方法</li><li>ctype.h头文件/iso646.h头文件</li><li>多重选择语句-else…if</li><li>选择语句配对规则</li><li>逻辑运算符及其优先级，求值顺序与范围</li><li>条件运算符-?:</li><li>循环辅助: continue语句和break语句</li><li>多重选择: switch语句和break语句</li><li>多重标签: switch语句和if…else语句</li><li>跳转标识符: goto</li><li>其它内容(补充内容/关键概念梳理/文章内涉及概念总结)</li><li>有可能会在数据结构-8内进行补充</li></ul><hr><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><ul><li><p>IF语句</p></li><li><p>if语句被称为分支语句(branching statement)或选择语句(selection statement)</p><blockquote><p>因为它相当于一个交叉点，程序要在两条分支中选择一条执行</p></blockquote></li><li><p>if语句的通用形式如下:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( <span class="name">expression</span> )</span><br><span class="line">statement</span><br></pre></td></tr></table></figure></li><li><p>如果对expression求值为真(非0)，则执行statement</p><blockquote><p>否则，跳过statement</p></blockquote></li><li><p>与while循环一样，statement可以是一条简单语句或复合语句</p></li><li><p>if语句的结构和while语句很相似</p><blockquote><p>它们的主要区别是: 如果满足条件可执行的话，if语句只能测试和执行一次，而while语句可以测试和执行多次</p></blockquote></li><li><p>通常，expression是关系表达式</p><blockquote><p>即比较两个量的大小(如，表达式 x &gt; y 或 c == 6)<br>如果expression为真(即x大于y，或c == 6)，则执行statement<br>否则，忽略statement</p></blockquote></li><li><p>概括地说，可以使用任意表达式，表达式的值为0则为假</p></li><li><p>statement部分可以是一条简单语句或者是一条用花括号括起来的复合语句(或块)</p></li></ul><hr><h3 id="IF…ELSE"><a href="#IF…ELSE" class="headerlink" title="IF…ELSE"></a>IF…ELSE</h3><ul><li><p>简单形式的if语句可以让程序选择执行一条语句，或者跳过这条语句</p></li><li><p>C 还提供了if else形式，可以在两条语句之间作选择</p></li><li><p>if else语句的通用形式是：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="comment">( expression )</span></span><br><span class="line">   stateme<span class="symbol">nt1</span></span><br><span class="line">else</span><br><span class="line">   stateme<span class="symbol">nt2</span></span><br></pre></td></tr></table></figure></li><li><p>如果expression为真(非0)，则执行statement1</p><blockquote><p>如果expression为假或 0，则执行else后面的statement2<br>statement1和statement2可以是一条简单语句或复合语句<br>C并不要求一定要缩进，但这是标准风格<br>缩进让根据测试条件的求值结果来判断执行哪部分语句一目了然</p></blockquote></li><li><p>如果要在if和else之间执行多条语句，必须用花括号把这些语句括起来成为一个块</p><blockquote><p>下面的代码结构违反了C语法，因为在if和else之间只允许有一 条语句(简单语句或复合语句):</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Incrementing x:\n"</span>);</span><br><span class="line">   x++;</span><br><span class="line"><span class="keyword">else</span>　　　<span class="comment">// 将产生一个错误</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"x &lt;= 0 \n"</span>);</span><br></pre></td></tr></table></figure></li><li><p>编译器把printf()语句视为if语句的一部分，而把x++;看作一条单独的语句</p><blockquote><p>它不是if语句的一部分<br>然后，编译器发现else并没有所属的if，这是错误的</p></blockquote></li><li><p>上面的代码应该这样写:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Incrementing x:\n"</span>);</span><br><span class="line">   x++;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"x &lt;= 0 \n"</span>);</span><br></pre></td></tr></table></figure></li><li><p>if语句用于选择是否执行一个行为，而else if语句用于在两个行为之间选择</p></li><li><p>if语句和if else语句的执行逻辑示意图</p></li></ul><img src="/images/数据类型-7/IF语句1.png" width="30%" height="30%"> <img src="/images/数据类型-7/IF...ELSE语句-1.png" width="30%" height="30%"><hr><p><strong>未完成</strong></p><hr><h3 id="getchar-putchar"><a href="#getchar-putchar" class="headerlink" title="getchar()/putchar()"></a>getchar()/putchar()</h3><ul><li>字符输入/输出函数getchar()和putchar()<blockquote><p>同样可用作输入/输出的函数还有scanf()和printf()根据%c转换说明来进行对字符的读写</p></blockquote></li></ul><p><strong>getchar()</strong></p><ul><li><p>getchar()函数不带任何参数，它从输入队列中返回下一个字符</p><blockquote><p>例如: ch=getchar();，它与scanf(“%c”, &amp;ch);的作用相同</p></blockquote></li><li><p>putchar()函数用于打印它的参数</p><blockquote><p>例如: putchar(ch);，该语句用于将之前赋给ch的值作为字符打印出来<br>该语句与printf(“%c”, ch);相同</p></blockquote></li><li><p>由于这些函数只用于处理字符，所以它们比通用的scanf()和printf()函数更快，更简介</p><blockquote><p>而且还有一点，getchar()和putchar()函数不需要进行转换说明，因为它们只处理字符<br>这两个函数通常定义在stdio.h头文件中(而且它们通常是预处理宏，而不是真正在宏观意义上的函数，这里先不对类似于宏的函数进行深入赘述)</p></blockquote></li><li><p>语句putchar(ch + 1);</p><blockquote><p>表示了字符实际上是作为整数而存储于内存之中的<br>为方便计算，表达式ch + 1中的ch被转换成int类型，然后int类型的计算结果被传递给接受一个int类型参数的putchar()<br>该函数只根据最后一个字节确定显示哪个字符</p></blockquote></li></ul><hr><h3 id="ctype-h系列的字符函数"><a href="#ctype-h系列的字符函数" class="headerlink" title="ctype.h系列的字符函数"></a>ctype.h系列的字符函数</h3><ul><li><p>斜杠字符对应的ASCII码比点号的ASCII码多1</p><blockquote><p>如果程序 只转换字母，保留所有的非字母字符(不只是空格)会更好</p></blockquote></li><li><p>C 有一系列专门处理字符的函数，ctype.h头文件包含了这些函数的原型</p><blockquote><p>这些函数接受一个字符作为参数，如果该字符属于某特殊的类 别，就返回一个非零值(真)<br>否则，返回0(假)<br>例如，如果isalpha()函数的参数是一个字母，则返回一个非零值</p></blockquote></li><li><p>有些函数涉及本地化，指的是为适应特定区域的使用习惯修改或扩展 C 基本用法的工具(例如，许多国家在书写小数点时，用逗号代替点号，于是特殊的本地化可以指定C编译器使用逗号以相同的方式输出浮点数，这样123.45可以显示为 123,45)</p><blockquote><p>注意，字符映射函数不会修改原始的参数，这些函数只会返回已修改的值</p></blockquote></li><li><p>ctype.h头文件中的字符测试函数列表和头文件中的字符映射函数这里不做赘述</p></li></ul><hr><p><strong>多重选择else…if</strong></p><ul><li>else if 是 if else 语句的变式</li><li>else部分包含另一个if else语 句，该if else语句的else部分又包含另一个if else语句<blockquote><p>第2个if else语句嵌套 在第 1个if else语句中<br>第3个if else语句嵌套在第2个if else语句中</p></blockquote></li><li>对于编译器的限制范围，C99标准要求编译器最少支持127层套嵌</li></ul><hr><p><strong>else…if的配对机制</strong></p><ul><li>规则是，如果没有花括号，else与离它最近的if匹配，除非最近的if被花括号括起来</li></ul><p><strong>图片说明:</strong></p><ul><li>if else匹配的规则:</li></ul><img src="/images/数据类型-7/if else匹配的规则-1.png" width="40%" height="40%"> <img src="/images/数据类型-7/if else匹配的规则-2.png" width="40%" height="40%"><ul><li>注意: 要缩进”语句”，”语句”可以是一条简单语句或复合语句</li></ul><hr><p><strong>多层嵌套的if语句</strong></p><ul><li>if…else if…else序列是嵌套if的一种形式，从一系列选项中选 择一个执行<blockquote><p>有时，选择一个特定选项后又引出其他选择，这种情况可以使 用另一种嵌套if</p></blockquote></li></ul><hr><ul><li><p>小结：用if语句进行选择</p><blockquote><p>关键字：if，else</p></blockquote></li><li><p>一般注解:</p><blockquote><p>下面各形式中，statement可以是一条简单语句或复合语句<br>表达式为真说明其值是非零值</p></blockquote></li><li><p>形式1:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">expression</span>)</span><br><span class="line">statement</span><br></pre></td></tr></table></figure><blockquote><p>如果expression为真，则执行statement部分</p></blockquote></li><li><p>形式2：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="comment">(expression)</span></span><br><span class="line">stateme<span class="symbol">nt1</span></span><br><span class="line">else</span><br><span class="line">stateme<span class="symbol">nt2</span></span><br></pre></td></tr></table></figure><blockquote><p>如果expression为真，执行statement1部分<br>否则，执行statement2部分</p></blockquote></li><li><p>形式3:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="comment">(expression1)</span></span><br><span class="line">stateme<span class="symbol">nt1</span></span><br><span class="line">else <span class="keyword">if</span> <span class="comment">(expression2)</span></span><br><span class="line">stateme<span class="symbol">nt2</span></span><br><span class="line">else</span><br><span class="line">stateme<span class="symbol">nt3</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果expression1为真，执行statement1部分<br>如果expression2为真，执行 statement2部分<br>否则，执行statement3部分</p></blockquote><ul><li>示例:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (legs == <span class="number">4</span>)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"It might be a horse.\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (legs &gt; <span class="number">4</span>)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"It is not a horse.\n"</span>);</span><br><span class="line"><span class="keyword">else</span>　　 <span class="comment">// 如果legs &lt; 4 </span></span><br><span class="line">&#123;</span><br><span class="line">   legs++;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Now it has one more leg.\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="补充内容-1"><a href="#补充内容-1" class="headerlink" title="补充内容-1"></a>补充内容-1</h3><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>if语句和while语句通常使用关系表达式作为测试条件</p><blockquote><p>有时则需要将多个关系表示组合起来用，此时则需要使用逻辑运算符，并使用点符号<code>&#39;.&#39;</code>来标识句子的末尾</p></blockquote></li><li><p>逻辑运算符两侧的条件必须都为真，整个表达式才为真</p><blockquote><p>逻辑运算符的优先级比关系运算符低，所以不必在子表达式两侧加圆括号</p></blockquote></li><li><p>C 内有三种逻辑运算符，如下表图片:</p></li><li><p>三种逻辑运算符:</p></li></ul><img src="/images/数据类型-7补充图片/三种逻辑运算符-1.png" width="40%" height="40%"><hr><ul><li>举例说明:</li><li>假设exp1和exp2是两个简单的关系表达式(如car &gt; rat或debt == 1000)<blockquote><p>那么:<br>当且仅当exp1和exp2都为真时，exp1 &amp;&amp; exp2才为真<br>如果exp1或exp2为真，则exp1 || exp2为真<br>如果exp1为假，则!exp1为真；如果exp1为真，则!exp1为假</p></blockquote></li></ul><hr><p><strong>iso646.h头文件</strong></p><ul><li><p>C 是在美国用标准美式键盘开发的语言，但在世界各地，并非所有键盘都有和美式键盘一样的符号</p><blockquote><p>因此，C99标准增加了可代替逻辑运算符的拼写，并且将其定义于iso646.h头文件中<br>如果在程序中包含该头文件，便 可用and代替&amp;&amp;、or代替||、not代替!</p></blockquote></li><li><p>逻辑运算符对应的拼写如下表图片:</p></li><li><p>逻辑运算符的备选拼写:</p></li></ul><img src="/images/数据类型-7补充图片/逻辑运算符的备选拼写-1.png" width="40%" height="40%"><ul><li><p>在新增的C99和C11的标准ANSI C库内列出了一些其它运算符的备选拼写</p></li><li><p>!运算符的优先级很高，比乘法运算符还高，与递增运算符的优先级相同，只比圆括号的优先级低</p></li><li><p>&amp;&amp;运算符的优先级比||运算符高，但是两者的优先级都比关系运算符低，比赋值运算符高</p><blockquote><p>因此，表达式a &gt; b &amp;&amp; b &gt; c || b &gt; d相当于((a &gt; b) &amp;&amp; (b &gt; c)) || (b &gt; d)<br>也就是说，b介于a和c之间，或者b大于d<br>尽管对于该例没必要使用圆括号，但是许多程序员更喜欢使用带圆括号的第2种写法<br>这样做即使不记得逻辑运算符的优先级，表达式的含义也很清楚</p></blockquote></li></ul><hr><p><strong>有关求值顺序</strong></p><ul><li><p>除了两个运算符共享一个运算对象的情况外，C 通常不保证先对复杂表达式中哪部分求值</p></li><li><p>例如下面的语句，可能先对表达式5+3求值，也可能先对表达式9+6求值:</p><blockquote><p><code>apples = (5 + 3) * (9 + 6);</code></p></blockquote></li><li><p>C 把先计算哪部分的决定权留给编译器的设计者，以便针对特定系统优化设计</p><blockquote><p>但是，对于逻辑运算符是个例外，C保证逻辑表达式的求值顺序是从左往右<br>&amp;&amp;和||运算符都是序列点，所以程序在从一个运算对象执行到下一个运算对象之前，所有的副作用都会生效<br>而且，C 保证一旦发现某个元素让整个表达式无效，便立即停止求值<br>正是由于有这些规定，才能写出这样结构的代码:<br><code>while ((c = getchar()) != &#39; &#39; &amp;&amp; c != &#39;\n&#39;)</code><br>如上代码所示，读取字符直至遇到第1个空格或换行符<br>第1 个子表达 式把读取的值赋给c，后面的子表达式会用到c的值<br>如果没有求值循序的保证，编译器可能在给c赋值之前先对后面的表达式求值</p></blockquote></li><li><p>这里还有一个例子:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">number</span> != <span class="number">0</span> <span class="symbol">&amp;&amp;</span> <span class="number">12</span>/number == <span class="number">2</span>)</span><br><span class="line">printf(<span class="string">"The number is 5 or 6.\n"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果number的值是0，那么第1个子表达式为假，且不再对关系表达式求值<br>这样避免了把0作为除数<br>许多语言都没有这种特性，知道number为0后，仍继续检查后面的条件</p></blockquote></li><li><p>最后，考虑这个例子：</p><blockquote><p><code>while ( x++ &lt; 10 &amp;&amp; x + y &lt; 20)</code><br>实际上，&amp;&amp;是一个序列点，这保证了在对&amp;&amp;右侧的表达式求值之前已经递增了x</p></blockquote></li></ul><hr><p><strong>内容简述:</strong></p><ul><li><p>逻辑表达式:</p><blockquote><p>当且仅当expression1和expression2都为真，expression1 &amp;&amp; expression2才为真<br>如果 expression1 或 expression2 为真，expression1 || expression2 为 真<br>如果expression为假，!expression则为真，反之亦然</p></blockquote></li><li><p>求值顺序:</p></li><li><p>逻辑表达式的求值顺序是从左往右</p><blockquote><p>一旦发现有使整个表达式为假的因 素，立即停止求值</p></blockquote></li><li><p>示例：</p><blockquote><p><code>6 &gt; 2 &amp;&amp; 3 == 3</code> 真<br><code>!(6 &gt; 2 &amp;&amp; 3 == 3)</code> 假<br><code>x != 0 &amp;&amp; (20 / x) &lt; 5</code> 只有当x不等于0时，才会对第2个表达式求值</p></blockquote></li><li><p>有关范围问题:</p><blockquote><p>&amp;&amp;运算符与islower()函数可用于测试范围</p></blockquote></li></ul><hr><h3 id="条件运算符-三元运算符"><a href="#条件运算符-三元运算符" class="headerlink" title="条件运算符/三元运算符"></a>条件运算符/三元运算符</h3><ul><li><p>C 提供条件表达式(conditional expression)作为表达if else语句的一种便捷方式</p></li><li><p>该表达式使用<code>? :</code>条件运算符</p><blockquote><p>该运算符分为两部分，需要三个运算对象<br>带一个运算对象的运算符称为一元运算符，带两个运算对象的运算符称为二元运算符<br>以此类推，带三个运算对象的运算符称为三元运算符<br>条件运算符是 C 中唯一的三元运算符</p></blockquote></li><li><p>条件表达式的通用形式如下:</p><blockquote><p><code>expression1 ? expression2 : expression3</code><br>如果 expression1 为真(非 0)，那么整个条件表达式的值与 expression2 的值相同<br>如果expression1为假(0)，那么整个条件表达式的值与 expression3的值相同</p></blockquote></li><li><p>需要把两个值中的一个赋给变量时，就可以用条件表达式</p><blockquote><p>典型的例子是，把两个值中的最大值赋给变量:<br><code>max = (a &gt; b) ? a : b;</code><br>如果a大于b，那么将max设置为a<br>否则，设置为b<br>通常，条件运算符完成的任务用 if else 语句也可以完成<br>但是，使用条件运算符的代码更简洁，而且编译器可以生成更紧凑的程序代码</p></blockquote></li></ul><hr><h3 id="循环辅助-continue-amp-break"><a href="#循环辅助-continue-amp-break" class="headerlink" title="循环辅助-continue&amp;break"></a>循环辅助-continue&amp;break</h3><ul><li>一般而言，程序进入循环后，在下一次循环测试之前会执行完循环体中的所有语句</li><li>而continue和break语句可以根据循环体中的测试结果来忽略一部分循环内容，甚至结束循环</li></ul><p><strong>continue语句</strong></p><ul><li><p>3种循环都可以使用continue语句</p><blockquote><p>执行到该语句时，会跳过本次迭代的剩余部分，并开始下一轮迭代<br>如果continue语句在嵌套循环内，则只会影响包含该语句的内层循环</p></blockquote></li><li><p>有两种方法可以避免使用continue</p><blockquote><p>一是省略continue，即为把剩余部分放在一个else块中<br>这种情况下，使用continue的好处是减少主语句组中的一级缩进<br>当语句很长或嵌套较多时，紧凑简洁的格式提高了代码的可读性<br>另一种方式是把if的测试条件的关系反过来便可避免使用continue<br>需要根据程序的实际情况而定</p></blockquote></li><li><p>continue还可用作占位符</p><blockquote><p>例如将循环读取并丢弃输入的数据， 直至读到行末尾<br>当程序已经读取一行中的某些内容，要跳至下一行开始处时，这种用法很方便<br>问题是，一般很难注意到一个单独的分号<br>如果使用continue，可读性会更高<br>如果用了continue没有简化代码反而让代码更复杂，就不要使用continue</p></blockquote></li><li><p>从何处开始继续循环:</p><blockquote><p>以上介绍了continue语句让程序跳过循环体的余下部分<br>对于while和 do while 循环，执行 continue 语句后的下一个行为是对循环的测试表达式求值</p></blockquote></li></ul><p><strong>break语句</strong></p><ul><li><p>程序执行到循环中的break语句时，会终止包含它的循环，并继续执行下一阶段</p><blockquote><p>但如果break语句位于嵌套循环内，它只会影响包含它的当前循环</p></blockquote></li><li><p>以下两张图片比较了break和continue</p></li></ul><img src="/images/数据类型-7补充图片/break和continue-1.png" width="40%" height="40%"> <img src="/images/数据类型-7补充图片/break和continue-2.png" width="40%" height="40%"><ul><li>break还可用于因其他原因退出循环的情况</li><li>和continue一样，如果用了break代码反而更复杂，就不要使用break</li><li>break语句对于稍后讨论的switch语句而言至关重要<blockquote><p>在for循环中的break和continue的情况不同<br>执行完break语句后会直接执行循环后面的第1条语句，连更新部分也跳过<br>嵌套循环内层的break只会让程序跳出包含它的当前循环，要跳出外层循环还需要一个break</p></blockquote></li></ul><hr><h3 id="多重选择"><a href="#多重选择" class="headerlink" title="多重选择"></a>多重选择</h3><ul><li>使用条件运算符和 if else 语句很容易编写二选一的程序<blockquote><p>然而，有时程序需要在多个选项中进行选择<br>可以用if else if…else来完成<br>但是大多数情况下使用switch语句更方便</p></blockquote></li></ul><p><strong>switch的工作原理分析</strong></p><ul><li><p>要对紧跟在关键字 switch 后圆括号中的表达式求值</p><blockquote><p>break语句让程序离开switch语句，跳至switch语 句后面的下一条语句<br>如果没有break语句，就会从匹配标签开始执行到switch末尾</p></blockquote></li><li><p>break语句可用于循环和switch语句中，但是continue只能用于循环中</p><blockquote><p>尽管如此，如果switch语句在一个循环中，continue便可作为 switch语句的一部分<br>这种情况下，就像在其他循环中一样，continue让程序跳出循环的剩余部分，包括switch语句的其他部分</p></blockquote></li><li><p>switch语句和Pascal的case语句类似</p><blockquote><p>它们最大的区别在于，如果只希望处理某个带标签的语句，就必须在switch语句中使用break语句<br>另外，C 的case一般都指定一个值，不能使用一个范围</p></blockquote></li><li><p>switch在圆括号中的测试表达式的值应该是一个整数值(包括char类型)</p></li><li><p>case标签必须是整数类型(包括char类型)的常量或整型常量表达式(即表达式中只包含整型常量)</p><blockquote><p>不能用变量作为case标签</p></blockquote></li><li><p>switch的构造如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch ( 整型表达式)</span><br><span class="line">&#123;</span><br><span class="line">case 常量1:</span><br><span class="line">语句&lt;--可选</span><br><span class="line">case 常量2:</span><br><span class="line">语句&lt;--可选</span><br><span class="line">default :&lt;--可选</span><br><span class="line">语句&lt;--可选</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于程序只读每行的首字符的情况这里不做多余赘述</p></li></ul><hr><p><strong>有关多重标签</strong></p><ul><li>可以在switch语句中使用多重case标签</li><li>如果使用ctype.h系列的toupper()函数可以避免 使用多重标签</li></ul><hr><p><strong>有关switch和if else</strong></p><ul><li>关于何时使用switch与何时使用if else<blockquote><p>如果是根据浮 点类型的变量或表达式来选择，就无法使用 switch<br>如果根据变量在某范围内决定程序流的去向，使用 switch 就很麻烦<br>这种情况用if就很方便:<br><code>if (integer &lt; 1000 &amp;&amp; integer &gt; 2)</code></p></blockquote></li><li>使用switch要涵盖以上范围，需要为每个整数(3～999)设置case标签<blockquote><p>但是，如果使用switch，程序通常运行快一些，生成的代码少一些</p></blockquote></li></ul><hr><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><ul><li><p>早期版本的BASIC和FORTRAN所依赖的goto语句，在C中仍然可用</p><blockquote><p>但 是C和其他两种语言不同，没有goto语句C程序也能运行良好<br>Kernighan和 Ritchie提到goto语句”易被滥用”，并建议”谨慎使用，或者根本不用”</p></blockquote></li><li><p>goto语句有两部分: goto和标签名</p></li><li><p>标签的命名遵循变量命名规则如下所示:</p><blockquote><p><code>goto part2;</code></p></blockquote></li><li><p>要让这条语句正常工作，函数还必须包含另一条标为part2的语句</p><blockquote><p>该语句以标签名后紧跟一个冒号开始:<br><code>part2: printf(&quot;Refined analysis:\n&quot;);</code></p></blockquote></li></ul><p><strong>避免使用goto</strong></p><ul><li><p>原则上，根本不用在C程序中使用goto语句</p><blockquote><p>但在FORTRAN或BASIC内，goto对这两种语言而言都必不可少，而且还会依赖用goto来编程<br>对于以前的BASIC和FORTRAN，只有直接跟在if条件后面的一条语句才属于if<br>不能使用块或复合语句</p></blockquote></li><li><p>跳转至循环末尾，并开始下一轮迭代</p><blockquote><p>C使用continue语句代替跳出循环</p></blockquote></li><li><p>C使用break语句</p><blockquote><p>实际上，break和continue是goto的特殊形式<br>使用break和continue的好处是: 其名称已经表明它们的用法，而且这些语句不使用标签<br>所以不用担心把标签放错位置导致的危险<br>胡乱跳转至程序的不同部分</p></blockquote></li><li><p>但是，C程序员可以接受一种goto的用法: 出现问题时从一组嵌套循环中跳出(一条break语句只能跳出当前循环)</p></li><li><p>不去使用goto的多个理由:</p><blockquote><p>程序中使用其他形式比使用goto的条理更清晰<br>当多种情况混在一起时，这种差异更加明显<br>哪些goto语句可以帮助if 语句? 哪些可以模仿if else? 哪些控制循环?<br>哪些是因为程序无路可走才不得已放在那里?<br>过度地使用goto语句，会让程序错综复杂<br>如果不熟悉goto语句，就不要使用它<br>如果已经习惯使用goto语句，试着改掉这个毛病<br>讽刺地是，虽然C根本不需要goto，但是它的goto比其他语言的goto好用<br>因为 C允许在标签中使用描述性的单词而不是数字</p></blockquote></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ul><li><p>CN/PDF-C Primer Plus【第6版】</p><blockquote><p>[美] Stephen Prata | 著/姜佑 | 译<br>截止至原书第七章末尾-496页(一共1635页)<br>C 控制语句: 分支和跳转-7.10/7.12</p></blockquote></li><li><p>数据类型-1~数据类型-7</p><blockquote><p>C11/ANSI C/ISO C</p></blockquote></li></ul><hr><ul><li>接下来的内容会以 C 冠名</li></ul><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;数据类型-语句/控制语句-3&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="C/C++" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/C-C/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="C" scheme="https://unit-serow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-6</title>
    <link href="https://unit-serow.github.io/2020/03/13/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-6/"/>
    <id>https://unit-serow.github.io/2020/03/13/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-6/</id>
    <published>2020-03-13T05:13:26.000Z</published>
    <updated>2020-03-13T05:15:52.575Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --><center><strong>数据类型-语句/控制语句-2</strong></center><a id="more"></a><h2 id="数据类型-6"><a href="#数据类型-6" class="headerlink" title="数据类型-6"></a>数据类型-6</h2><ul><li>循环结构内容补充(控制结构)<blockquote><p>for循环<br>do while循环<br>数组与循环<br>函数与循环<br>其它赋值运算符</p></blockquote></li></ul><hr><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li><p>for循环将循环语句最基本的三种行为(初始化，测试和更新)组合在一处</p><blockquote><p>其基本的语法格式为: <code>for (xxx;xxx;xxx){}</code></p></blockquote></li><li><p>关键字for后面的圆括号中的若干个表达式用分号相隔，一般在圆括号中会有至少三个表达式</p></li><li><p>即为初始化表达式，测试条件表达式，更新执行表达式</p><blockquote><p>还可将其称之为包含了循环所需的所有信息: 所选变量的初值，所选变量的终值，所选变量的循环条件(条件表达式或为自增或自减)</p></blockquote></li><li><p>在花括号内可以添加简单语句和复合语句</p></li><li><p>测试表达式的值为真时则继续循环，为假时则停止循环，其它关于的循环基本概念在<a href="http://unit-serow.com/2020/03/12/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-5/#more" target="_blank" rel="noopener">数据类型-5</a>内有详细介绍</p></li><li><p>还可以将for语句圆括号内的表达式称之为控制表达式，它们都是完整的表达式，所以每个表达式的副作用(例如递增变量之类的)都发生在对下一个表达式求值之前</p></li></ul><p><strong>for循环的结构图示</strong></p><ul><li>for循环的结构:</li></ul><img src="/images/数据结构-6/for循环的结构-1.png" width="40%" height="40%"><hr><p><strong>利用C 内 for的灵活性</strong></p><ul><li><p>虽然for循环看上去和FORTRAN的DO循环，Pascal的FOR循环，ASIC 的FOR…NEXT循环类似</p><blockquote><p>但是for循环比这些循环灵活<br>这些灵活性源于如何使用for循环中的3个表达式<br>即为: 1-初始值(变量经由初始化得到的值)，2-条件表达式，3-返回类型所需要执行的某种方法(或称其为每次迭代需要执行的条件)<br>第3个表达式可以使用任意合法的表达式<br>无论是什么表达式，每次迭代都会更新该表达式的值<br>for循环中的3个表达式可以是不同的变量(注意，虽然该例可以正常运行，但是编程风格不太好，如果不在更新部分加入代数计算，程序会更加清楚)<br>可以省略一个或多个表达式(但是不能省略分号)，只要在循环中包含能结束循环的语句即可<br>这句话的意思就是，可以不在圆括号内写条件的表达式，而在for()代码行下对for语句进行说明，此时被进行说明的语句必须带有结束表示分号<br>有没有花括号无所谓，添加花括号的理由是为了让代码更整洁且直观<br>这样使用for循环确实很像其他语言的循环<br>除此之外，C 的for循环还有其他9种用法</p></blockquote></li><li><p>需要注意的要点-1: 在执行循环的其他部分之前，只对第一个表达式求值一次或执行一次</p></li><li><p>同时对于循环体中的行为可以改变循环头中的表达式，此时需要用到if语句与选择语句的概念，即为在for语句中添加复合语句，该复合语句用于执行if等条件选择语句，也可称该复合语句为代码块</p></li><li><p>for语句的一般形式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( initialize; test; <span class="keyword">update</span> )</span><br><span class="line"><span class="keyword">statement</span></span><br></pre></td></tr></table></figure><p>在test为假或0之前，重复执行statement部分</p></li><li><p>示例语句:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for (<span class="built_in">n</span> = <span class="number">0</span>; <span class="built_in">n</span> &lt; <span class="number">10</span> ; <span class="built_in">n</span>++)</span><br><span class="line">printf(<span class="string">" %d %d\n"</span>, <span class="built_in">n</span>, <span class="number">2</span> * <span class="built_in">n</span> + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="其它赋值运算符"><a href="#其它赋值运算符" class="headerlink" title="其它赋值运算符"></a>其它赋值运算符</h2><ul><li><p>包括<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code></p></li><li><p>C有许多赋值运算符</p><blockquote><p>最基本，最常用的是=，它把右侧表达式的值赋给左侧的变量<br>其他赋值运算符都用于更新变量，其用法都是左侧是一个变量名，右侧是一个表达式<br>赋给变量的新值是根据右侧表达式的值调整后的值<br>而确切的调整方案取决于具体的运算符</p></blockquote></li><li><p>例如:</p><blockquote><p><code>scores += 20</code> 与 <code>scores = scores + 20</code> 相同<br><code>dimes -= 2</code> 与 <code>dimes = dimes - 2</code> 相同<br><code>bunnies *= 2</code> 与 <code>bunnies = bunnies * 2</code> 相同<br><code>time /= 2.73</code> 与 <code>time = time / 2.73</code> 相同<br><code>reduce %= 3</code> 与 <code>reduce = reduce % 3</code> 相同</p></blockquote></li><li><p>上述所列的运算符右侧都使用了简单的数，还可以使用更复杂的表达式</p></li><li><p>例如：</p><blockquote><p><code>x *= 3 * y + 12 与 x = x * (3 * y + 12)</code> 相同</p></blockquote></li><li><p>以上提到的赋值运算符与<code>=</code>的优先级相同，即比<code>+</code>或<code>*</code>优先级低</p><blockquote><p>上面最后一个例子也反映了赋值运算符的优先级，<code>3 * y</code>先与<code>12</code>相加，再把计算结果与<code>x</code>相乘，最后再把乘积赋给x<br>并非一定要使用这些组合形式的赋值运算符<br>但是，它们让代码更紧凑，而且与一般形式相比，组合形式的赋值运算符生成的机器代码更高效<br>当需要在<code>for</code>循环中塞进一些复杂的表达式时，这些组合的赋值运算符特别有用</p></blockquote></li><li><p>通常在for的循环头内就能完成大量的工作</p></li></ul><hr><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><ul><li><p>逗号运算符扩展了for循环的灵活性，以便在循环头中包含更多的表达式</p></li><li><p>基本使用语法:</p><blockquote><p><code>for (ounces = 1, cost = FIRST_OZ; ounces &lt;= 16; counces++,cost += NEXT_OZ)</code><br>这里的<code>FIRST_OZ</code>和<code>NEXT_OZ</code>是常量数据类型，<code>NEXT_O</code>的值是20<br>在初始化表达式中使用了逗号来对ounces和cost都进行了初始化<br>同时也在更新表达式中使用逗号来表示每次执行迭代时ounces递增1与cost递增20(因为<code>NEXT_Z</code>的值是20)</p></blockquote></li><li><p>逗号运算符的作用就是在同一个表达式区块内进行多组条件的声明</p><blockquote><p>比如在初始化表达式区块中，同时对两个变量进行初始化，或者在更新表达式中声明两个不同的变量在迭代时使用的规则与条件</p></blockquote></li><li><p>逗号运算符并不局限于在for循环中使用，但是这是它最常用的地方</p><blockquote><p>逗号运算符有两个其他性质<br>首先，它保证了被它分隔的表达式从左往右求值(换言之，逗号是一个序列点，所以逗号左侧项的所有副作用都在程序执行逗号右侧项之前发生)<br>因此，ounces在cost之前被初始化<br>在该例中， 顺序并不重要，但是如果cost的表达式中包含了ounces时，顺序就很重要<br>例如，假设有下面的表达式:<br><code>ounces++, cost = ounces * FIRST_OZ</code><br>在该表达式中，先递增ounce，然后在第2个子表达式中使用ounce的新值<br>作为序列点的逗号保证了左侧子表达式的副作用在对右侧子表达式求值之前发生</p></blockquote></li><li><p>其次，整个逗号表达式的值是右侧项的值</p></li></ul><p><strong>图解说明逗号表达式的执行逻辑</strong></p><ul><li>逗号运算符和for循环:</li></ul><img src="/images/数据结构-6/逗号运算符和for循环-1.png" width="40%" height="40%"><ul><li>在进行复杂的计算之前，可以先看看数学上是否有简单的方法可用</li></ul><hr><h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><ul><li><p>出口条件循环</p></li><li><p>while循环和for循环都是入口条件循环，即在循环的每次迭代之前检查测试条件，所有有可能根本不执行循环体中的内容</p></li><li><p>C 中的出口条件循环(exit-condition loop)的作用是在循环的每次迭代后检查测试条件，以保证至少执行循环体中的内容以此，这种循环被称为do while循环</p></li><li><p>do while循环的通用形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">statement</span></span><br><span class="line"><span class="keyword">while</span> ( expression );</span><br></pre></td></tr></table></figure></li><li><p>在test为假或0之前，重复执行statement部分</p></li><li><p>示例程序:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">scanf(<span class="string">"%d"</span>,　&amp;<span class="built_in">number</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">while</span>　(<span class="built_in">number</span>　!=　<span class="number">20</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>statement可以是一条简单语句或复合语句</p><blockquote><p>注意，do while循环以分号结尾<br>do while循环在执行完循环体后才执行测试条件，所以至少执行循环体一次<br>而for循环或while循环都是在执行循环体之前先执行测试条件<br>dowhile循环适用于那些至少要迭代一次的循环<br>例如，对用户输入的密码进行测试的程序</p></blockquote></li><li><p>do while循环的结构示意图:</p></li></ul><img src="/images/数据类型-6/do while循环结构-1.png" width="40%" height="40%"><ul><li>其它注解:</li><li>do while语句创建一个循环，在expression为假或0之前重复执行循环体中的内容<blockquote><p>do while语句是一种出口条件循环，即在执行完循环体后才根据测试条件决定是否再次执行循环<br>因此，该循环至少必须执行一次<br>statement部分可是一条简单语句或复合语句</p></blockquote></li></ul><hr><h3 id="关于对循环的选择"><a href="#关于对循环的选择" class="headerlink" title="关于对循环的选择"></a>关于对循环的选择</h3><ul><li><p>首选需要确定是需要入口条件循环还是出口条件循环</p></li><li><p>通常，入口条件循环用的比较多</p></li><li><p>有几个原因:</p><blockquote><p>其一，一般原则是在执行循环之前测试条件比较好<br>其二，测试放在循环的开头，程序的可读性更高<br>另外，在许多应用中，要求在一开始不满足测试条件时就直接跳过整个循环<br>那么，假设需要一个入口条件循环，用for循环还是while循环取决于个人喜好，因为二者皆可</p></blockquote></li><li><p>要让for循环看起来像while循环，可以省略第1个和第3个表达式</p><blockquote><p><code>for ( ; test ; )</code>与此的while效果相同: <code>while ( test )</code></p></blockquote></li><li><p>要让while循环看起来像for循环，可以在while循环的前面初始化变量， 并在while循环体中包含更新语句</p></li><li><p>例如:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">初始化;</span><br><span class="line"><span class="keyword">while</span> ( 测试 )</span><br><span class="line">&#123;</span><br><span class="line">其他语句</span><br><span class="line">更新语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>与下面的for循环效果相同:</p><blockquote><p><code>for ( 初始化 ;测试 ; 更新 )</code></p></blockquote></li></ul><p><strong>其他语句:</strong></p><ul><li>一般而言，当循环涉及初始化和更新变量时，用for循环比较合适<blockquote><p>而在其他情况下用while循环更好</p></blockquote></li><li>对于下面这种条件，用while循环就很合 适：<blockquote><p><code>while (scanf(&quot;%ld&quot;, &amp;num) == 1)</code></p></blockquote></li><li>对于涉及索引计数的循环，用for循环更适合</li><li>例如:<blockquote><p><code>for (count = 1; count &lt;= 100; count++)</code></p></blockquote></li></ul><hr><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><ul><li><p>嵌套循环(nested loop)指在一个循环内包含另一个循环</p><blockquote><p>嵌套循环常用于按行和列显示数据，也就是说，一个循环处理一行中的所有列，另一个循环处理所有的行</p></blockquote></li><li><p>示例程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROWS 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHARS 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> row;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">for</span> (row=<span class="number">0</span>;row&lt;ROWS;row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (ch=<span class="string">'A'</span>;ch&lt;(<span class="string">'A'</span>+CHARS);ch++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ABCDEFGHIJ</span></span><br><span class="line"><span class="attribute">ABCDEFGHIJ</span></span><br><span class="line"><span class="attribute">ABCDEFGHIJ</span></span><br><span class="line"><span class="attribute">ABCDEFGHIJ</span></span><br><span class="line"><span class="attribute">ABCDEFGHIJ</span></span><br><span class="line"><span class="attribute">ABCDEFGHIJ</span></span><br></pre></td></tr></table></figure></li><li><p>程序分析:</p><blockquote><p>第10行开始的for循环被称为外层循环(outer loop)<br>第12行开始的for循环被称为内层循环(inner loop)<br>外层循环从row为0开始循环，到row为6时结束<br>因此，外层循环要执行6次，row的值从0变为5<br>每次迭代要执行的第1条语句是内层的for循环，该循环要执行10次，在同一行打印字符A～J<br>第2条语句是外层循环的printf(“\n”);<br>该语句的效果是另起一行，这样在 下一次运行内层循环时，将在下一行打印的字符<br>注意，嵌套循环中的内层循环在每次外层循环迭代时都执行完所有的循环<br>在程序中，内层循环一行打印10个字符，外层循环创建6行</p></blockquote></li><li><p>此实例中，内层循环和外层循环所做的事情相同</p></li><li><p>可以通过外层循环控制内层循环，在每次外层循环迭代时内层循环完成不同的任务</p><blockquote><p>比如可以根据上面的程序来修改内层循环条件<br>比如让row和A相加，而因为ch是char类型的，所以每次迭代所带来的结果就是将其初始化为不同的字符，所以程序每次对字符的打印数量都会比上一行少一个，如果没有改变测试条件，每行依旧会以F结尾<br>还可称其为依赖外部循环的嵌套循环，只不过不应该存在这种说法，因为这只是最基本的线性逻辑</p></blockquote></li></ul><hr><h3 id="关于在循环中使用数组"><a href="#关于在循环中使用数组" class="headerlink" title="关于在循环中使用数组"></a>关于在循环中使用数组</h3><ul><li><p>因为循环内经常需要用到数组，这里先对数组进行简单的说明</p><blockquote><p>数组可以作为一种存储多个相关项的便利方式</p></blockquote></li><li><p>数组(array)是按顺序存储一系列类型相同的值，如10个char类型的字符或15个int类型的值</p><blockquote><p>整个数组有一个数组明，通过整数下标来访问数组中单独的项或元素(element)</p></blockquote></li><li><p>以下是对数组进行声明的基本语法格式:</p><blockquote><p>float debts[20];</p></blockquote></li><li><p>声明debts是一个内含20个元素的数组，每个元素都可以存储float类型的值</p><blockquote><p>数组的第一个元素是debts[0]，第二个元素是debts[1]，以此类推，直到debts[19]<br>这里需要进行注意的一点就是，数组元素的编号从0开始，而非1<br>此时可以给每个元素赋float类型的值</p></blockquote></li><li><p>赋值的基本语法格式:</p><blockquote><p>debt[6] = 32.49;<br>debt[7] = 1.2e+21;</p></blockquote></li><li><p>实际上，使用数组元素和使用同类型的变量意义</p><blockquote><p>例如，可以这样把值读入指定的元素之中:<br>scanf(“%f”, &amp;debts[4]);</p></blockquote></li><li><p>这里要注意个潜在的陷阱，考虑到影响执行的速度，C 编译器不会检查数组的下标是否正确</p><blockquote><p>所以千万不要书写和使用数组中不存在的元素，因为编译器不会查找这样的错误<br>当运行程序时，这种情况会导致数据被放在在已被其它数据占用的地方，可能会破坏程序的结果甚至导致程序因异常而中断</p></blockquote></li><li><p>数组的类型可以是任意的数据类型</p><blockquote><p>int nannies[22];<br>char actors[26];<br>long big[500];</p></blockquote></li><li><p>可以把字符串存储在char类型的数组中(一般而言，char类型数组的所有元素都存储char类型的值)</p><blockquote><p>如果char类型的数组末尾包含了一个表示字符串末尾的空字符\0，则该数组的内容就构成了一个字符串</p></blockquote></li><li><p>图解字符串数组和字符串:</p></li></ul><img src="/images/数据类型-6/字符串和字符串数组.png" width="40%" height="40%"><ul><li><p>用于识别数组元素的数字被称为下标(subscript)，索引(indice)或偏移量(offset)</p><blockquote><p>下标必须是整数，而且要从0开始计数<br>数组内的元素依次被存储在内存中相邻的为止</p></blockquote></li><li><p>图解内存中的char和int类型的数组:</p></li></ul><img src="/images/数据类型-6/内存中的char和int类型的数组.png" width="40%" height="40%"><ul><li><p>在for循环中可以使用数组，也就是使用循环来处理数组</p></li><li><p>在调整循环语句的逻辑描述时，要时刻遵守模块化(modularity)原则</p><blockquote><p>模块化原则的思想就是: 应把程序划分为一些独立的单元，每个单元执行一个任务<br>这样做能够提升程序的可读性<br>最重要的是，模块化使程序的不同部分彼此独立，方便以后更新或修改程序<br>还可以将每个执行任务的单元放进函数中，提高程序的模块化</p></blockquote></li></ul><hr><ul><li>在循环内使用函数的返回值</li><li>使用带返回值的函数</li><li>此部分可能会被补充</li></ul><hr><h3 id="概念归纳"><a href="#概念归纳" class="headerlink" title="概念归纳"></a>概念归纳</h3><ul><li>循环是一个强大的编程工具<blockquote><p>在创建循环时，要特别注意以下3个方面:</p></blockquote></li></ul><ol><li>注意循环的测试条件要能使循环结束</li><li>确保循环测试中的值在首次使用之前已初始化</li><li>确保循环在每次迭代都更新测试的值</li></ol><ul><li><p>C通过求值来处理测试条件，结果为0表示假，非0表示真</p><blockquote><p>带关系运算符的表达式常用于循环测试，它们有些特殊<br>如果关系表达式为真，其值为 1<br>如果为假，其值为0<br>这与新类型<code>_Bool</code>的值保持一致</p></blockquote></li><li><p>数组由相邻的内存位置组成，只储存相同类型的数据</p><blockquote><p>记住，数组元素的编号从 0 开始，所有数组最后一个元素的下标一定比元素数目少1<br>C编 译器不会检查数组下标值是否有效，自己要多留心</p></blockquote></li><li><p>使用函数涉及3个步骤:</p></li></ul><ol><li>通过函数原型声明函数</li><li>在程序中通过函数调用使用函数</li><li>定义函数</li></ol><ul><li>函数原型是为了方便编译器查看程序中使用的函数是否正确<blockquote><p>函数定义描述了函数如何工作<br>现代的编程习惯是把程序要素分为接口部分和实现部分，例如函数原型和函数定义<br>接口部分描述了如何使用一个特性，也就是函数原型所做的<br>实现部分描述了具体的行为，这正是函数定义所做的</p></blockquote></li></ul><hr><ul><li>在便于理解的前提下，对代码的总体大小进行优化<blockquote><p>易于理解和维护的代码才是好代码<br>没必要去理解或书写一些逻辑严谨到夸张的地步和使用一大片符号类型的代码<br>可以将一句逻辑严谨的代码写成两句或三句便于理解的代码，当然是在保持美观的前提下<br>即模块化原则</p></blockquote></li></ul><hr><p><strong>内容来自原书第六章节</strong></p><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;数据类型-语句/控制语句-2&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="C/C++" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/C-C/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="C" scheme="https://unit-serow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C-资源整合目录</title>
    <link href="https://unit-serow.github.io/2020/03/12/C-%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88%E7%9B%AE%E5%BD%95/"/>
    <id>https://unit-serow.github.io/2020/03/12/C-%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88%E7%9B%AE%E5%BD%95/</id>
    <published>2020-03-12T15:55:11.000Z</published>
    <updated>2020-03-13T10:03:35.204Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --><center><strong>C-资源整合目录</strong></center><a id="more"></a><h3 id="C-资源整合目录"><a href="#C-资源整合目录" class="headerlink" title="C 资源整合目录"></a>C 资源整合目录</h3><ul><li>电子书籍</li><li>URL地址</li><li>参考资料</li></ul><hr><h3 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h3><ul><li>EN-C Primer Plus</li><li>CN-C 程序设计语言</li><li>CN-数据结构与算法分析-C 语言实现</li><li>CN-C Primer Plus (第六版)<blockquote><p>C11标准<br>作者: Stephen Prata<br>译者: 姜佑</p></blockquote></li></ul><hr><p><strong>书籍目录:</strong></p><ul><li>第一章/第二章-基本概念与书籍介绍</li><li>第三章-数据和C</li><li>第四章-字符串和格式化输入/输出</li><li>第五章-运算符，表达式和语句</li><li>第六章-C控制语句：循环</li><li>第七章-C控制语句：分支和跳转</li><li>第八章-字符输入/输出和输入验证</li><li>第九章-函数</li><li>第十章-数组和指针</li><li>第十一章-字符串和字符串函数</li><li>第十二章-存储类别，链接和内存管理</li><li>第十三章-文件输入/输出</li><li>第十四章-结构和其它数据形式</li><li>第十五章-位操作</li><li>第十六章-C预处理器和C库</li><li>第十七章-高级数据表示</li></ul><p><strong>笔记归纳:</strong></p><ul><li>第一/二/三章被归纳于数据类型-1/2内</li><li>第四章被归纳于数据类型-3/4内</li><li>第五章被归纳于数据类型-5内</li><li>第六章被归纳于数据类型-6内</li><li></li></ul><hr><ul><li>本书一共十七个章节，预计使用最多50个笔记文本进行刨析归纳<blockquote><p><code>17*2+16=50</code></p></blockquote></li></ul><hr><ul><li><p>相关资源整合包</p></li><li><p><a href="https://pan.baidu.com/s/1enDrHVuTM7i7mrBXMu8aLA" target="_blank" rel="noopener">百度网盘地址</a>:</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1enDrHVuTM7i7mrBXMu8aLA" target="_blank" rel="noopener">https://pan.baidu.com/s/1enDrHVuTM7i7mrBXMu8aLA</a><br>提取码: 0ez0</p></blockquote></li></ul><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;C-资源整合目录&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="C/C++" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/C-C/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="C" scheme="https://unit-serow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-5</title>
    <link href="https://unit-serow.github.io/2020/03/12/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-5/"/>
    <id>https://unit-serow.github.io/2020/03/12/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-5/</id>
    <published>2020-03-12T11:14:12.000Z</published>
    <updated>2020-03-12T11:16:20.592Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --><center><strong>数据类型-语句/控制语句-1</strong></center><a id="more"></a><h2 id="数据类型-5"><a href="#数据类型-5" class="headerlink" title="数据类型-5"></a>数据类型-5</h2><ul><li>语句与表达式-1<blockquote><p>C-控制语句/循环-While<br>C-控制语句/选择<br>关系运算及其关系运算符<br>条件表达式<br>真与假的概念<br>循环逻辑概念与原理</p></blockquote></li></ul><hr><ul><li>通常一门语言应该提供以下三种形式的程序流<blockquote><p>执行语句序列(即为线性的执行逻辑)<br>如果满足某些条件就进行重复执行的语句序列(循环)<br>通过测试选择执行哪一个语句序列(分支/控制)</p></blockquote></li></ul><hr><h2 id="C-控制语句-循环"><a href="#C-控制语句-循环" class="headerlink" title="C 控制语句-循环"></a>C 控制语句-循环</h2><h3 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a>While循环</h3><ul><li><p>while循环是入口条件循环</p><blockquote><p>或称其为while循环是使用入口条件的有条件循环<br>所谓的有条件指的是语句部分的执行取决于测试表达式描述的条件，如(index &lt; 5)<br>该表达式是一个入口条件(entry condition)，因为必须满足条件才能进入循环体<br>如果条件一开始就为假，则绝对不会进入循环体，则跳过循环体代码块</p></blockquote></li><li><p>可以把下面的伪代码作为while循环的标准格式:</p></li></ul><p>1.利用循环外的语句对循环内的变量进行值传递<br>2. 获得第1个用于测试的值 (while (循环条件))<br>3. 当测试为真时<br>4. 处理值 (根据循环条件)<br>5. 获取下一个值 scanf()</p><ul><li><p>当被输入的值传递进循环并可以保证条件为真时，开始第一轮循环</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">status</span> = scanf(<span class="string">"%ld"</span>, &amp;<span class="built_in">num</span>); <span class="comment">/* 定义被输入值的变量 */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">status</span> == <span class="number">1</span>) <span class="comment">/* 定义循环条件 */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">status</span> = scanf(<span class="string">"%ld"</span>, &amp;<span class="built_in">num</span>);  <span class="comment">/* 定义循环行为，即接受被输入的值，当接受的值可以满足循环条件时则为真，开始迭代 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还可以写为</p><blockquote><p><code>while (scanf(&quot;%ld&quot;, &amp;num) == 1){/* 循环行为 */}</code></p></blockquote></li><li><p>while循环的通用形式如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( expression )</span><br><span class="line">statement</span><br></pre></td></tr></table></figure></li><li><p>其中statement部分可以是以分号结尾的简单语句，也可以是用花括号括起来的复合语句</p></li><li><p>在大部分的程序内，expression部分都使用关系表达式</p><blockquote><p>也就是说，expression是值之间的比较，可以使用任何表达式<br>如果expression为真(或者更一般地说，非零)，则执行statement部分一次，然后再次判断expression<br>在expression为假(0)之前，循环的判断和执行一直重复进行<br>每次循环都被称为一次迭代/循环一轮(iteration)</p></blockquote></li><li><p>while循环结构示意图:</p></li></ul><img src="/images/数据类型-5/C-循环语句-1.png" width="30%" height="30%"><ul><li><p>while循环有一点非常重要: 在构建while循环时，必须让测试表达式的值有变化，表达式最终要为假</p><blockquote><p>否则，循环就不会终止(可以使用 break和if语句来终止循环)</p></blockquote></li><li><p>最大正值加一一般 会得到一个负值，类似地，最小负值减一一般会得到最大正值</p></li></ul><hr><h3 id="while的语法要点"><a href="#while的语法要点" class="headerlink" title="while的语法要点"></a>while的语法要点</h3><ul><li><p>使用while时，要牢记一点: 只有在测试条件后面的单独语句(简单语句或符合语句)才是循环部分</p><blockquote><p>while循环语句的格式应为while(){}，而绝非{while()}，陷入无限循环(infinite loop)是最常见的情况</p></blockquote></li><li><p>还有一点就是，即便while语句本身使用符合语句，while的本质依旧是一条单独的语句(或称为在语句构成上)</p><blockquote><p>该语句从while开始执行，到第一个分号结束，在使用复合语句的情况下，到右花括号结束，还需要注意分号的为止，一定要在语句结束时再写分号</p></blockquote></li><li><p>构成函数的概念只有语句和表达式，一切语句都已分号宣布独立(结束)</p><blockquote><p>即便在语句内使用了复合语句，复合语句则皆以右花括号结束</p></blockquote></li><li><p>在使用while语句时，可以直接将分号写在条件表达式后面，即可以让程序直接进入下一个迭代，因为一个单独的分号被视为一条语句</p></li><li><p>如果在测试条件(条件表达式)的代码后面直接添加单独的分号</p><blockquote><p>此分号则代表为一个空语句(null statement)，它什么也不做<br>在 C 中，单独的分号表示空语句，而处理空语句最好的方法是使用continue语句</p></blockquote></li></ul><hr><h3 id="关系运算符与表达式"><a href="#关系运算符与表达式" class="headerlink" title="关系运算符与表达式"></a>关系运算符与表达式</h3><ul><li><p>用关系运算符和表达式来比较大小</p></li><li><p>以下关于关系表达式与关系运算符的概念在所有的循环类语句概念中都通用，这里的通用泛指计算机上所有的程序语言</p></li><li><p>while循环经常依赖测试表达式来作比较，这样的表达式被称之为关系表达式(relational expression)</p></li><li><p>而出现在关系表达式中间的运算符叫做关系运算符(relational operator)</p></li><li><p>以下表图片内列出了 C 的所有关系运算符，同时该表也涵盖了所有的数值关系</p></li><li><p>关系运算符:</p></li></ul><img src="/images/数据类型-5/关系运算符-1.png" width="30%" height="30%"><ul><li><p>PS: 数字之间的关系再复杂也没有人与人之间的关系复杂-来自原书</p></li><li><p>关系运算符常用于构造while语句和其他C语句中用到的关系表达式</p><blockquote><p>这些语句都会检查关系表达式为真还是为假</p></blockquote></li><li><p>所谓关系运算符，存在的意义就是对人为所描述的表达式的值进行确定，确定的结果只有0和1，即真与假</p></li><li><p>而在确定的过程中，最常见的确定方法就是与人为所规定的值进行字符的比较</p></li><li><p>如果要对浮点数进行比较，尽量要去只是用&lt;和&gt;，因为浮点数的舍入误差会导致在逻辑上应该相等的两数却不相等</p></li><li><p>为了避免此类型错误的发生，C 内拥有fabs()函数，该函数声明在math.h头文件中</p><blockquote><p>使用该函数可以较为方便的比较浮点数，该函数返回一个浮点的绝对值(即为没有代数符号的值)</p></blockquote></li></ul><hr><p><strong>fabs()函数使用示范:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> ANSWER = <span class="number">3.14159</span>;</span><br><span class="line"><span class="keyword">double</span> response;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What is the value of pi?\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"lf"</span>, &amp;response);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fabs</span>(response - ANSWER) &gt; <span class="number">0.0001</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Try again!\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Close enough!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>循环会一直提示用户继续输入，除非用户输入的值与正确值之间相差 0.0001：</p></li><li><p>输出结果:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What <span class="keyword">is</span> the value of pi?</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line">Try again!</span><br><span class="line"><span class="number">3.1416</span></span><br><span class="line">Close enough!</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="何为真"><a href="#何为真" class="headerlink" title="何为真"></a>何为真</h3><ul><li><p>这是一个古老的问题，但是对C而言还不算难、</p></li><li><p>在C中，表达式一定有 一个值，关系表达式也不例外</p></li><li><p>可以使用并输出两条简单的比较语句，比如说 <code>true_val=(10&gt;2);</code>和<code>false_val(10==2);</code>，前者为真，后者为假</p><blockquote><p>则输出的结果必定是true=1，而false=0</p></blockquote></li><li><p>所以说，对 C 而言，表达式为真的值为1，表达式为假的值为0</p></li><li><p>当 C 程序的循环结构的判断结果一直为真(即为1)时，则反复且永远进行条件及语句的迭代</p></li><li><p>所以一些C程序使用下面的结构，由于1为真，所以该循环会一直进行</p><blockquote><p><code>while (1){...}</code></p></blockquote></li></ul><p><strong>关于其它的真值:</strong></p><ul><li><p>在 C 中，所有的非零值都被视为真，只有0被视为假</p><blockquote><p>也就是说，只要测试条件的值为非零，就会执行while循环</p></blockquote></li><li><p>这是从数值方面而不是从真/假方面来看测试条件</p><blockquote><p>还有需要进行牢记的一点就是，关系表达式为真，求值得一，关系表达式为假，求值得零<br>因此，这些表达式实际上相当于数值，所以必须要去充分利用测试条件的这一特性<br>比如，用while(goats)替换while(goats !=0)，因为表达式goats !=0和goats都只有在goats的值为0时才为0或假，所以再增加一个不等于(!=)的比较运算符的毫无意义的<br>这里利用了 C 内自动判断真值与假值的性质，或称其为默认值与自然选择</p></blockquote></li><li><p>在 C 或其它任何一种编程语言内，要尽量的去使用自然选择与缺省值来编译代码，从而使代码更加整洁与美观</p></li><li><p>这个特点既为好处，也为坏处，C 由于对真的约束太少，会带来一些麻烦</p><blockquote><p>当循环的条件表达式中没有定义==1，而定义了=1时，此时的条件表达式中的变量的值为一<br>而且，整个赋值表达式的值就是赋值运算符左侧的值，所以变量=1的值也是1，既while(变量=1)实际上就相当于while(1)<br>也就是说，循环不会退出，此时如果人为的输入其它的符号，从而让变量的值归于0，但是循环的测试条件又把改变量重置为1，从而又进入了下一次迭代<br>此时程序中的循环一直运行着，用户在输如符号后完全没有机会输入，如果scanf()读取指定形式的输入失败，就把无法读取的输入留在输入队列中，以供下一次读取<br>当scanf()把输入的符号(这里的符号可以为任何不属于数字的数据类型)作为整数读取失败了，他将会把字符留下<br>在下一次循环时，scanf()从上次读取失败的地方(被输入字符)开始读取，scanf()把该输入的字符再次作为整数读取，然后又失败了<br>以此，就造成了一个无限的循环，而且还是失败的</p></blockquote></li><li><p>所以这里千万需要注意的一点就是，千万别把关系相等运算符==和赋值运算符=给弄错了</p></li><li><p>因为 C 不允许给常量赋值</p><blockquote><p>而且编译器会把赋值运算符的这种用法作为语法错误标记出来<br>可以在构建比较是否相等的表达式时，把常量放在左侧，比如<code>6 = canoes;</code></p></blockquote></li><li><p>好在计算机察觉不出来，因为对计算机而言，无限地执行这些愚蠢的指令比成功预测未来10年的股市行情没什么两样-来自原文</p></li><li><p>总之，关系运算符用于构成关系表达式</p><blockquote><p>关系表达式为真时值为1，为假时值为0<br>通常用关系表达式作为测试条件的语句(如while和if)可以使用任何表达式作为测试条件<br>即非零为真，零为假</p></blockquote></li><li><p>以类似于<code>while (条件表达式)</code>这样的格式为变量进行命名可以让while循环的测试变得简单易懂</p></li></ul><hr><h3 id="Bool类型"><a href="#Bool类型" class="headerlink" title="_Bool类型"></a><code>_Bool</code>类型</h3><ul><li><p>在 C 中，一直用int类型的变量表示真/假值</p></li><li><p>C99专门针对这种类型 的变量新增了<code>_Bool</code>类型</p><blockquote><p>该类型是以英国数学家George Boole的名字命名 的，他开发了用代数表示逻辑和解决逻辑问题<br>在编程中，表示真或假的变量被称为布尔变量(Boolean variable)，所以<code>_Bool</code>是 C 中布尔变量的类型名<br>其中<code>_Bool</code>类型的变量只能储存1(真)或0(假)<br>如果把其他非零数值赋给<code>_Bool</code>类型的变量，该变量会被设置为1<br>这反映了C把所有的非零值都视为真<br>给布尔变量取一个能表示真或假值的变量名是一种常见的做法</p></blockquote></li><li><p>C99提供了<code>stdbool.h</code>头文件，该头文件让<code>bool</code>成为<code>_Bool</code>的别名</p><blockquote><p>而且还把true和false分别定义为1和0的符号常量<br>包含该头文件后，写出的代码可以与C++兼容<br>因为C++把bool，true和false定义为关键字<br>如果系统不支持<code>_Bool</code>类型，导致无法运行该程序<br>可以把<code>_Bool</code>替换成 int即可</p></blockquote></li></ul><hr><h3 id="优先级和关系运算符"><a href="#优先级和关系运算符" class="headerlink" title="优先级和关系运算符"></a>优先级和关系运算符</h3><ul><li><p>关系运算符的优先级比算术运算符(包括+和-)要更低，而比赋值运算符要高</p></li><li><p>关系运算符之间有两种不同的优先级。</p><blockquote><p>高优先级组: &lt;&lt;= &gt;&gt;=<br>低优先级组: == !=</p></blockquote></li><li><p>与其他大多数运算符一样，关系运算符的结合律也是从左往右</p></li><li><p>以下图片列表列出了常用的关系运算符优先级关系，具体可以参考-[C 运算符]，其中列出了全部运算符的完整优先级列表</p></li><li><p>运算符优先级:</p></li></ul><img src="/images/数据类型-5/C-关系运算符优先级-1.png" width="30%" height="30%"><hr><h3 id="关于不确定循环和计数循环"><a href="#关于不确定循环和计数循环" class="headerlink" title="关于不确定循环和计数循环"></a>关于不确定循环和计数循环</h3><ul><li><p>一些while循环是不确定循环(indefinite loop)</p><blockquote><p>所谓不确定循环，指 在测试表达式为假之前，预先不知道要执行多少次循环</p></blockquote></li><li><p>还有一类是计数循环(counting loop)</p><blockquote><p>这类循环在执行循环之前就知道要重复执行多少次</p></blockquote></li><li><p>在创建一个重复执行固定次数的循环中涉及了3个行为:</p></li></ul><p>1.必须初始化计数器<br>2.计数器与有限的值作比较<br>3.每次循环时递增计数器</p><ul><li>while循环的测试条件执行比较，递增运算符执行递增<blockquote><p>如果递增发生在循环的末尾，即可以防止不小心漏掉递增<br>因此，这样做比将测试和更新组合放在一起要好，但是计数器的初始化放在循环外，就有可能忘记初始化<br>此时可以用for循环来避免这种情况的发生</p></blockquote></li></ul><hr><p><strong>其它内容:</strong></p><ul><li>赋值运算符 用于将右值赋给左值，而左值通常为变量</li><li>赋值表达式</li><li>关系运算符 用于对左值和右值进行比较</li><li>条件运算符</li></ul><hr><h3 id="伪代码-pseudocode"><a href="#伪代码-pseudocode" class="headerlink" title="伪代码(pseudocode)"></a>伪代码(pseudocode)</h3><ul><li>是一种用简单的句子表示程序思路的方法，它与计算机语言的形式相对应</li><li>伪代码有助于涉及程序的逻辑</li><li>确定程序的逻辑无误后，再把伪代码翻译成实际的代码</li><li>使用为伪代码的好处之一是，可以把注意力集中再程序的组织和逻辑上，不用在设计程序时还要分心去想如何用编程语言来表达自己的想法</li><li>例如可以用缩进来代表一块代码，不用考虑 C 的语法要用花括号把部分代码括起来</li></ul><hr><h3 id="其它理解"><a href="#其它理解" class="headerlink" title="其它理解"></a>其它理解</h3><hr><ul><li><p>程序按照序列逻辑进行线性执行</p></li><li><p>由主函数mian()开始</p><blockquote><p>然后线性执行主函数内所调用的函数和语句<br>而其它的函数也是相同的原理，函数内的任何语句都是根据线性逻辑来逐一执行<br>至于循环语句与控制语句也是由线性逻辑来执行的，即执行完该语句上面的所有语句，再进行对循环或控制语句的执行<br>各种基本数据对象根据逻辑构成语句(数据对象可以包括变量，数组，指针，运算符，关键字或对于其它函数的调用等等)</p></blockquote></li><li><p>语句构成函数</p></li><li><p>函数构成程序</p></li><li><p>在计算机内，构成任何数据对象的逻辑都是线性的，即逐一执行</p></li></ul><hr><ul><li>预处理器(对于头文件的处理方法，通常是在程序编译之前就已经将头文件中的内容处理完毕，处理的对象即为对于所指头文件内函数的对应调用)</li><li>头文件(给当前的程序本身提供外部函数的支持，即对于当前语言标准库的支持)</li></ul><ol><li>定义常量</li><li>定义全局变量</li><li>函数声明</li></ol><ul><li>主函数<code>main(){包括了对于其它函数的调用以及线性逻辑执行}</code><blockquote><p>对于其它函数的补充</p></blockquote></li></ul><hr><ul><li><p>声明函数的基本格式为: <code>void funtion_name (void) {函数内容}</code></p><blockquote><p>圆括号内所声明的参数可称其为形式参数，即为没有值，但有数据类型的变量数据类型<br>前者的void为函数本身的数据类型，最常用的是整形类型或长整型类型<br>函数的类型用于声明让函数实现的功能模块</p></blockquote></li><li><p>构成函数的概念只有语句和表达式，一切语句都已分号宣布独立(结束)</p><blockquote><p>即便在语句内使用了复合语句，复合语句则皆以右花括号结束</p></blockquote></li></ul><hr><ul><li><p>每个函数或每个花括号都可以被称为是代码块</p></li><li><p>写程序的大体逻辑</p></li></ul><ol><li>先将常量和全局变量声明完毕</li><li>进行函数声明</li><li>然后先写上主函数</li><li>再对函数进行补充，以实现其对应功能</li><li>最后再主函数中的内容进行补充(通常就是对已存在的函数进行进行逐一调用)</li><li>编译源代码并执行程序</li></ol><ul><li>在计算机内，一切的执行逻辑都是线性的</li></ul><hr><ul><li><p>条件表达式与条件语句的本质就是判断值的真假或称其为0或1，用更大的范围去描述则是0与任何实数，即0就是假，或称其为无，其它的任何数都是真，或称其为有</p></li><li><p>无论是循环语句，选择语句还是任何的控制语句(流程控制语句)，它们存在(或称其为存在)的意义都是为了对所选条件表达式的值进行判断，而判断的结果只有两个，即为0与1</p></li><li><p>构成函数的概念只有语句和表达式，一切语句都已分号宣布独立(结束)</p><blockquote><p>即便在语句内使用了复合语句，复合语句则皆以右花括号结束</p></blockquote></li></ul><hr><ul><li>在 C 或其它任何一种编程语言内，要尽量的去使用自然选择与缺省值来编写代码，从而使代码更加整洁与美观</li><li>千万不要忘了伪代码的概念，一般的思路梳理就是对所谓伪代码的实现</li></ul><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Mar 19 2020 14:23:21 GMT+0800 (中国标准时间) --&gt;&lt;center&gt;&lt;strong&gt;数据类型-语句/控制语句-1&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="C/C++" scheme="https://unit-serow.github.io/categories/%E8%BD%AF%E4%BB%B6/C-C/"/>
    
    
      <category term="随笔" scheme="https://unit-serow.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="C" scheme="https://unit-serow.github.io/tags/C/"/>
    
  </entry>
  
</feed>
